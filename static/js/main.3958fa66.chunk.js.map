{"version":3,"sources":["app/views/Grid.css","index.css","app/views/App.css","app/views/Cell.css","app/views/Entity.css","app/types/instructions/baseInstruction.ts","app/types/dimension.ts","app/types/mazeData.ts","app/types/cell.ts","app/types/maze.ts","app/types/loadable.ts","app/types/id.ts","app/types/entities/player.ts","app/types/entities/entity.ts","app/types/point.ts","app/types/step.ts","app/types/game/entityData.ts","app/types/game/gameData.ts","app/types/instructions/move.ts","app/types/direction.ts","app/types/instructions/instruction.ts","app/types/result.ts","app/actions.ts","app/types/maybe.ts","app/selectors.ts","app/views/Entity.tsx","app/views/Cell.tsx","app/views/Grid.tsx","app/views/GamePad.tsx","app/views/Game.tsx","app/views/App.tsx","app/state.ts","app/reducer.ts","app/util/api.ts","app/sagas/stepEngine.ts","app/sagas/movePlayer.ts","app/saga.ts","index.tsx","app/store.ts","app/views/GamePad.css"],"names":["module","exports","InstructionType","create","width","height","fromApi","dimension","base64","bytes","Uint8Array","from","atob","c","charCodeAt","fromByte","byte","walls","n","s","e","w","fromMazeData","grid","r","row","push","Cell","canWalk","maze","direction","x","y","Direction","NORTH","EAST","SOUTH","WEST","isLoading","l","state","isLoaded","isErrored","loading","loaded","data","errored","map","f","v4","name","position","Point","id","ID","type","getColor","toIndex","fromIndex","idx","Math","floor","neighbor","p","d","instructions","fromEntities","entities","entityMap","reduce","m","positionMap","playerEntityId","Maybe","find","entitiesAtPoint","moveEntity","entity","oldIdx","newIdx","newEntity","filter","eId","entityData","displayGrid","rows","rowIdx","cells","cell","cellIdx","concat","occupants","EntityData","entityId","MOVE","payload","validate","move","gameData","Maze","Result","ok","undefined","err","apply","instruction","Move","validateAll","validated","i","isOk","console","warn","error","applyAll","applied","ActionTypes","msg","isErr","of","value","none","withDefault","maybe","default_","ifPresent","getState","getGame","createSelector","game","getDisplayGrid","Loadable","GameData","getIsProcessingStep","stepId","getPlayer","Entity","props","className","styles","root","style","backgroundColor","EntityT","drawSide","wall","borderTop","borderRight","borderBottom","borderLeft","o","key","Grid","cellAndOccupants","GamePad","onMove","block","classNames","button","onClick","Game","requestNewGame","options","REQUEST_NEW_GAME","abortStep","ABORT_STEP","completeStep","COMPLETE_STEP","connect","dispatch","MOVE_PLAYER","init","requestingNewGame","newGame","requestStep","ifGameIsLoaded","abortSTep","reducer","State","action","log","REQUEST_STEP","step","START_NEW_GAME","API_ROOT","Dimension","algorithm","request","fetch","method","mode","headers","body","JSON","stringify","dimensions","then","response","text","MazeData","stepEngine","take","select","call","Instruction","stepValidation","put","movePlayer","takeEvery","player","Step","handleNewGame","Api","mazeOptions","Player","sagas","all","spawn","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","Saga","configureStore","app","document","getElementById"],"mappings":"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","file":"static/js/main.3958fa66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__xSU_B\",\"row\":\"Grid_row__1rWaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"index_app__2lpzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ZxxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__2ti8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Entity_root__MaGTf\"};","import { ID } from \"..\";\n\nexport interface BaseInstruction {\n  entityId: ID.ID;\n  type: InstructionType;\n}\n\nexport enum InstructionType {\n  MOVE = \"MOVE\"\n}\n","export interface Dimension {\n  width: number;\n  height: number;\n}\n\nexport const create = (width: number = 0, height: number = 0): Dimension => ({\n  width,\n  height\n});\n","import { Dimension } from \".\";\n\nexport interface MazeData {\n  bytes: Uint8Array;\n  dimension: Dimension.Dimension;\n}\n\nexport interface Options {\n  dimension?: Dimension.Dimension;\n  algorithm?: \"aldous-broder\" | \"binary-tree\" | \"side-winder\";\n}\n\nexport const fromApi = (\n  dimension: Dimension.Dimension,\n  base64: string\n): MazeData => {\n  return {\n    bytes: Uint8Array.from(atob(base64), c => c.charCodeAt(0)),\n    dimension: dimension\n  };\n};\n","import { Direction } from \".\";\n\nexport interface Cell {\n  walls: Walls;\n}\n\n/**\n * A wall is present to direction n if n === true\n */\nexport interface Walls {\n  n: boolean;\n  e: boolean;\n  s: boolean;\n  w: boolean;\n}\n\nexport const walls = ({ n, e, s, w }: Partial<Walls>): Walls => ({\n  n: n || false,\n  e: e || false,\n  s: s || false,\n  w: w || false\n});\n\nexport const fromByte = (byte: number) => ({\n  walls: walls({\n    n: !((byte & 0b00001000) > 0),\n    s: !((byte & 0b00000100) > 0),\n    e: !((byte & 0b00000010) > 0),\n    w: !((byte & 0b00000001) > 0)\n  })\n});\n\nexport const hasWall = (\n  { walls }: Cell,\n  direction: Direction.Direction\n): boolean => {\n  switch (direction) {\n    case Direction.Direction.NORTH:\n      return walls.n;\n    case Direction.Direction.EAST:\n      return walls.e;\n    case Direction.Direction.SOUTH:\n      return walls.s;\n    case Direction.Direction.WEST:\n      return walls.w;\n  }\n};\n","import * as Cell from \"./cell\";\nimport * as MazeData from \"./mazeData\";\nimport { Dimension, Point, Direction } from \".\";\n\nexport interface Maze {\n  readonly grid: Grid;\n  readonly dimension: Dimension.Dimension;\n}\n\nexport type Grid = Array<Array<Cell.Cell>>;\n\nexport const fromMazeData = ({ dimension, bytes }: MazeData.MazeData): Maze => {\n  const grid: Grid = [];\n  for (let r = 0; r < dimension.height; r++) {\n    const row = [];\n    for (let c = 0; c < dimension.width; c++) {\n      row.push(Cell.fromByte(bytes[r * dimension.width + c]));\n    }\n    grid.push(row);\n  }\n\n  return {\n    grid,\n    dimension\n  };\n};\n\nexport const canWalk = (\n  maze: Maze,\n  { x, y }: Point.Point,\n  direction: Direction.Direction\n): boolean => {\n  const cell = maze.grid[y][x];\n  return !Cell.hasWall(cell, direction);\n};\n","interface Loaded<T> {\n  state: \"Loaded\";\n  data: T;\n}\n\ninterface Loading {\n  state: \"Loading\";\n}\n\ninterface Errored {\n  state: \"Errored\";\n  e: any;\n}\n\nexport type Loadable<T> = Loaded<T> | Loading | Errored;\n\nexport const isLoading = <T>(l: Loadable<T>): l is Loading =>\n  l.state === \"Loading\";\n\nexport const isLoaded = <T>(l: Loadable<T>): l is Loaded<T> =>\n  l.state === \"Loaded\";\n\nexport const isErrored = <T>(l: Loadable<T>): l is Errored =>\n  l.state === \"Errored\";\n\nexport const loading = <T>(): Loading => ({ state: \"Loading\" });\n\nexport const loaded = <T>(data: T): Loaded<T> => ({\n  state: \"Loaded\",\n  data\n});\n\nexport const errored = <T>(e: any): Errored => ({ state: \"Errored\", e });\n\nexport const map = <T, R>(f: (t: T) => R, l: Loadable<T>): Loadable<R> =>\n  isLoaded(l) ? loaded(f(l.data)) : l;\n","import { v4 } from \"uuid\";\n\nexport type ID = string;\n\nexport const create = (): ID => v4();\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\n\nexport interface Player extends BaseEntity.BaseEntity {\n  type: \"player\";\n  name: string;\n}\n\nexport const create = (\n  name: string,\n  position: Point.Point = Point.create()\n): Player => ({ id: ID.create(), name, position, type: \"player\" });\n","import { Player } from \"./player\";\n\nexport type Entity = Player;\n\nexport const getColor = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return \"var(--blue)\";\n    default:\n      return \"var(--red)\";\n  }\n};\n","import { Dimension, Point, Direction } from \".\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport const create = (x: number = 0, y: number = 0): Point => ({ x, y });\n\nexport const toIndex = (\n  { x, y }: Point,\n  { width }: Dimension.Dimension\n): number => y * width + x;\n\nexport const fromIndex = (idx: number, { width }: Dimension.Dimension): Point =>\n  create(Math.floor(idx / width), idx % width);\n\nexport const neighbor = (p: Point, d: Direction.Direction): Point => {\n  switch (d) {\n    case \"NORTH\":\n      return Point.create(p.x, p.y - 1);\n    case \"SOUTH\":\n      return Point.create(p.x, p.y + 1);\n    case \"EAST\":\n      return Point.create(p.x + 1, p.y);\n    case \"WEST\":\n    default:\n      return Point.create(p.x - 1, p.y);\n  }\n};\n","import { Instruction, ID } from \".\";\n\nexport interface Step {\n  instructions: Instruction.Instruction[];\n  id: ID.ID;\n}\n\nexport const create = (...instructions: Instruction.Instruction[]): Step => ({\n  instructions,\n  id: ID.create()\n});\n","import { ID, Dimension, Point, Maybe } from \"..\";\nimport { Entity } from \"../entities\";\n\nexport interface EntityData {\n  entityMap: Record<ID.ID, Entity.Entity>;\n  positionMap: Record<number, ID.ID[]>;\n  playerEntityId: Maybe.Maybe<ID.ID>;\n}\n\nexport const fromEntities = (\n  entities: Entity.Entity[],\n  dimension: Dimension.Dimension\n): EntityData => ({\n  entityMap: entities.reduce((m: Record<ID.ID, Entity.Entity>, e) => {\n    m[e.id] = e;\n    return m;\n  }, {}),\n  positionMap: entities.reduce((m: Record<number, ID.ID[]>, e) => {\n    const idx = Point.toIndex(e.position, dimension);\n    m[idx] = m[idx] ? [...m[idx], e.id] : [e.id];\n    return m;\n  }, {}),\n  playerEntityId: Maybe.map(\n    p => p.id,\n    entities.find(e => e.type === \"player\")\n  )\n});\n\nexport const entitiesAtPoint = (\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const idx = Point.toIndex(p, d);\n  const ids = data.positionMap[idx] || [];\n  return ids.map(id => data.entityMap[id]);\n};\n\nexport const moveEntity = (\n  id: ID.ID,\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): EntityData => {\n  const entity = data.entityMap[id];\n  if (entity != null) {\n    const oldIdx = Point.toIndex(entity.position, d);\n    const newIdx = Point.toIndex(p, d);\n    const newEntity = { ...entity, position: p };\n    return {\n      ...data,\n      entityMap: { ...data.entityMap, [id]: newEntity },\n      positionMap: {\n        ...data.positionMap,\n        [oldIdx]: [\n          ...(data.positionMap[oldIdx] || []).filter(eId => eId !== id)\n        ],\n        [newIdx]: [...(data.positionMap[newIdx] || []), id]\n      }\n    };\n  } else {\n    return data;\n  }\n};\n","import { Maze, Cell, Point } from \"..\";\nimport { EntityData, GameData } from \".\";\nimport { Entity } from \"../entities\";\n\nexport interface GameData {\n  maze: Maze.Maze;\n  entityData: EntityData.EntityData;\n}\n\nexport const create = (\n  maze: Maze.Maze,\n  entityData: EntityData.EntityData\n): GameData => ({\n  maze,\n  entityData\n});\n\nexport interface CellAndOccupants {\n  cell: Cell.Cell;\n  occupants: Entity.Entity[];\n}\n\nexport type DisplayGrid = Array<Array<CellAndOccupants>>;\n\nexport const displayGrid = ({ maze, entityData }: GameData): DisplayGrid =>\n  maze.grid.reduce(\n    (rows: CellAndOccupants[][], row, rowIdx) => [\n      ...rows,\n      row.reduce(\n        (cells: CellAndOccupants[], cell, cellIdx) =>\n          cells.concat({\n            cell,\n            occupants: EntityData.entitiesAtPoint(\n              entityData,\n              Point.create(cellIdx, rowIdx),\n              maze.dimension\n            )\n          }),\n        []\n      )\n    ],\n    []\n  );\n","import { Direction, ID, Result, Maze, Point } from \"..\";\nimport { GameData, EntityData } from \"../game\";\nimport { BaseInstruction, InstructionType } from \"./baseInstruction\";\n\nexport interface MoveInstruction extends BaseInstruction {\n  type: InstructionType.MOVE;\n  payload: {\n    direction: Direction.Direction;\n  };\n}\n\nexport const create = (\n  entityId: ID.ID,\n  direction: Direction.Direction\n): MoveInstruction => ({\n  type: InstructionType.MOVE,\n  entityId,\n  payload: { direction }\n});\n\nexport const validate = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  Maze.canWalk(\n    gameData.maze,\n    gameData.entityData.entityMap[move.entityId].position,\n    move.payload.direction\n  )\n    ? Result.ok(undefined)\n    : Result.err(\"way is blocked\");\n\nexport const apply = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.moveEntity(\n    move.entityId,\n    gameData.entityData,\n    Point.neighbor(\n      gameData.entityData.entityMap[move.entityId].position,\n      move.payload.direction\n    ),\n    gameData.maze.dimension\n  )\n});\n","export enum Direction {\n  NORTH = \"NORTH\",\n  SOUTH = \"SOUTH\",\n  EAST = \"EAST\",\n  WEST = \"WEST\"\n}\n","import { Result, Instruction } from \"..\";\nimport { Move } from \".\";\nimport { GameData } from \"../game\";\nimport { MoveInstruction } from \"./move\";\nimport { InstructionType } from \"./baseInstruction\";\n\nexport type Instruction = MoveInstruction;\n\nexport const validate = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<void> => {\n  switch (instruction.type) {\n    case InstructionType.MOVE:\n      return Move.validate(instruction, gameData);\n    default:\n      return Result.err(`Unkown instruction of type ${instruction.type}`);\n  }\n};\n\nexport const validateAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  instructions.reduce(\n    (validated: Result.Result<void>, i) =>\n      Result.isOk(validated) ? validate(i, gameData) : validated,\n    Result.ok(undefined)\n  );\n\nexport const apply = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> => {\n  try {\n    switch (instruction.type) {\n      case InstructionType.MOVE:\n        return Result.ok(Move.apply(instruction, gameData));\n      default:\n        return Result.err(`Unknown instruction of type ${instruction.type}`);\n    }\n  } catch (e) {\n    console.warn(\"Error applying instruction\", instruction);\n    console.error(e);\n    return Result.err(\"Error applying instructions\");\n  }\n};\n\nexport const applyAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> =>\n  instructions.reduce(\n    (applied: Result.Result<GameData.GameData>, i) =>\n      Result.isOk(applied) ? apply(i, applied.data) : applied,\n    Result.ok(gameData)\n  );\n","export interface Err {\n  type: \"Error\";\n  msg: string;\n}\n\nexport interface Ok<T> {\n  type: \"Ok\";\n  data: T;\n}\n\nexport type Result<T> = Ok<T> | Err;\n\nexport const ok = <T>(data: T): Ok<T> => ({ type: \"Ok\", data });\n\nexport const err = (msg: string): Err => ({ type: \"Error\", msg });\n\nexport const isErr = <T>(r: Result<T>): r is Err => r.type === \"Error\";\n\nexport const isOk = <T>(r: Result<T>): r is Ok<T> => r.type === \"Ok\";\n\nexport const map = <T, R>(f: (t: T) => R, r: Result<T>): Result<R> =>\n  isOk(r) ? ok(f(r.data)) : r;\n","import { MazeData, Maze, Step, ID, Direction } from \"./types\";\nimport { Entity } from \"./types/entities\";\nimport { GameData } from \"./types/game\";\n\nexport enum ActionTypes {\n  REQUEST_NEW_GAME = \"REQUEST_NEW_GAME\",\n  START_NEW_GAME = \"START_NEW_GAME\",\n\n  REQUEST_STEP = \"REQUEST_STEP\",\n  COMPLETE_STEP = \"COMPLETE_STEP\",\n  ABORT_STEP = \"ABORT_STEP\",\n\n  MOVE_PLAYER = \"MOVE_PLAYER\"\n}\n\ninterface NewGameOptions {\n  mazeOptions?: MazeData.Options;\n}\nexport interface RequestNewGame {\n  type: ActionTypes.REQUEST_NEW_GAME;\n  options: NewGameOptions;\n}\n\nexport interface StartNewGame {\n  type: ActionTypes.START_NEW_GAME;\n  maze: Maze.Maze;\n  entities: Entity.Entity[];\n}\n\nexport interface RequestStep {\n  type: ActionTypes.REQUEST_STEP;\n  step: Step.Step;\n}\n\nexport interface AbortStep {\n  type: ActionTypes.ABORT_STEP;\n  stepId: ID.ID;\n}\n\nexport interface CompleteStep {\n  type: ActionTypes.COMPLETE_STEP;\n  stepId: ID.ID;\n  gameData: GameData.GameData;\n}\n\nexport interface MovePlayer {\n  type: ActionTypes.MOVE_PLAYER;\n  direction: Direction.Direction;\n}\n\nexport type AppAction =\n  | RequestNewGame\n  | StartNewGame\n  | RequestStep\n  | AbortStep\n  | CompleteStep\n  | MovePlayer;\n\nexport const requestNewGame = (\n  options: NewGameOptions = {}\n): RequestNewGame => ({ type: ActionTypes.REQUEST_NEW_GAME, options });\n\nexport const startNewGame = (\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): StartNewGame => ({\n  type: ActionTypes.START_NEW_GAME,\n  maze,\n  entities\n});\n\nexport const requestStep = (step: Step.Step): RequestStep => ({\n  type: ActionTypes.REQUEST_STEP,\n  step\n});\n\nexport const abortStep = (stepId: ID.ID): AbortStep => ({\n  type: ActionTypes.ABORT_STEP,\n  stepId\n});\n\nexport const completeStep = (\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): CompleteStep => ({\n  type: ActionTypes.COMPLETE_STEP,\n  stepId,\n  gameData\n});\n\nexport const movePlayer = (direction: Direction.Direction): MovePlayer => ({\n  type: ActionTypes.MOVE_PLAYER,\n  direction\n});\n","export type Maybe<T> = T | undefined | null;\n\nexport const of = <T>(value: T | undefined | null): Maybe<T> => value;\nexport const none = <T>(): Maybe<T> => undefined;\nexport const withDefault = <T>(maybe: Maybe<T>, default_: T): T =>\n  maybe != null ? maybe : default_;\nexport const map = <T, R>(f: (t: T) => R, maybe: Maybe<T>): Maybe<R> =>\n  maybe != null ? f(maybe) : undefined;\n\nexport const ifPresent = <T>(f: (t: T) => void, maybe: Maybe<T>): void => {\n  if (maybe) {\n    f(maybe);\n  }\n};\n","import { State } from \"./state\";\nimport { createSelector } from \"reselect\";\nimport { Loadable, Maybe } from \"./types\";\nimport { GameData } from \"./types/game\";\n\nexport const getState = (state: State): State => state;\n\nexport const getGame = createSelector(getState, state => state.game);\n\nexport const getDisplayGrid = createSelector(getGame, game =>\n  Loadable.map(GameData.displayGrid, game)\n);\n\nexport const getIsProcessingStep = createSelector(\n  getState,\n  state => state.stepId != null\n);\n\nexport const getPlayer = createSelector(getGame, game =>\n  Loadable.isLoaded(game)\n    ? Maybe.map(\n        id => game.data.entityData.entityMap[id],\n        game.data.entityData.playerEntityId\n      )\n    : undefined\n);\n","import React from \"react\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport styles from \"./Entity.css\";\n\nexport const Entity = (props: EntityT.Entity): JSX.Element => (\n  <div\n    className={styles.root}\n    style={{ backgroundColor: EntityT.getColor(props) }}\n  >\n    {props.name[0]}\n  </div>\n);\n","import React from \"react\";\nimport { Cell as CellT } from \"../types\";\nimport styles from \"./Cell.css\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport { Entity } from \"./Entity\";\n\ninterface Props {\n  cell: CellT.Cell;\n  occupants: EntityT.Entity[];\n}\n\nconst IS_WALL = \"0.5px solid black\";\nconst IS_OPEN = \"0.5px transparent\";\nconst drawSide = (wall: boolean) => (wall ? IS_WALL : IS_OPEN);\n\nexport const Cell = ({ cell, occupants }: Props): JSX.Element => {\n  const { walls } = cell;\n  return (\n    <div\n      className={styles.root}\n      style={{\n        borderTop: drawSide(walls.n),\n        borderRight: drawSide(walls.e),\n        borderBottom: drawSide(walls.s),\n        borderLeft: drawSide(walls.w),\n        height: \"1.5rem\",\n        width: \"1.5rem\"\n      }}\n    >\n      {occupants.map((o, idx) => (\n        <Entity key={idx} {...o} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport styles from \"./Grid.css\";\nimport { GameData } from \"../types/game\";\n\ninterface Props {\n  grid: GameData.DisplayGrid;\n}\n\nexport const Grid = ({ grid }: Props): JSX.Element => {\n  return (\n    <div className={styles.root}>\n      {grid.map((row, idx) => (\n        <div key={idx} className={styles.row}>\n          {row.map((cellAndOccupants, idx) => (\n            <Cell\n              key={idx}\n              cell={cellAndOccupants.cell}\n              occupants={cellAndOccupants.occupants}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Effect, Direction } from \"../types\";\nimport styles from \"./GamePad.css\";\nimport classNames from \"classnames\";\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction>;\n}\n\ntype Props = DispatchProps;\n\nexport const GamePad = ({ onMove }: Props): JSX.Element => (\n  <div className={styles.root}>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.NORTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n    <div className={styles.row}>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.WEST)}\n      ></button>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.EAST)}\n      ></button>\n    </div>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.SOUTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { Grid } from \"./Grid\";\nimport { GameData } from \"../types/game\";\nimport { GamePad } from \"./GamePad\";\nimport { Effect, Direction } from \"../types\";\n\ninterface Props {\n  grid: GameData.DisplayGrid;\n  onMove: Effect.Effect1<Direction.Direction>;\n}\n\nexport const Game = ({ grid, onMove }: Props): JSX.Element => (\n  <>\n    <Grid grid={grid} />\n    <GamePad onMove={onMove} />\n  </>\n);\n","import React, { Dispatch } from \"react\";\nimport styles from \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../state\";\nimport { Loadable, Effect, Direction } from \"../types\";\nimport { getDisplayGrid } from \"../selectors\";\nimport { Game } from \"./Game\";\nimport { GameData } from \"../types/game\";\nimport { AppAction, movePlayer } from \"../actions\";\n\ninterface StateProps {\n  grid: Loadable.Loadable<GameData.DisplayGrid>;\n}\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction>;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst App = ({ grid, onMove }: Props) => {\n  return (\n    <div className={styles.root}>\n      {Loadable.isLoading(grid) && <span>Loading . . . </span>}\n      {Loadable.isLoaded(grid) && <Game grid={grid.data} onMove={onMove} />}\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  grid: getDisplayGrid(state)\n});\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<AppAction>\n): DispatchProps => ({\n  onMove: d => dispatch(movePlayer(d))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Maze, ID } from \"./types\";\nimport { Loadable } from \"./types\";\nimport { GameData, EntityData } from \"./types/game\";\nimport { Entity } from \"./types/entities\";\n\nexport interface State {\n  game: Loadable.Loadable<GameData.GameData>;\n  stepId?: ID.ID;\n}\n\nexport const create = (init = {}): State => ({\n  game: Loadable.loading(),\n  ...init\n});\n\nexport const requestingNewGame = (state: State): State => ({\n  ...state,\n  game: Loadable.loading()\n});\n\nexport const newGame = (\n  state: State,\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): State => ({\n  ...state,\n  game: Loadable.loaded(\n    GameData.create(maze, EntityData.fromEntities(entities, maze.dimension))\n  )\n});\n\nexport const ifGameIsLoaded = (f: () => State, state: State): State =>\n  Loadable.isLoaded(state.game) ? f() : state;\n\nexport const requestStep = (state: State, stepId: ID.ID): State => ({\n  ...state,\n  stepId\n});\n\nexport const completeStep = (\n  state: State,\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            stepId: undefined,\n            game: Loadable.loaded(gameData)\n          }\n        : state,\n    state\n  );\n\nexport const abortSTep = (state: State, stepId: ID.ID) =>\n  state.stepId === stepId ? { ...state, stepId: undefined } : state;\n","import * as State from \"./state\";\nimport { AppAction, ActionTypes } from \"./actions\";\n\nexport const reducer = (\n  state: State.State = State.create(),\n  action: AppAction\n): State.State => {\n  console.log({ state, action });\n  switch (action.type) {\n    case ActionTypes.REQUEST_STEP:\n      return State.requestStep(state, action.step.id);\n    case ActionTypes.COMPLETE_STEP:\n      return State.completeStep(state, action.stepId, action.gameData);\n    case ActionTypes.ABORT_STEP:\n      return State.abortSTep(state, action.stepId);\n    case ActionTypes.START_NEW_GAME:\n      return State.newGame(state, action.maze, action.entities);\n    case ActionTypes.REQUEST_NEW_GAME:\n      return State.requestingNewGame(state);\n    default:\n      return state;\n  }\n};\n","import { Dimension, MazeData } from \"../types\";\n\nconst API_ROOT = \"https://fv9o21r19a.execute-api.us-east-1.amazonaws.com/dev\";\n\nexport const maze = ({\n  dimension = Dimension.create(10, 10),\n  algorithm = \"aldous-broder\"\n}: MazeData.Options = {}): Promise<MazeData.MazeData> => {\n  const request = fetch(`${API_ROOT}`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({ dimensions: dimension, algorithm })\n  });\n  return request\n    .then(response => response.text())\n    .then(base64 => MazeData.fromApi(dimension, base64));\n};\n","import { RequestStep, abortStep, completeStep, ActionTypes } from \"../actions\";\nimport { Loadable, Instruction, Result } from \"../types\";\nimport { GameData } from \"../types/game\";\nimport { select, put, take, call } from \"redux-saga/effects\";\nimport { getGame } from \"../selectors\";\n\nexport function* stepEngine() {\n  while (true) {\n    try {\n      const { step }: RequestStep = yield take(ActionTypes.REQUEST_STEP);\n      const game: Loadable.Loadable<GameData.GameData> = yield select(getGame);\n      if (Loadable.isLoaded(game)) {\n        const { data: gameData } = game;\n\n        const stepValidation = yield call(\n          Instruction.validateAll,\n          step.instructions,\n          gameData\n        );\n\n        if (Result.isErr(stepValidation)) {\n          console.log(stepValidation);\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        const applied = yield call(\n          Instruction.applyAll,\n          step.instructions,\n          gameData\n        );\n\n        if (Result.isErr(applied)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        yield put(completeStep(step.id, applied.data));\n      }\n    } catch (e) {\n      console.warn(\"Error processing step\");\n      console.error(e);\n    }\n  }\n}\n\nexport function* generateAIInstructions() {}\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport { ActionTypes, MovePlayer, requestStep } from \"../actions\";\nimport { Player } from \"../types/entities\";\nimport { getPlayer, getIsProcessingStep } from \"../selectors\";\nimport { Step, Instruction } from \"../types\";\n\nexport function* movePlayer() {\n  yield takeEvery(ActionTypes.MOVE_PLAYER, function*(action: MovePlayer) {\n    const player: Player.Player = yield select(getPlayer);\n    const isProcessing: boolean = yield select(getIsProcessingStep);\n\n    if (!isProcessing && !!player) {\n      yield put(\n        requestStep(\n          Step.create(Instruction.Move.create(player.id, action.direction))\n        )\n      );\n    }\n  });\n}\n","import { call, spawn, all, take, put } from \"redux-saga/effects\";\nimport { Api } from \"./util\";\nimport { Maze, Dimension } from \"./types\";\nimport {\n  ActionTypes,\n  RequestNewGame,\n  startNewGame,\n  requestNewGame\n} from \"./actions\";\nimport { Player } from \"./types/entities\";\nimport { stepEngine } from \"./sagas/stepEngine\";\nimport { movePlayer } from \"./sagas/movePlayer\";\n\nfunction* handleNewGame() {\n  while (true) {\n    try {\n      const { options }: RequestNewGame = yield take(\n        ActionTypes.REQUEST_NEW_GAME\n      );\n      const data = yield call(Api.maze, options.mazeOptions || {});\n      yield put(startNewGame(Maze.fromMazeData(data), [Player.create(\"Test\")]));\n    } catch (e) {\n      console.warn(\"Error initializing new game\");\n      console.error(e);\n    }\n  }\n}\n\nconst sagas = [handleNewGame, stepEngine, movePlayer];\n\nexport function* root() {\n  yield all(sagas.map(s => spawn(s)));\n  yield put(\n    requestNewGame({\n      mazeOptions: {\n        dimension: Dimension.create(15, 15),\n        algorithm: \"aldous-broder\"\n      }\n    })\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from \"./index.css\";\nimport App from \"./app/views/App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <div className={styles.app}>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as Saga from \"./saga\";\nimport { State } from \"./state\";\nimport { AppAction } from \"./actions\";\n\nexport const configureStore = (): Store<State, AppAction> => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(Saga.root);\n\n  return store;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GamePad_root__Lay6t\",\"row\":\"GamePad_row__164Sm\",\"block\":\"GamePad_block__l2_xd\",\"button\":\"GamePad_button__3kDFo\"};"],"sourceRoot":""}