{"version":3,"sources":["app/views/Cell.css","app/views/Grid.css","index.css","app/views/App.css","app/views/Entity.css","app/views/Chat.css","app/types/entities/baseEntity.ts","app/util/api.ts","app/util/arrays.ts","app/util/numbers.ts","app/util/camera.ts","app/util/localStorage.ts","app/util/uri.ts","app/types/dimension.ts","app/types/mazeData.ts","app/types/cell.ts","app/types/maze.ts","app/types/loadable.ts","app/types/id.ts","app/types/entities/player.ts","app/types/game/entityData.ts","app/types/phenomenon.ts","app/types/instructions/baseInstruction.ts","app/types/game/gameData.ts","app/types/game/gameState.ts","app/types/point.ts","app/types/instructions/move.ts","app/types/direction.ts","app/types/instructions/update.ts","app/types/instructions/wait.ts","app/types/instructions/updateGameState.ts","app/types/instructions/see.ts","app/types/instructions/remove.ts","app/types/instructions/instruction.ts","app/types/entities/items/orbOfKnowing.ts","app/types/entities/items/item.ts","app/types/entities/entity.ts","app/types/entities/hostiles/blindGuardian.ts","app/types/entities/hostiles/wanderingHusk.ts","app/types/entities/exit.ts","app/types/entities/hostiles/sinisterDolls.ts","app/types/step.ts","app/actions.ts","app/types/result.ts","app/types/maybe.ts","app/types/outcome.ts","app/types/message.ts","app/selectors.ts","app/views/Entity.tsx","app/views/Cell.tsx","app/views/Grid.tsx","app/views/GamePad.tsx","app/views/KeyPad.tsx","app/views/Chat.tsx","app/views/Game.tsx","app/views/InfoButton.tsx","app/views/App.tsx","app/state.ts","app/reducer.ts","app/sagas/stepEngine.ts","app/sagas/movePlayer.ts","app/sagas/newGame.ts","app/saga.ts","index.tsx","app/store.ts","app/views/GamePad.css"],"names":["module","exports","EntityClass","API_ROOT","maze","dimension","Dimension","create","algorithm","corner","direction","request","fetch","method","mode","headers","body","JSON","stringify","dimensions","then","response","text","base64","MazeData","fromApi","nOf","n","t","Array","fill","sorted","unsorted","sortFn","sort","nonNull","array","filter","randomItem","Math","floor","random","length","randomInRange","start","end","centerOnPoint","grid","point","radius","xMin","x","xMax","yMin","y","yMax","windowedGrid","row","push","Maybe","map","getSiteSetting","key","supplier","withDefault","window","localStorage","getItem","supplied","setItem","parseQuery","location","search","substring","split","reduce","queryMap","pair","parts","width","height","area","d","randomPoint","Point","fromIndex","pointAlongEdge","northOrSouth","Numbers","inBounds","p","bytes","Uint8Array","from","atob","c","charCodeAt","randomDirectionalOptions","Arrays","fromByte","byte","walls","s","e","w","isDeadEnd","fromMazeData","deadends","r","cell","Cell","toIndex","unused","used","canWalk","Direction","NORTH","EAST","SOUTH","WEST","canTravel","directions","last","neighbor","undefined","lookInDirection","visionRadius","peekableCorners","corners","seenFromPoint","origin","all","concat","takeDeadEnd","de","deadEnds","placeEntitiesInDeadEnds","creators","acc","creator","placed","unplaced","isLoading","l","state","isLoaded","isErrored","loading","loaded","data","errored","f","v4","name","position","displayName","randomDisplayName","id","ID","type","cls","BaseEntity","PLAYER","Phenomena","InstructionType","fromEntities","entities","entityMap","m","positionMap","idx","playerEntityId","find","typeMap","entitiesAtPoint","getPlayer","byId","byType","moveEntity","entity","oldIdx","newIdx","newEntity","eId","removeEntity","Object","keys","k","parseInt","updateEntity","updated","entitiesCrossed","next","a","b","lastA","lastB","nextA","nextB","equals","neighborsCrossedByEntity","neighbors","entityData","player","EntityData","sees","Set","Maze","seen","stepCount","GameState","play","lookForEntityInDirection","gameData","predicate","siteRadius","found","displayGrid","rows","rowIdx","cells","cellIdx","isSeen","has","isVisible","meta","occupants","visible","unknown","generateAllAIInstructions","i","Entity","generateAiInstructions","win","lose","cod","causeOfDeath","won","lost","playing","diagonalNeighbors","move","entityId","MOVE","payload","updatePlayerVision","prev","update","UPDATE","wait","WAIT","updateGameState","UPDATE_GAME_STATE","see","indices","SEE","remove","REMOVE","validate","instruction","Result","ok","err","Move","validateAll","instructions","validated","isOk","apply","Update","_","Wait","UpdateGameState","See","Remove","console","warn","error","applyAll","applied","base","ITEM","baseItem","phenomena","knowing","Phenomenon","KNOW_DOOR_LOCATION","duration","fn","alert","exit","Instruction","DISPLAY","getColor","getDisplayName","BlindGuardian","Exit","WanderingHusk","OrbOfKnowing","SinisterDolls","getDescription","onCollideWithPlayer","HOSTILE","Outcome","getKillMessage","killer","heading","options","adjacent","inverse","includes","towardPlayer","lookForPlayerInDirection","wander","foundPlayer","INANIMATE","ActionTypes","msg","isErr","of","value","none","maybe","default_","ifPresent","outcomes","o","message","speaker","getState","getGame","createSelector","game","getDisplayGrid","Loadable","GameData","getIsProcessingStep","stepId","getWindowedDisplayGrid","Camera","getMessages","chat","messages","className","styles","root","EntityT","drawSide","wall","classNames","style","borderTop","borderRight","borderBottom","borderLeft","getEntityToDraw","EmptyCell","empty","Grid","largeScreen","large","maybeCell","GamePad","onMove","block","button","onClick","KeyPad","handleKeyDown","event","props","disabled","addEventListener","this","removeEventListener","React","Chat","Game","processingUpdates","minWidth","VERSION","requestNewGame","REQUEST_NEW_GAME","startNewGame","START_NEW_GAME","abortStep","ABORT_STEP","processStep","PROCESS_STEP","DEV","LocalStorage","queryParam","Uri","href","indexOf","version","connect","onFocus","preventDefault","top","left","type_","join","gameInfo","el","blur","document","activeElement","dispatch","MOVE_PLAYER","init","roundsSince","requestingNewGame","newGame","ifGameIsLoaded","requestStep","completeStep","g","Message","slice","addMessage","reducer","State","action","REQUEST_STEP","step","COMPLETE_STEP","ADD_MESSAGE","stepEngine","applyPhenomena","checkGameState","activePhenomena","take","select","call","stepValidation","put","aiInstructions","afterMovement","processCollisions","collisionOutcomes","afterCollisions","phenomenalInstructions","afterPhenomena","prunePhenomena","generatedInstructions","confirm","reload","movePlayer","takeEvery","Step","firstGame","prompt","mazeOptions","Api","fromData","startingEntities","prePlacement","Player","guardians","husks","enemies","log","u","sagas","spawn","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","Saga","configureStore","app","getElementById"],"mappings":"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","file":"static/js/main.0e6b847e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__2ti8K\",\"empty\":\"Cell_empty__1ByI9\",\"seen\":\"Cell_seen__2qSTX\",\"visible\":\"Cell_visible__2bnT3\",\"unknown\":\"Cell_unknown__2tYkG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__xSU_B\",\"row\":\"Grid_row__1rWaL\",\"large\":\"Grid_large__2_Ser\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"index_app__2lpzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ZxxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Entity_root__MaGTf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Chat_root__2csEn\"};","import { ID, Point } from \"..\";\n\nexport enum EntityClass {\n  PLAYER = \"PLAYER\",\n  INANIMATE = \"INANIMATE\",\n  HOSTILE = \"HOSTILE\",\n  ITEM = \"ITEM\"\n}\n\nexport interface BaseEntity {\n  position: Point.Point;\n  id: ID.ID;\n  type: string;\n  cls: EntityClass;\n}\n\nexport interface HostileEntity extends BaseEntity {\n  cls: EntityClass.HOSTILE;\n}\n","import { Dimension, MazeData } from \"../types\";\n\nconst API_ROOT = \"https://fv9o21r19a.execute-api.us-east-1.amazonaws.com/dev\";\n\nexport const maze = ({\n  dimension = Dimension.create(10, 10),\n  algorithm = \"aldous-broder\",\n  corner,\n  direction\n}: MazeData.Options = {}): Promise<MazeData.MazeData> => {\n  const request = fetch(`${API_ROOT}`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      dimensions: dimension,\n      algorithm,\n      corner,\n      direction\n    })\n  });\n  return request\n    .then(response => response.text())\n    .then(base64 => MazeData.fromApi(dimension, algorithm, base64));\n};\n","import { Maybe } from \"../types\";\n\nexport const nOf = <T>(n: number, t: T): Array<T> => new Array(n).fill(t);\n\nexport const sorted = <T>(\n  unsorted: Array<T>,\n  sortFn?: (a: T, b: T) => number\n): Array<T> => {\n  const sorted = [...unsorted];\n  sorted.sort(sortFn);\n  return sorted;\n};\n\nexport const nonNull = <T>(array: Array<Maybe.Maybe<T>>): Array<T> =>\n  array.filter(t => t != null) as Array<T>;\n\nexport const randomItem = <T>(array: Array<T>): T =>\n  array[Math.floor(Math.random() * array.length)];\n","export const randomInRange = (start: number, end: number) => {\n  return start + Math.floor(Math.random() * (end - start - 1));\n};\n","import { DisplayGrid, CellAndMeta } from \"../types/game/gameData\";\nimport { Point, Maybe } from \"../types\";\n\nexport type WindowedGrid = Array<Array<Maybe.Maybe<CellAndMeta>>>;\n\nexport const centerOnPoint = (\n  grid: DisplayGrid,\n  point: Point.Point,\n  radius: number\n): WindowedGrid => {\n  const xMin = point.x - radius;\n  const xMax = point.x + radius + 1;\n  const yMin = point.y - radius;\n  const yMax = point.y + radius + 1;\n\n  const windowedGrid: WindowedGrid = [];\n\n  for (let y = yMin; y < yMax; y++) {\n    const row = [];\n    for (let x = xMin; x < xMax; x++) {\n      row.push(Maybe.map(row => row[x], grid[y]));\n    }\n    windowedGrid.push(row);\n  }\n\n  return windowedGrid;\n};\n","import { Maybe } from \"../types\";\n\nconst PREFIX = \"followed.settings\";\n\nexport const getSiteSetting = (\n  key: string,\n  supplier: () => Maybe.Maybe<string>\n): Maybe.Maybe<string> => {\n  return Maybe.withDefault(\n    window.localStorage.getItem(`${PREFIX}.${key}`),\n    () => {\n      const supplied = supplier();\n\n      if (supplied) {\n        window.localStorage.setItem(`${PREFIX}.${key}`, supplied);\n        return supplied;\n      }\n    }\n  );\n};\n","import { Maybe } from \"../types\";\n\nexport const parseQuery = (): Record<string, Maybe.Maybe<string>> =>\n  window.location.search\n    .substring(1)\n    .split(\"&\")\n    .reduce((queryMap: Record<string, string>, pair: string) => {\n      const parts = pair.split(\"=\");\n      return { ...queryMap, [parts[0]]: parts[1] };\n    }, {});\n","import { Point } from \".\";\nimport { Numbers } from \"../util\";\n\nexport interface Dimension {\n  width: number;\n  height: number;\n}\n\nexport const create = (width: number = 0, height: number = 0): Dimension => ({\n  width,\n  height\n});\n\nexport const area = (d: Dimension): number => d.width * d.height;\n\nexport const randomPoint = (d: Dimension): Point.Point =>\n  Point.fromIndex(Math.floor(Math.random() * area(d)), d);\n\nexport const pointAlongEdge = (d: Dimension): Point.Point => {\n  const northOrSouth = Math.random() > 0.5;\n\n  return Point.create(\n    northOrSouth\n      ? Numbers.randomInRange(0, d.width)\n      : Math.random() > 0.5\n      ? 0\n      : d.width - 1,\n    !northOrSouth\n      ? Numbers.randomInRange(0, d.height)\n      : Math.random() > 0.5\n      ? 0\n      : d.height - 1\n  );\n};\n\nexport const inBounds = (d: Dimension, p: Point.Point): boolean =>\n  p.x >= 0 && p.y >= 0 && p.x < d.width && p.y < d.height;\n","import { Dimension } from \".\";\nimport { Arrays } from \"../util\";\n\ntype Algorithm = \"aldous-broder\" | \"binary-tree\" | \"side-winder\";\n\nexport interface MazeData {\n  bytes: Uint8Array;\n  dimension: Dimension.Dimension;\n  algorithm: Algorithm;\n}\n\ntype ApiCorner = \"nw\" | \"ne\" | \"sw\" | \"se\";\ntype ApiDir = \"n\" | \"e\" | \"s\" | \"w\";\n\nexport interface Options {\n  dimension?: Dimension.Dimension;\n  algorithm?: Algorithm;\n  corner?: ApiCorner;\n  direction?: ApiDir;\n}\n\nexport const fromApi = (\n  dimension: Dimension.Dimension,\n  algorithm: Algorithm,\n  base64: string\n): MazeData => {\n  return {\n    bytes: Uint8Array.from(atob(base64), c => c.charCodeAt(0)),\n    dimension,\n    algorithm\n  };\n};\n\nexport const randomDirectionalOptions = (): Pick<\n  Options,\n  \"corner\" | \"direction\"\n> => ({\n  corner: Arrays.randomItem([\"nw\", \"ne\", \"sw\", \"se\"]),\n  direction: Arrays.randomItem([\"n\", \"e\", \"s\", \"w\"])\n});\n","import { Direction } from \".\";\n\nexport interface Cell {\n  walls: Walls;\n}\n\n/**\n * A wall is present to direction n if n === true\n */\nexport interface Walls {\n  n: boolean;\n  e: boolean;\n  s: boolean;\n  w: boolean;\n}\n\nexport const walls = ({ n, e, s, w }: Partial<Walls>): Walls => ({\n  n: n || false,\n  e: e || false,\n  s: s || false,\n  w: w || false\n});\n\nexport const fromByte = (byte: number) => ({\n  walls: walls({\n    n: !((byte & 0b00001000) > 0),\n    s: !((byte & 0b00000100) > 0),\n    e: !((byte & 0b00000010) > 0),\n    w: !((byte & 0b00000001) > 0)\n  })\n});\n\nexport const isDeadEnd = ({ walls }: Cell) => {\n  return (\n    [walls.n, walls.e, walls.s, walls.w].filter(w => w === true).length >= 3\n  );\n};\n\nexport const hasWall = (\n  { walls }: Cell,\n  direction: Direction.Direction\n): boolean => {\n  switch (direction) {\n    case Direction.Direction.NORTH:\n      return walls.n;\n    case Direction.Direction.EAST:\n      return walls.e;\n    case Direction.Direction.SOUTH:\n      return walls.s;\n    case Direction.Direction.WEST:\n      return walls.w;\n  }\n};\n","import * as Cell from \"./cell\";\nimport * as MazeData from \"./mazeData\";\nimport { Dimension, Point, Direction, Maybe } from \".\";\nimport { Arrays } from \"../util\";\nimport { Entity } from \"./entities\";\n\nexport interface Maze {\n  readonly grid: Grid;\n  readonly dimension: Dimension.Dimension;\n  readonly algorithm: string;\n  readonly deadends: DeadEnds;\n}\n\nexport type Grid = Array<Array<Cell.Cell>>;\n\nexport const fromMazeData = ({\n  dimension,\n  bytes,\n  algorithm\n}: MazeData.MazeData): Maze => {\n  const grid: Grid = [];\n  const deadends: number[] = [];\n  for (let r = 0; r < dimension.height; r++) {\n    const row = [];\n    for (let c = 0; c < dimension.width; c++) {\n      const cell = Cell.fromByte(bytes[r * dimension.width + c]);\n      row.push(cell);\n      if (Cell.isDeadEnd(cell)) {\n        deadends.push(Point.toIndex(Point.create(c, r), dimension));\n      }\n    }\n    grid.push(row);\n  }\n\n  return {\n    grid,\n    dimension,\n    algorithm,\n    deadends: {\n      unused: deadends,\n      used: []\n    }\n  };\n};\n\nexport const canWalk = (\n  maze: Maze,\n  { x, y }: Point.Point,\n  direction: Direction.Direction\n): boolean => {\n  const cell = maze.grid[y][x];\n  return !Cell.hasWall(cell, direction);\n};\n\nexport const canTravel = (\n  maze: Maze,\n  p: Point.Point,\n  ...directions: Direction.Direction[]\n): boolean =>\n  !!directions.reduce(\n    (last: Maybe.Maybe<Point.Point>, d) =>\n      last && canWalk(maze, last, d) ? Point.neighbor(last, d) : undefined,\n    p\n  );\n\nexport const lookInDirection = (\n  maze: Maze,\n  d: Direction.Direction,\n  p: Point.Point,\n  visionRadius: number\n): Point.Point[] => {\n  if (canWalk(maze, p, d) && visionRadius > 0) {\n    const neighbor = Point.neighbor(p, d);\n    return [neighbor, ...lookInDirection(maze, d, neighbor, visionRadius - 1)];\n  } else {\n    return [];\n  }\n};\n\nexport const peekableCorners = (maze: Maze, p: Point.Point): Point.Point[] => {\n  let corners: Point.Point[] = [];\n  if (\n    canTravel(maze, p, Direction.Direction.NORTH, Direction.Direction.EAST) ||\n    canTravel(maze, p, Direction.Direction.EAST, Direction.Direction.NORTH)\n  ) {\n    corners.push(Point.create(p.x + 1, p.y - 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.NORTH, Direction.Direction.WEST) ||\n    canTravel(maze, p, Direction.Direction.WEST, Direction.Direction.NORTH)\n  ) {\n    corners.push(Point.create(p.x - 1, p.y - 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.SOUTH, Direction.Direction.EAST) ||\n    canTravel(maze, p, Direction.Direction.EAST, Direction.Direction.SOUTH)\n  ) {\n    corners.push(Point.create(p.x + 1, p.y + 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.SOUTH, Direction.Direction.WEST) ||\n    canTravel(maze, p, Direction.Direction.WEST, Direction.Direction.SOUTH)\n  ) {\n    corners.push(Point.create(p.x - 1, p.y + 1));\n  }\n\n  return corners;\n};\n\nexport const seenFromPoint = (\n  maze: Maze,\n  origin: Point.Point,\n  visionRadius: number\n): Point.Point[] =>\n  Direction.all()\n    .reduce(\n      (p: Point.Point[], d) =>\n        p.concat(lookInDirection(maze, d, origin, visionRadius)),\n      []\n    )\n    .concat(peekableCorners(maze, origin))\n    .concat(origin);\n\n/**\n * Deadends . . .\n */\n\ninterface DeadEnds {\n  used: number[];\n  unused: number[];\n}\n\nexport const takeDeadEnd = (maze: Maze): [number, Maze] => {\n  const de = Arrays.randomItem(maze.deadends.unused);\n  if (de) {\n    return [\n      de,\n      {\n        ...maze,\n        deadends: {\n          unused: maze.deadends.unused.filter(c => c !== de),\n          used: [...maze.deadends.used, de]\n        }\n      }\n    ];\n  } else {\n    return [-1, maze];\n  }\n};\n\nexport const deadEnds = (maze: Maze): number[] => {\n  return [...maze.deadends.used, ...maze.deadends.unused];\n};\n\ntype EntityCreator = (p: Point.Point) => Entity.Entity;\ntype PlacementAcc = {\n  maze: Maze;\n  placed: Entity.Entity[];\n  unplaced: Entity.Entity[];\n};\n\nexport const placeEntitiesInDeadEnds = (\n  maze: Maze,\n  creators: EntityCreator[]\n): PlacementAcc => {\n  return creators.reduce(\n    (acc: PlacementAcc, creator) => {\n      const [de, maze] = takeDeadEnd(acc.maze);\n      let placed;\n      let unplaced;\n      if (de) {\n        placed = [\n          ...acc.placed,\n          creator(Point.fromIndex(de, acc.maze.dimension))\n        ];\n        unplaced = [...acc.unplaced];\n      } else {\n        placed = [...acc.placed];\n        unplaced = [...acc.unplaced, creator(Point.create(-1, -1))];\n      }\n      return {\n        maze,\n        placed,\n        unplaced\n      };\n    },\n    {\n      maze,\n      placed: [],\n      unplaced: []\n    }\n  );\n};\n","interface Loaded<T> {\n  state: \"Loaded\";\n  data: T;\n}\n\ninterface Loading {\n  state: \"Loading\";\n}\n\ninterface Errored {\n  state: \"Errored\";\n  e: any;\n}\n\nexport type Loadable<T> = Loaded<T> | Loading | Errored;\n\nexport const isLoading = <T>(l: Loadable<T>): l is Loading =>\n  l.state === \"Loading\";\n\nexport const isLoaded = <T>(l: Loadable<T>): l is Loaded<T> =>\n  l.state === \"Loaded\";\n\nexport const isErrored = <T>(l: Loadable<T>): l is Errored =>\n  l.state === \"Errored\";\n\nexport const loading = <T>(): Loading => ({ state: \"Loading\" });\n\nexport const loaded = <T>(data: T): Loaded<T> => ({\n  state: \"Loaded\",\n  data\n});\n\nexport const errored = <T>(e: any): Errored => ({ state: \"Errored\", e });\n\nexport const map = <T, R>(f: (t: T) => R, l: Loadable<T>): Loadable<R> =>\n  isLoaded(l) ? loaded(f(l.data)) : l;\n","import { v4 } from \"uuid\";\n\nexport type ID = string;\n\nexport const create = (): ID => v4();\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\nimport { Arrays } from \"../../util\";\n\nexport interface Player extends BaseEntity.BaseEntity {\n  type: \"player\";\n  name: string;\n  visionRadius: number;\n  displayName: string;\n  cls: BaseEntity.EntityClass.PLAYER;\n}\n\nexport const create = (\n  name: string,\n  position: Point.Point = Point.create(),\n  visionRadius: number = 5,\n  displayName: string = randomDisplayName()\n): Player => ({\n  id: ID.create(),\n  name,\n  position,\n  type: \"player\",\n  visionRadius,\n  displayName: displayName || name,\n  cls: BaseEntity.EntityClass.PLAYER\n});\n\nexport const randomDisplayName = (): string =>\n  Arrays.randomItem([\n    \"🐕\",\n    \"🐦\",\n    \"🐈\",\n    \"🐎\",\n    \"🐖\",\n    \"🐁\",\n    \"🐀\",\n    \"🐢\"\n    // \"🚶‍♂️\",\n    // \"🚶‍♀️\"\n  ]);\n","import { ID, Dimension, Point, Maybe } from \"..\";\nimport { Entity, Player } from \"../entities\";\nimport { Arrays } from \"../../util\";\nimport { EntityData } from \".\";\n\nexport interface EntityData {\n  entityMap: Record<ID.ID, Entity.Entity>;\n  positionMap: Record<number, ID.ID[]>;\n  playerEntityId: Maybe.Maybe<ID.ID>;\n  typeMap: Record<string, ID.ID[]>;\n}\n\nexport const fromEntities = (\n  entities: Entity.Entity[],\n  dimension: Dimension.Dimension\n): EntityData => ({\n  entityMap: entities.reduce((m: Record<ID.ID, Entity.Entity>, e) => {\n    m[e.id] = e;\n    return m;\n  }, {}),\n  positionMap: entities.reduce((m: Record<number, ID.ID[]>, e) => {\n    const idx = Point.toIndex(e.position, dimension);\n    m[idx] = m[idx] ? [...m[idx], e.id] : [e.id];\n    return m;\n  }, {}),\n  playerEntityId: Maybe.map(\n    p => p.id,\n    entities.find(e => e.type === \"player\")\n  ),\n  typeMap: entities.reduce(\n    (m: Record<string, ID.ID[]>, e) => ({\n      ...m,\n      [e.type]: m[e.type] ? [...m[e.type], e.id] : [e.id]\n    }),\n    {}\n  )\n});\n\nexport const entitiesAtPoint = (\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const idx = Point.toIndex(p, d);\n  const ids = data.positionMap[idx] || [];\n  return ids.map(id => data.entityMap[id]);\n};\n\nexport const getPlayer = (data: EntityData): Player.Player =>\n  Maybe.map(id => data.entityMap[id] as Player.Player, data.playerEntityId)!;\n\nexport const byId = (data: EntityData, id: ID.ID) => data.entityMap[id];\n\nexport const byType = (data: EntityData, type: string): Entity.Entity[] =>\n  Arrays.nonNull(data.typeMap[type] || []).map(id => data.entityMap[id]);\n\nexport const moveEntity = (\n  id: ID.ID,\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): EntityData => {\n  const entity = data.entityMap[id];\n  if (entity != null) {\n    const oldIdx = Point.toIndex(entity.position, d);\n    const newIdx = Point.toIndex(p, d);\n    const newEntity = { ...entity, position: p };\n    return {\n      ...data,\n      entityMap: { ...data.entityMap, [id]: newEntity },\n      positionMap: {\n        ...data.positionMap,\n        [oldIdx]: [\n          ...(data.positionMap[oldIdx] || []).filter(eId => eId !== id)\n        ],\n        [newIdx]: [...(data.positionMap[newIdx] || []), id]\n      }\n    };\n  } else {\n    return data;\n  }\n};\n\nexport const removeEntity = (\n  id: ID.ID,\n  data: EntityData,\n  d: Dimension.Dimension\n): EntityData => {\n  const entity = data.entityMap[id];\n  const idx = Point.toIndex(entity.position, d);\n  return {\n    ...data,\n    entityMap: Object.keys(data.entityMap).reduce(\n      (m: Record<ID.ID, Entity.Entity>, k) => {\n        if (k !== id) {\n          m[k] = data.entityMap[k];\n        }\n        return m;\n      },\n      {}\n    ),\n    typeMap: Object.keys(data.typeMap).reduce(\n      (m: Record<string, ID.ID[]>, k) => {\n        if (k === entity.type) {\n          m[k] = data.typeMap[k].filter(eId => eId !== id);\n        } else {\n          m[k] = data.typeMap[k];\n        }\n        return m;\n      },\n      {}\n    ),\n    positionMap: Object.keys(data.positionMap)\n      .map(k => parseInt(k) as number)\n      .reduce((m: Record<number, ID.ID[]>, k: number) => {\n        if (k === idx) {\n          m[k] = data.positionMap[k].filter(eId => eId !== id);\n        } else {\n          m[k] = data.positionMap[k];\n        }\n        return m;\n      }, {})\n  };\n};\n\n// might need to augment to handle type change\nexport const updateEntity = (\n  updated: Entity.Entity,\n  data: EntityData\n): EntityData => ({\n  ...data,\n  entityMap: { ...data.entityMap, [updated.id]: updated }\n});\n\nexport const entitiesCrossed = (\n  last: EntityData,\n  next: EntityData,\n  a: ID.ID,\n  b: ID.ID\n): boolean => {\n  const lastA = last.entityMap[a];\n  const lastB = last.entityMap[b];\n  const nextA = next.entityMap[a];\n  const nextB = next.entityMap[b];\n\n  return (\n    Point.equals(nextA.position, lastB.position) &&\n    Point.equals(nextB.position, lastA.position)\n  );\n};\n\nexport const neighborsCrossedByEntity = (\n  last: EntityData,\n  next: EntityData,\n  e: ID.ID,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const neighborIndices = Point.neighbors(\n    next.entityMap[e].position,\n    d\n  ).map(p => Point.toIndex(p, d));\n\n  const neighborEntities = neighborIndices.reduce(\n    (entities: ID.ID[], idx) => entities.concat(next.positionMap[idx] || []),\n    []\n  );\n\n  return neighborEntities\n    .filter(id => entitiesCrossed(last, next, e, id))\n    .map(id => next.entityMap[id]);\n};\n","// import * as GameData from \"./game/gameData\";\nimport { Instruction } from \".\";\nimport { SagaIterator } from \"redux-saga\";\n\nexport enum Phenomena {\n  FORGETTING,\n  KNOW_DOOR_LOCATION = \"KNOW_DOOR_LOCATION\"\n}\n\ntype Duration = \"FOREVER\" | number;\n\nexport interface Phenomenon {\n  name: Phenomena;\n  fn: (\n    gameData: any\n  ) => Instruction.Instruction[] | SagaIterator<Instruction.Instruction[]>;\n  duration: Duration;\n}\n","export interface BaseInstruction {\n  type: InstructionType;\n}\n\nexport enum InstructionType {\n  MOVE = \"MOVE\",\n  UPDATE = \"UPDATE\",\n  WAIT = \"WAIT\",\n  UPDATE_GAME_STATE = \"UPDATE_GAME_STATE\",\n  SEE = \"SEE\",\n  REMOVE = \"REMOVE\",\n  ADD = \"ADD\"\n}\n","import { Maze, Cell, Point, Instruction, Direction } from \"..\";\nimport { EntityData, GameData, GameState } from \".\";\nimport { Entity } from \"../entities\";\n\nexport interface GameData {\n  maze: Maze.Maze;\n  entityData: EntityData.EntityData;\n  seen: Set<number>;\n  sees: Set<number>;\n  stepCount: number;\n  state: GameState.GameState;\n}\n\nexport const create = (\n  maze: Maze.Maze,\n  entityData: EntityData.EntityData\n): GameData => {\n  const player = EntityData.getPlayer(entityData);\n  const sees = new Set<number>(\n    player\n      ? Maze.seenFromPoint(maze, player.position, player.visionRadius).map(p =>\n          Point.toIndex(p, maze.dimension)\n        )\n      : []\n  );\n\n  return {\n    maze,\n    entityData,\n    seen: new Set(),\n    sees,\n    stepCount: 0,\n    state: GameState.play()\n  };\n};\n\nexport const lookForEntityInDirection = (\n  d: Direction.Direction,\n  origin: Point.Point,\n  gameData: GameData.GameData,\n  predicate: (e: Entity.Entity) => boolean,\n  siteRadius: number = 5\n): boolean =>\n  Maze.lookInDirection(gameData.maze, d, origin, siteRadius).reduce(\n    (found: boolean, p) =>\n      !found\n        ? EntityData.entitiesAtPoint(\n            gameData.entityData,\n            p,\n            gameData.maze.dimension\n          ).find(predicate) != null\n        : found,\n    false\n  );\n\nexport interface CellMeta {\n  occupants: Entity.Entity[];\n  visible: boolean;\n  seen: boolean;\n  unknown: boolean;\n}\n\nexport interface CellAndMeta {\n  cell: Cell.Cell;\n  meta: CellMeta;\n}\n\nexport type DisplayGrid = CellAndMeta[][];\n\nexport const displayGrid = ({\n  maze,\n  entityData,\n  seen,\n  sees\n}: GameData): DisplayGrid =>\n  maze.grid.reduce(\n    (rows: CellAndMeta[][], row, rowIdx) => [\n      ...rows,\n      row.reduce((cells: CellAndMeta[], cell, cellIdx) => {\n        const p = Point.create(cellIdx, rowIdx);\n        const isSeen = seen.has(Point.toIndex(p, maze.dimension));\n        const isVisible = sees.has(Point.toIndex(p, maze.dimension));\n        return cells.concat({\n          cell,\n          meta: {\n            occupants: EntityData.entitiesAtPoint(\n              entityData,\n              Point.create(cellIdx, rowIdx),\n              maze.dimension\n            ),\n            visible: isVisible,\n            seen: isSeen,\n            unknown: !isVisible && !isSeen\n          }\n        });\n      }, [])\n    ],\n    []\n  );\n\nexport const generateAllAIInstructions = (\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const aiEntities = Object.keys(gameData.entityData.entityMap)\n    .map(k => EntityData.byId(gameData.entityData, k))\n    .filter(e => e.type !== \"player\");\n\n  return aiEntities.reduce(\n    (i: Instruction.Instruction[], e) =>\n      i.concat(Entity.generateAiInstructions(e, gameData)),\n    []\n  );\n};\n","import { ID } from \"..\";\n\nexport interface Won {\n  type: \"Won\";\n}\n\ninterface Murdered {\n  entityId: ID.ID;\n}\n\ntype CauseOfDeath = Murdered;\n\nexport interface Lost {\n  type: \"Lost\";\n  causeOfDeath: CauseOfDeath;\n}\n\nexport interface Playing {\n  type: \"Playing\";\n}\n\nexport type GameState = Won | Lost | Playing;\n\nexport const win = (): Won => ({ type: \"Won\" });\n\nexport const lose = (cod: CauseOfDeath): Lost => ({\n  type: \"Lost\",\n  causeOfDeath: cod\n});\n\nexport const play = (): Playing => ({ type: \"Playing\" });\n\nexport const won = (state: GameState): state is Won => state.type === \"Won\";\nexport const lost = (state: GameState): state is Lost => state.type === \"Lost\";\nexport const playing = (state: GameState): state is Playing =>\n  state.type === \"Playing\";\n","import { Dimension, Point, Direction } from \".\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport const create = (x: number = 0, y: number = 0): Point => ({ x, y });\n\nexport const toIndex = (\n  { x, y }: Point,\n  { width }: Dimension.Dimension\n): number => y * width + x;\n\nexport const fromIndex = (idx: number, { width }: Dimension.Dimension): Point =>\n  create(idx % width, Math.floor(idx / width));\n\nexport const neighbor = (p: Point, d: Direction.Direction): Point => {\n  switch (d) {\n    case \"NORTH\":\n      return Point.create(p.x, p.y - 1);\n    case \"SOUTH\":\n      return Point.create(p.x, p.y + 1);\n    case \"EAST\":\n      return Point.create(p.x + 1, p.y);\n    case \"WEST\":\n    default:\n      return Point.create(p.x - 1, p.y);\n  }\n};\n\nexport const neighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  Direction.all()\n    .map(d => neighbor(p, d))\n    .filter(p => Dimension.inBounds(d, p));\n\nexport const diagonalNeighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  [\n    create(p.x - 1, p.y - 1),\n    create(p.x + 1, p.y - 1),\n    create(p.x + 1, p.y + 1),\n    create(p.x - 1, p.y + 1)\n  ].filter(p => Dimension.inBounds(d, p));\n\nexport const equals = (a: Point.Point, b: Point.Point): boolean =>\n  a.x === b.x && a.y === b.y;\n","import { Direction, ID, Result, Maze, Point } from \"..\";\nimport { GameData, EntityData } from \"../game\";\nimport { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Player } from \"../entities\";\n\nexport interface MoveInstruction extends BaseInstruction {\n  type: InstructionType.MOVE;\n  payload: {\n    direction: Direction.Direction;\n    entityId: ID.ID;\n  };\n}\n\nexport const move = (\n  entityId: ID.ID,\n  direction: Direction.Direction\n): MoveInstruction => ({\n  type: InstructionType.MOVE,\n  payload: { entityId, direction }\n});\n\nexport const validate = (\n  { payload }: MoveInstruction,\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  Maze.canWalk(\n    gameData.maze,\n    gameData.entityData.entityMap[payload.entityId].position,\n    payload.direction\n  )\n    ? Result.ok(undefined)\n    : Result.err(\"way is blocked\");\n\nexport const apply = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => {\n  const { entityId, direction } = move.payload;\n  const entityData = EntityData.moveEntity(\n    entityId,\n    gameData.entityData,\n    Point.neighbor(gameData.entityData.entityMap[entityId].position, direction),\n    gameData.maze.dimension\n  );\n\n  const player = EntityData.getPlayer(entityData);\n  const { seen, sees } =\n    player && entityId === player.id\n      ? updatePlayerVision(gameData.seen, player, gameData.maze)\n      : gameData;\n\n  return {\n    ...gameData,\n    seen,\n    sees,\n    entityData\n  };\n};\n\nexport const updatePlayerVision = (\n  prev: Set<number>,\n  player: Player.Player,\n  maze: Maze.Maze\n): Pick<GameData.GameData, \"seen\" | \"sees\"> => {\n  const sees = new Set<number>(\n    Maze.seenFromPoint(maze, player.position, player.visionRadius).map(p =>\n      Point.toIndex(p, maze.dimension)\n    )\n  );\n\n  const seen = new Set<number>([...prev, ...sees]);\n\n  return { sees, seen };\n};\n","import * as Arrays from \"../util/arrays\";\n\nexport enum Direction {\n  NORTH = \"NORTH\",\n  SOUTH = \"SOUTH\",\n  EAST = \"EAST\",\n  WEST = \"WEST\"\n}\n\nexport const all = (): Direction[] => [\n  Direction.NORTH,\n  Direction.SOUTH,\n  Direction.EAST,\n  Direction.WEST\n];\n\nexport const inverse = (d: Direction): Direction => {\n  switch (d) {\n    case Direction.NORTH:\n      return Direction.SOUTH;\n    case Direction.SOUTH:\n      return Direction.NORTH;\n    case Direction.EAST:\n      return Direction.WEST;\n    case Direction.WEST:\n      return Direction.EAST;\n  }\n};\n\nexport const random = (): Direction => Arrays.randomItem(all());\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Entity } from \"../entities\";\nimport { GameData, EntityData } from \"../game\";\n\nexport interface UpdateInstruction extends BaseInstruction {\n  type: InstructionType.UPDATE;\n  payload: {\n    updated: Entity.Entity;\n  };\n}\n\nexport const update = (updated: Entity.Entity): UpdateInstruction => ({\n  type: InstructionType.UPDATE,\n  payload: { updated }\n});\n\nexport const apply = (\n  update: UpdateInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.updateEntity(\n    update.payload.updated,\n    gameData.entityData\n  )\n});\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { ID } from \"..\";\nimport { GameData } from \"../game\";\n\nexport interface WaitInstruction extends BaseInstruction {\n  type: InstructionType.WAIT;\n  payload: {\n    entityId: ID.ID;\n  };\n}\n\nexport const wait = (entityId: ID.ID): WaitInstruction => ({\n  type: InstructionType.WAIT,\n  payload: {\n    entityId\n  }\n});\n\nexport const apply = (\n  _: WaitInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({ ...gameData });\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { GameState, GameData } from \"../game\";\n\nexport interface UpdateGameStateInstruction extends BaseInstruction {\n  type: InstructionType.UPDATE_GAME_STATE;\n  payload: {\n    updated: GameState.GameState;\n  };\n}\n\nexport const updateGameState = (\n  updated: GameState.GameState\n): UpdateGameStateInstruction => ({\n  type: InstructionType.UPDATE_GAME_STATE,\n  payload: {\n    updated\n  }\n});\n\nexport const apply = (\n  update: UpdateGameStateInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  state: GameState.lost(gameData.state)\n    ? gameData.state\n    : update.payload.updated\n});\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { GameData } from \"../game\";\n\nexport interface SeeInstruction extends BaseInstruction {\n  type: InstructionType.SEE;\n  payload: number[];\n}\n\nexport const see = (indices: number[]): SeeInstruction => ({\n  type: InstructionType.SEE,\n  payload: indices\n});\n\nexport const apply = (\n  see: SeeInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  seen: new Set([...gameData.seen, ...see.payload])\n});\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { ID } from \"..\";\nimport { GameData, EntityData } from \"../game\";\n\nexport interface RemoveInstruction extends BaseInstruction {\n  type: InstructionType.REMOVE;\n  payload: ID.ID;\n}\n\nexport const remove = (id: ID.ID): RemoveInstruction => ({\n  type: InstructionType.REMOVE,\n  payload: id\n});\n\nexport const apply = (\n  remove: RemoveInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.removeEntity(\n    remove.payload,\n    gameData.entityData,\n    gameData.maze.dimension\n  )\n});\n","import { Result, Instruction } from \"..\";\nimport * as Move from \"./move\";\nimport * as Update from \"./update\";\nimport * as Wait from \"./wait\";\nimport * as UpdateGameState from \"./updateGameState\";\nimport * as See from \"./see\";\nimport * as Remove from \"./remove\";\nimport { GameData } from \"../game\";\nimport { InstructionType } from \"./baseInstruction\";\n\nexport type Instruction =\n  | Move.MoveInstruction\n  | Update.UpdateInstruction\n  | Wait.WaitInstruction\n  | UpdateGameState.UpdateGameStateInstruction\n  | See.SeeInstruction\n  | Remove.RemoveInstruction;\n\nexport const validate = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<void> => {\n  switch (instruction.type) {\n    case InstructionType.MOVE:\n      return Move.validate(instruction, gameData);\n    case InstructionType.WAIT:\n      return Result.ok(undefined);\n    default:\n      return Result.err(`Unkown instruction of type ${instruction.type}`);\n  }\n};\n\nexport const validateAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  instructions.reduce(\n    (validated: Result.Result<void>, i) =>\n      Result.isOk(validated) ? validate(i, gameData) : validated,\n    Result.ok(undefined)\n  );\n\nexport const apply = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> => {\n  try {\n    switch (instruction.type) {\n      case InstructionType.MOVE:\n        return Result.ok(Move.apply(instruction, gameData));\n      case InstructionType.UPDATE:\n        return Result.ok(Update.apply(instruction, gameData));\n      case InstructionType.WAIT:\n        return Result.ok(Wait.apply(instruction, gameData));\n      case InstructionType.UPDATE_GAME_STATE:\n        return Result.ok(UpdateGameState.apply(instruction, gameData));\n      case InstructionType.SEE:\n        return Result.ok(See.apply(instruction, gameData));\n      case InstructionType.REMOVE:\n        return Result.ok(Remove.apply(instruction, gameData));\n    }\n  } catch (e) {\n    console.warn(\"Error applying instruction\", instruction);\n    console.error(e);\n    return Result.err(\"Error applying instructions\");\n  }\n};\n\nexport const applyAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> =>\n  instructions.reduce(\n    (applied: Result.Result<GameData.GameData>, i) =>\n      Result.isOk(applied) ? apply(i, applied.data) : applied,\n    Result.ok(gameData)\n  );\n","import * as Point from \"../../point\";\nimport * as Phenomenon from \"../../phenomenon\";\nimport * as Instruction from \"../../instructions\";\nimport * as GameData from \"../../game/gameData\";\nimport * as EntityData from \"../../game/entityData\";\nimport * as Exit from \"../exit\";\nimport { Item, baseItem } from \"./item\";\nimport { ID } from \"../..\";\n\nexport interface OrbOfKnowing extends Item {\n  type: \"orb-of-knowing\";\n}\n\nexport const create = (position: Point.Point): OrbOfKnowing => {\n  const base = baseItem(position);\n  return {\n    ...base,\n    type: \"orb-of-knowing\",\n    phenomena: knowing(base.id),\n    instruction: []\n  };\n};\nexport const knowing = (id: ID.ID): Phenomenon.Phenomenon => ({\n  name: Phenomenon.Phenomena.KNOW_DOOR_LOCATION,\n  duration: 1,\n  fn: (gameData: GameData.GameData): Instruction.Instruction[] => {\n    alert(\n      \"You feel enlightened by the forces of providence.\\n\" +\n        \"For in thine posession is the Orb of Knowing.\"\n    );\n    return [\n      ...EntityData.byType(gameData.entityData, \"exit\")\n        .map(e => e as Exit.Exit)\n        .map(exit => Point.toIndex(exit.position, gameData.maze.dimension))\n        .map(p => Instruction.see([p])),\n      Instruction.remove(id)\n    ];\n  }\n});\n\nexport const DISPLAY = \"㊙️\";\n","import { BaseEntity, EntityClass } from \"../baseEntity\";\nimport { Phenomenon, Instruction, Point, ID } from \"../..\";\n\nexport interface Item extends BaseEntity {\n  cls: EntityClass.ITEM;\n  phenomena: Phenomenon.Phenomenon;\n  instruction: Instruction.Instruction[];\n}\n\nexport const baseItem = (\n  position: Point.Point\n): Omit<Item, \"type\" | \"phenomena\" | \"instruction\"> => ({\n  id: ID.create(),\n  cls: EntityClass.ITEM,\n  position\n});\n","import { GameData, GameState } from \"../game\";\nimport { Instruction, Outcome } from \"..\";\nimport {\n  BlindGuardian,\n  Player,\n  Exit,\n  WanderingHusk,\n  Entity,\n  SinisterDolls\n} from \".\";\nimport { EntityClass } from \"./baseEntity\";\nimport { Items, OrbOfKnowing } from \"./items\";\n\nexport type HostileEntities =\n  | BlindGuardian.BlindGuardian\n  | WanderingHusk.WanderingHusk\n  | SinisterDolls.SinisterDolls;\n\nexport type Entity = Player.Player | Exit.Exit | HostileEntities | Items;\n\nexport const getColor = (e: Entity): string => {\n  switch (e.type) {\n    default:\n      return \"transparent\";\n  }\n};\n\nexport const getDisplayName = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return e.displayName;\n    case \"blind-guardian\":\n      return BlindGuardian.DISPLAY;\n    case \"exit\":\n      return Exit.DISPLAY;\n    case \"wandering-husk\":\n      return WanderingHusk.DISPLAY;\n    case \"orb-of-knowing\":\n      return OrbOfKnowing.DISPLAY;\n    case \"sinister-dolls\":\n      return SinisterDolls.DISPLAY;\n  }\n};\n\nexport const getDescription = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return e.name;\n    case \"blind-guardian\":\n      return \"a blind guardian\";\n    case \"exit\":\n      return \"an exit\";\n    case \"wandering-husk\":\n      return \"a wandering husk\";\n    case \"orb-of-knowing\":\n      return \"a mysterious, translucent orb\";\n    case \"sinister-dolls\":\n      return \"two lifelike dolls\";\n  }\n};\n\nexport const generateAiInstructions = (\n  e: Entity,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  switch (e.type) {\n    case \"blind-guardian\":\n      return BlindGuardian.next(e, gameData);\n    case \"wandering-husk\":\n      return WanderingHusk.next(e, gameData);\n    case \"sinister-dolls\":\n      return SinisterDolls.next(e, gameData);\n    default:\n      return [];\n  }\n};\n\nexport const onCollideWithPlayer = (\n  e: Entity,\n  gameData: GameData.GameData\n): Outcome.Outcome => {\n  if (e.cls === EntityClass.HOSTILE) {\n    return Outcome.create([\n      Instruction.updateGameState(GameState.lose({ entityId: e.id }))\n    ]);\n  } else if (e.cls === EntityClass.ITEM) {\n    return Outcome.create(undefined, [e.phenomena]);\n  } else if (e.type === \"exit\") {\n    return Outcome.create([Instruction.updateGameState(GameState.win())]);\n  } else {\n    return Outcome.create();\n  }\n};\n\nexport const getKillMessage = (p: Player.Player, killer: Entity): string => {\n  switch (killer.type) {\n    case \"blind-guardian\":\n      return `${p.name} has been annihilated by ${getDescription(\n        killer\n      )}. Nothing is left.`;\n    case \"wandering-husk\":\n      return `Blood and sinew cling to the maw of the wandering husk. ${p.name} has been consumed.`;\n    case \"sinister-dolls\":\n      return `The dolls draw closer. ${p.name} is frozen. Then, darkness. ${p.name} is never heard from again.`;\n    default:\n      return `${p.name} was killed by ${getDescription(killer)}`;\n  }\n};\n","import { BaseEntity } from \"..\";\nimport { Point, ID, Direction, Instruction, Maze } from \"../..\";\nimport { GameData } from \"../../game\";\nimport { Arrays } from \"../../../util\";\n\n/**\n * The blind guardian is a sightless, senseless automaton\n */\nexport interface BlindGuardian extends BaseEntity.HostileEntity {\n  type: \"blind-guardian\";\n  heading: Direction.Direction;\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): BlindGuardian => ({\n  type: \"blind-guardian\",\n  position,\n  id: ID.create(),\n  heading: Direction.Direction.NORTH,\n  cls: BaseEntity.EntityClass.HOSTILE\n});\n\nexport const next = (\n  e: BlindGuardian,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const options = Direction.all().filter(d =>\n    Maze.canWalk(gameData.maze, e.position, d)\n  );\n\n  const adjacent = options.filter(d => d !== Direction.inverse(e.heading));\n\n  let direction: Direction.Direction;\n\n  if (options.includes(e.heading) && Math.random() < 0.75) {\n    direction = e.heading;\n  } else if (Math.random() < 0.75 && adjacent.length > 0) {\n    direction = Arrays.randomItem(adjacent);\n  } else {\n    direction = options[0];\n  }\n\n  return [\n    Instruction.update({ ...e, heading: direction }),\n    Instruction.move(e.id, direction)\n  ];\n};\n\nexport const DISPLAY = \"🗿\";\n","import { BaseEntity } from \"..\";\nimport { Point, ID, Direction, Instruction, Maze, Maybe } from \"../..\";\nimport { GameData, EntityData } from \"../../game\";\nimport { Arrays } from \"../../../util\";\n\n/**\n * The wandering husk shambles aimlesslessy, until it lays its eyes on prey.\n * It pursues relentlessly that which it can see.\n */\n\nexport interface WanderingHusk extends BaseEntity.HostileEntity {\n  type: \"wandering-husk\";\n  heading: Direction.Direction;\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): WanderingHusk => ({\n  type: \"wandering-husk\",\n  position,\n  id: ID.create(),\n  heading: Direction.random(),\n  cls: BaseEntity.EntityClass.HOSTILE\n});\n\nexport const next = (\n  e: WanderingHusk,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const towardPlayer = Direction.all().reduce(\n    (heading: Maybe.Maybe<Direction.Direction>, d) =>\n      !heading\n        ? lookForPlayerInDirection(d, e.position, gameData)\n          ? d\n          : undefined\n        : heading,\n    undefined\n  );\n\n  const instructions = [];\n  let heading: Direction.Direction;\n  if (towardPlayer) {\n    if (Math.random() < 0.9) {\n      heading = towardPlayer;\n\n      instructions.push(Instruction.move(e.id, heading));\n    } else {\n      heading = e.heading;\n      instructions.push(Instruction.wait(e.id));\n    }\n  } else {\n    heading = wander(e, gameData);\n\n    instructions.push(Instruction.move(e.id, heading));\n  }\n\n  return [Instruction.update({ ...e, heading }), ...instructions];\n};\n\nexport const wander = (\n  e: WanderingHusk,\n  gameData: GameData.GameData\n): Direction.Direction => {\n  const options = Direction.all().filter(d =>\n    Maze.canWalk(gameData.maze, e.position, d)\n  );\n\n  const adjacent = options.filter(d => d !== Direction.inverse(e.heading));\n\n  let direction: Direction.Direction;\n\n  if (options.includes(e.heading) && Math.random() < 0.75) {\n    direction = e.heading;\n  } else if (Math.random() < 0.75 && adjacent.length > 0) {\n    direction = Arrays.randomItem(adjacent);\n  } else {\n    direction = options[0];\n  }\n  return direction;\n};\n\nexport const lookForPlayerInDirection = (\n  d: Direction.Direction,\n  origin: Point.Point,\n  gameData: GameData.GameData\n): boolean =>\n  Maze.lookInDirection(gameData.maze, d, origin, 5).reduce(\n    (foundPlayer: boolean, p) =>\n      !foundPlayer\n        ? EntityData.entitiesAtPoint(\n            gameData.entityData,\n            p,\n            gameData.maze.dimension\n          ).find(e => e.type === \"player\") != null\n        : foundPlayer,\n    false\n  );\n\nexport const DISPLAY = \"🧟\";\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\n\nexport interface Exit extends BaseEntity.BaseEntity {\n  type: \"exit\";\n  cls: BaseEntity.EntityClass.INANIMATE;\n}\n\nexport const create = (position: Point.Point): Exit => ({\n  position,\n  id: ID.create(),\n  type: \"exit\",\n  cls: BaseEntity.EntityClass.INANIMATE\n});\n\nexport const DISPLAY = \"🚪\";\n","import { BaseEntity } from \"..\";\nimport { Point, ID, Direction, Instruction, Maybe } from \"../..\";\nimport { GameData } from \"../../game\";\nimport { lookForEntityInDirection } from \"../../game/gameData\";\n\n/**\n * The sinister dolls wait for a playmate\n */\n\nexport interface SinisterDolls extends BaseEntity.HostileEntity {\n  type: \"sinister-dolls\";\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): SinisterDolls => ({\n  type: \"sinister-dolls\",\n  position,\n  id: ID.create(),\n  cls: BaseEntity.EntityClass.HOSTILE\n});\n\nexport const next = (\n  e: SinisterDolls,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const towardPlayer = Direction.all().reduce(\n    (towardPlayer: Maybe.Maybe<Direction.Direction>, d) =>\n      !towardPlayer\n        ? lookForEntityInDirection(\n            d,\n            e.position,\n            gameData,\n            e => e.type === \"player\"\n          )\n          ? d\n          : undefined\n        : towardPlayer,\n    undefined\n  );\n\n  return towardPlayer && Math.random() < 0.9\n    ? [Instruction.move(e.id, towardPlayer)]\n    : [];\n};\n\nexport const DISPLAY = \"🎎\";\n","import { Instruction, ID } from \".\";\n\nexport interface Step {\n  instructions: Instruction.Instruction[];\n  id: ID.ID;\n}\n\nexport const create = (...instructions: Instruction.Instruction[]): Step => ({\n  instructions,\n  id: ID.create()\n});\n","import { MazeData, Maze, Step, ID, Direction, Message } from \"./types\";\nimport { Entity } from \"./types/entities\";\nimport { GameData } from \"./types/game\";\n\nexport enum ActionTypes {\n  REQUEST_NEW_GAME = \"REQUEST_NEW_GAME\",\n  START_NEW_GAME = \"START_NEW_GAME\",\n\n  REQUEST_STEP = \"REQUEST_STEP\",\n  PROCESS_STEP = \"PROCESS_STEP\",\n  COMPLETE_STEP = \"COMPLETE_STEP\",\n  ABORT_STEP = \"ABORT_STEP\",\n\n  MOVE_PLAYER = \"MOVE_PLAYER\",\n\n  ADD_MESSAGE = \"ADD_MESSAGE\"\n}\n\ninterface NewGameOptions {\n  mazeOptions?: MazeData.Options;\n}\nexport interface RequestNewGame {\n  type: ActionTypes.REQUEST_NEW_GAME;\n  options: NewGameOptions;\n}\n\nexport interface StartNewGame {\n  type: ActionTypes.START_NEW_GAME;\n  maze: Maze.Maze;\n  entities: Entity.Entity[];\n}\n\nexport interface RequestStep {\n  type: ActionTypes.REQUEST_STEP;\n  step: Step.Step;\n}\n\nexport interface AbortStep {\n  type: ActionTypes.ABORT_STEP;\n  stepId: ID.ID;\n}\n\nexport interface ProcessStep {\n  type: ActionTypes.PROCESS_STEP;\n  stepId: ID.ID;\n  gameData: GameData.GameData;\n}\n\nexport interface CompleteStep {\n  type: ActionTypes.COMPLETE_STEP;\n  stepId: ID.ID;\n}\n\nexport interface MovePlayer {\n  type: ActionTypes.MOVE_PLAYER;\n  direction?: Direction.Direction;\n}\n\nexport interface AddMessage {\n  type: ActionTypes.ADD_MESSAGE;\n  message: Message.Message;\n}\n\nexport type AppAction =\n  | RequestNewGame\n  | StartNewGame\n  | RequestStep\n  | AbortStep\n  | CompleteStep\n  | ProcessStep\n  | MovePlayer\n  | AddMessage;\n\nexport const requestNewGame = (\n  options: NewGameOptions = {}\n): RequestNewGame => ({ type: ActionTypes.REQUEST_NEW_GAME, options });\n\nexport const startNewGame = (\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): StartNewGame => ({\n  type: ActionTypes.START_NEW_GAME,\n  maze,\n  entities\n});\n\nexport const requestStep = (step: Step.Step): RequestStep => ({\n  type: ActionTypes.REQUEST_STEP,\n  step\n});\n\nexport const abortStep = (stepId: ID.ID): AbortStep => ({\n  type: ActionTypes.ABORT_STEP,\n  stepId\n});\n\nexport const processStep = (\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): ProcessStep => ({\n  type: ActionTypes.PROCESS_STEP,\n  stepId,\n  gameData\n});\n\nexport const completeStep = (stepId: ID.ID): CompleteStep => ({\n  type: ActionTypes.COMPLETE_STEP,\n  stepId\n});\n\nexport const movePlayer = (direction?: Direction.Direction): MovePlayer => ({\n  type: ActionTypes.MOVE_PLAYER,\n  direction\n});\n\nexport const addMessage = (message: Message.Message): AddMessage => ({\n  type: ActionTypes.ADD_MESSAGE,\n  message\n});\n","export interface Err {\n  type: \"Error\";\n  msg: string;\n}\n\nexport interface Ok<T> {\n  type: \"Ok\";\n  data: T;\n}\n\nexport type Result<T> = Ok<T> | Err;\n\nexport const ok = <T>(data: T): Ok<T> => ({ type: \"Ok\", data });\n\nexport const err = (msg: string): Err => ({ type: \"Error\", msg });\n\nexport const isErr = <T>(r: Result<T>): r is Err => r.type === \"Error\";\n\nexport const isOk = <T>(r: Result<T>): r is Ok<T> => r.type === \"Ok\";\n\nexport const map = <T, R>(f: (t: T) => R, r: Result<T>): Result<R> =>\n  isOk(r) ? ok(f(r.data)) : r;\n","export type Maybe<T> = T | undefined | null;\n\nexport const of = <T>(value: T | undefined | null): Maybe<T> => value;\nexport const none = <T>(): Maybe<T> => undefined;\n\ntype Supplier<T> = () => T;\n\nexport const withDefault = <T>(maybe: Maybe<T>, default_: T | Supplier<T>): T =>\n  maybe != null\n    ? maybe\n    : typeof default_ === \"function\"\n    ? (default_ as Supplier<T>)()\n    : default_;\n\nexport const map = <T, R>(f: (t: T) => R, maybe: Maybe<T>): Maybe<R> =>\n  maybe != null ? f(maybe) : undefined;\n\nexport const ifPresent = <T>(f: (t: T) => void, maybe: Maybe<T>): void => {\n  if (maybe) {\n    f(maybe);\n  }\n};\n","import { Instruction, Phenomenon } from \".\";\n\nexport interface Outcome {\n  instructions: Instruction.Instruction[];\n  phenomena: Phenomenon.Phenomenon[];\n}\n\nexport const create = (\n  instructions: Instruction.Instruction[] = [],\n  phenomena: Phenomenon.Phenomenon[] = []\n) => ({\n  instructions,\n  phenomena\n});\n\nexport const instructions = (outcomes: Outcome[]): Instruction.Instruction[] =>\n  outcomes.reduce(\n    (i: Instruction.Instruction[], o) => [...i, ...o.instructions],\n    []\n  );\n\nexport const phenomena = (outcomes: Outcome[]): Phenomenon.Phenomenon[] =>\n  outcomes.reduce(\n    (p: Phenomenon.Phenomenon[], o) => [...p, ...o.phenomena],\n    []\n  );\n","export interface Message {\n  message: string;\n  speaker?: string;\n}\n\nexport const create = (message: string, speaker?: string): Message => ({\n  message,\n  speaker\n});\n","import { State } from \"./state\";\nimport { createSelector } from \"reselect\";\nimport { Loadable, Maybe } from \"./types\";\nimport { GameData } from \"./types/game\";\nimport { Camera } from \"./util\";\n\nexport const getState = (state: State): State => state;\n\nexport const getGame = createSelector(getState, state => state.game);\n\nexport const getDisplayGrid = createSelector(getGame, game =>\n  Loadable.map(GameData.displayGrid, game)\n);\n\nexport const getIsProcessingStep = createSelector(\n  getState,\n  state => state.stepId != null\n);\n\nexport const getPlayer = createSelector(getGame, game =>\n  Loadable.isLoaded(game)\n    ? Maybe.map(\n        id => game.data.entityData.entityMap[id],\n        game.data.entityData.playerEntityId\n      )\n    : undefined\n);\n\nexport const getWindowedDisplayGrid = createSelector(\n  getDisplayGrid,\n  getPlayer,\n  (displayGrid, player) =>\n    Loadable.map(\n      grid =>\n        player != null ? Camera.centerOnPoint(grid, player.position, 3) : [],\n      displayGrid\n    )\n);\n\nexport const getMessages = createSelector(\n  getState,\n  state => state.chat.messages\n);\n","import React from \"react\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport styles from \"./Entity.css\";\n\nexport const Entity = (entity: EntityT.Entity): JSX.Element => (\n  <div className={styles.root}>{EntityT.getDisplayName(entity)}</div>\n);\n","import React from \"react\";\nimport { Cell as CellT, Maybe } from \"../types\";\nimport styles from \"./Cell.css\";\nimport classNames from \"classnames\";\nimport { CellMeta } from \"../types/game/gameData\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport { Entity } from \"./Entity\";\n\ninterface Props {\n  cell: CellT.Cell;\n  meta: CellMeta;\n}\n\nconst IS_WALL = \"0.5px solid cyan\";\nconst IS_OPEN = \"0.5px transparent\";\nconst drawSide = (wall: boolean) => (wall ? IS_WALL : IS_OPEN);\n\nconst getEntityToDraw = ({\n  visible,\n  seen,\n  occupants\n}: CellMeta): Maybe.Maybe<EntityT.Entity> => {\n  if (visible) {\n    return Maybe.withDefault(\n      occupants.find(e => e.type !== \"player\" && e.type !== \"exit\"),\n      occupants[0]\n    );\n  } else if (seen) {\n    return occupants.find(e => e.type === \"exit\");\n  }\n};\n\nexport const Cell = ({ cell, meta }: Props): JSX.Element => {\n  const { walls } = cell;\n  return (\n    <div\n      className={classNames(styles.root, {\n        [styles.seen]: meta.seen,\n        [styles.visible]: meta.visible,\n        [styles.unknown]: !meta.seen && !meta.visible\n      })}\n      style={\n        !meta.unknown\n          ? {\n              borderTop: drawSide(walls.n),\n              borderRight: drawSide(walls.e),\n              borderBottom: drawSide(walls.s),\n              borderLeft: drawSide(walls.w)\n            }\n          : undefined\n      }\n    >\n      {Maybe.map(\n        o => (\n          <Entity {...o} />\n        ),\n        getEntityToDraw(meta)\n      )}\n    </div>\n  );\n};\n\nexport const EmptyCell = () => (\n  <div className={classNames(styles.empty, styles.root)}></div>\n);\n","import React from \"react\";\nimport { Cell, EmptyCell } from \"./Cell\";\nimport styles from \"./Grid.css\";\nimport { Camera } from \"../util\";\nimport { Maybe } from \"../types\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n  largeScreen: boolean;\n}\n\nexport const Grid = ({ grid, largeScreen }: Props): JSX.Element => {\n  return (\n    <div\n      className={classNames(styles.root, {\n        [styles.large]: largeScreen\n      })}\n    >\n      {grid.map((row, idx) => (\n        <div key={idx} className={styles.row}>\n          {row.map((maybeCell, idx) =>\n            Maybe.withDefault(\n              Maybe.map(\n                cell => <Cell key={idx} cell={cell.cell} meta={cell.meta} />,\n                maybeCell\n              ),\n              <EmptyCell key={idx} />\n            )\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Effect, Direction } from \"../types\";\nimport styles from \"./GamePad.css\";\nimport classNames from \"classnames\";\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = DispatchProps;\n\nexport const GamePad = ({ onMove }: Props): JSX.Element => (\n  <div className={styles.root}>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <div className={styles.block}>\n        <button\n          className={styles.button}\n          onClick={() => onMove(Direction.Direction.NORTH)}\n        ></button>\n      </div>\n      <div className={styles.block}></div>\n    </div>\n    <div className={styles.row}>\n      <div className={styles.block}>\n        <button\n          className={styles.button}\n          onClick={() => onMove(Direction.Direction.WEST)}\n        />\n      </div>\n      <div className={styles.block}>\n        <button\n          className={classNames(styles.button, styles.wait)}\n          onClick={() => onMove(undefined)}\n        />\n      </div>\n      <div className={styles.block}>\n        <button\n          className={styles.button}\n          onClick={() => onMove(Direction.Direction.EAST)}\n        ></button>\n      </div>\n    </div>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <div className={styles.block}>\n        <button\n          className={styles.button}\n          onClick={() => onMove(Direction.Direction.SOUTH)}\n        ></button>\n      </div>\n      <div className={styles.block}></div>\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { Effect, Direction } from \"../types\";\n\ninterface Props {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  disabled: boolean;\n}\n\nexport class KeyPad extends React.PureComponent<Props> {\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    return <></>;\n  }\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    if (!this.props.disabled) {\n      if (event.key === \"ArrowUp\" || event.key === \"w\") {\n        this.props.onMove(Direction.Direction.NORTH);\n      } else if (event.key === \"ArrowRight\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.EAST);\n      } else if (event.key === \"ArrowDown\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.SOUTH);\n      } else if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n        this.props.onMove(Direction.Direction.WEST);\n      } else if (event.key === \" \" || event.key === \"Enter\") {\n        this.props.onMove(undefined);\n      }\n    }\n  };\n}\n","import React from \"react\";\nimport styles from \"./Chat.css\";\nimport { Message } from \"../types\";\n\ninterface Props {\n  messages: Message.Message[];\n}\n\nexport const Chat = ({ messages }: Props): JSX.Element => (\n  <div className={styles.root}>\n    {messages.map(m => (\n      <div>{m.message}</div>\n    ))}\n  </div>\n);\n","import * as React from \"react\";\nimport { Grid } from \"./Grid\";\nimport { GamePad } from \"./GamePad\";\nimport { Effect, Direction, Message } from \"../types\";\nimport { KeyPad } from \"./KeyPad\";\nimport { Camera } from \"../util\";\nimport MediaQuery from \"react-responsive\";\nimport { Chat } from \"./Chat\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  processingUpdates: boolean;\n  messages: Message.Message[];\n}\n\nexport const Game = ({\n  grid,\n  onMove,\n  processingUpdates,\n  messages\n}: Props): JSX.Element => (\n  <MediaQuery minWidth={1024}>\n    {largeScreen => (\n      <>\n        <Chat messages={messages} />\n        <Grid grid={grid} largeScreen={largeScreen} />\n        {!largeScreen && <GamePad onMove={onMove} />}\n        <KeyPad onMove={onMove} disabled={processingUpdates} />\n      </>\n    )}\n  </MediaQuery>\n);\n","import React from \"react\";\nimport { GameData, EntityData } from \"../types/game\";\nimport { LocalStorage, Uri } from \"../util\";\nimport { State } from \"../state\";\nimport { getGame } from \"../selectors\";\nimport { Loadable, Maybe } from \"../types\";\nimport { connect } from \"react-redux\";\n\nconst DEV =\n  LocalStorage.getSiteSetting(\"devmode\", () => {\n    const queryParam = Uri.parseQuery()[\"devmode\"];\n    return !!queryParam && queryParam !== \"false\" ? \"true\" : undefined;\n  }) === \"true\";\n\nlet VERSION: Maybe.Maybe<string>;\n\nfetch(\n  `${window.location.href.substring(\n    0,\n    window.location.href.indexOf(\"?\")\n  )}/VERSION`\n).then(d => d.text().then(version => (VERSION = version)));\n\ninterface Props {\n  gameData: Loadable.Loadable<GameData.GameData>;\n}\n\nconst getEntityCountData = (entityData: EntityData.EntityData): string =>\n  \"\\n\\t\" +\n  Object.keys(entityData.typeMap)\n    .map(type_ => `${type_}: ${entityData.typeMap[type_].length}`)\n    .join(\"\\n\\t\");\n\nconst gameInfo = (gameData: GameData.GameData): string =>\n  [\n    `maze algorithm:: ${gameData.maze.algorithm}`,\n    `maze dimensions:: ${gameData.maze.dimension.width} x ${gameData.maze.dimension.height}`,\n    `entityCount:: ${getEntityCountData(gameData.entityData)}`,\n    `step:: ${gameData.stepCount}`,\n    `version:: ${VERSION}`\n  ].join(\"\\n\");\n\nexport const InfoButton = ({ gameData }: Props): JSX.Element =>\n  DEV && Loadable.isLoaded(gameData) ? (\n    <button\n      onFocus={e => e.preventDefault()}\n      style={{ position: \"absolute\", top: 5, left: 5 }}\n      onClick={() => {\n        window.alert(gameInfo(gameData.data));\n        Maybe.ifPresent(\n          (el: HTMLElement) => el.blur(),\n          document.activeElement as HTMLElement\n        );\n      }}\n    >\n      ?\n    </button>\n  ) : (\n    <></>\n  );\n\nconst mapStateToProps = (state: State): Props => ({\n  gameData: getGame(state)\n});\n\nexport default connect(mapStateToProps)(InfoButton);\n","import React, { Dispatch } from \"react\";\nimport styles from \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../state\";\nimport { Loadable, Effect, Direction, Message } from \"../types\";\nimport {\n  getIsProcessingStep,\n  getWindowedDisplayGrid,\n  getMessages\n} from \"../selectors\";\nimport { Game } from \"./Game\";\nimport { AppAction, movePlayer } from \"../actions\";\nimport { WindowedGrid } from \"../util/camera\";\nimport InfoButton from \"./InfoButton\";\n\ninterface StateProps {\n  grid: Loadable.Loadable<WindowedGrid>;\n  processingUpdates: boolean;\n  messages: Message.Message[];\n}\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst App = ({ grid, processingUpdates, messages, onMove }: Props) => {\n  return (\n    <div className={styles.root}>\n      {Loadable.isLoading(grid) && <span>Loading . . . </span>}\n      {Loadable.isLoaded(grid) && grid.data && (\n        <>\n          <InfoButton />\n          <Game\n            processingUpdates={processingUpdates}\n            grid={grid.data}\n            onMove={onMove}\n            messages={messages}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  grid: getWindowedDisplayGrid(state),\n  processingUpdates: getIsProcessingStep(state),\n  messages: getMessages(state)\n});\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<AppAction>\n): DispatchProps => ({\n  onMove: d => dispatch(movePlayer(d))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Maze, ID, Message } from \"./types\";\nimport { Loadable } from \"./types\";\nimport { GameData, EntityData } from \"./types/game\";\nimport { Entity } from \"./types/entities\";\n\nexport interface State {\n  game: Loadable.Loadable<GameData.GameData>;\n  chat: Chat;\n  stepId?: ID.ID;\n}\n\ninterface Chat {\n  messages: Message.Message[];\n  roundsSince: number;\n}\n\nexport const create = (init = {}): State => ({\n  game: Loadable.loading(),\n  chat: { messages: [], roundsSince: 0 },\n  ...init\n});\n\nexport const requestingNewGame = (state: State): State => ({\n  ...state,\n  game: Loadable.loading()\n});\n\nexport const newGame = (\n  state: State,\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): State => ({\n  ...state,\n  game: Loadable.loaded(\n    GameData.create(maze, EntityData.fromEntities(entities, maze.dimension))\n  )\n});\n\nexport const ifGameIsLoaded = (f: () => State, state: State): State =>\n  Loadable.isLoaded(state.game) ? f() : state;\n\nexport const requestStep = (state: State, stepId: ID.ID): State => ({\n  ...state,\n  stepId\n});\n\nexport const processStep = (\n  state: State,\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            game: Loadable.loaded(gameData)\n          }\n        : state,\n    state\n  );\n\nexport const completeStep = (state: State, stepId: ID.ID): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            stepId: undefined,\n            game: Loadable.map(\n              g => ({ ...g, stepCount: g.stepCount + 1 }),\n              state.game\n            ),\n            chat: {\n              ...state.chat,\n              messages: [Message.create(\"\"), ...state.chat.messages].slice(\n                0,\n                5\n              ),\n              roundsSince: state.chat.roundsSince += 1\n            }\n          }\n        : state,\n    state\n  );\n\nexport const abortStep = (state: State, stepId: ID.ID): State =>\n  state.stepId === stepId ? { ...state, stepId: undefined } : state;\n\nexport const addMessage = (state: State, message: Message.Message): State => ({\n  ...state,\n  chat: {\n    messages: [message, ...state.chat.messages].slice(0, 5),\n    roundsSince: 0\n  }\n});\n","import * as State from \"./state\";\nimport { AppAction, ActionTypes } from \"./actions\";\n\nexport const reducer = (\n  state: State.State = State.create(),\n  action: AppAction\n): State.State => {\n  switch (action.type) {\n    case ActionTypes.REQUEST_STEP:\n      return State.requestStep(state, action.step.id);\n    case ActionTypes.COMPLETE_STEP:\n      return State.completeStep(state, action.stepId);\n    case ActionTypes.ABORT_STEP:\n      return State.abortStep(state, action.stepId);\n    case ActionTypes.PROCESS_STEP:\n      return State.processStep(state, action.stepId, action.gameData);\n    case ActionTypes.START_NEW_GAME:\n      return State.newGame(state, action.maze, action.entities);\n    case ActionTypes.REQUEST_NEW_GAME:\n      return State.requestingNewGame(state);\n    case ActionTypes.ADD_MESSAGE:\n      return State.addMessage(state, action.message);\n    default:\n      return state;\n  }\n};\n","import {\n  RequestStep,\n  abortStep,\n  completeStep,\n  ActionTypes,\n  processStep\n} from \"../actions\";\nimport { Loadable, Instruction, Result, Outcome, Phenomenon } from \"../types\";\nimport { GameData, EntityData, GameState } from \"../types/game\";\nimport { select, put, take, call } from \"redux-saga/effects\";\nimport { getGame } from \"../selectors\";\nimport { Entity } from \"../types/entities\";\n\nexport function* stepEngine() {\n  let activePhenomena: Phenomenon.Phenomenon[] = [];\n  while (true) {\n    try {\n      const { step }: RequestStep = yield take(ActionTypes.REQUEST_STEP);\n\n      const game: Loadable.Loadable<GameData.GameData> = yield select(getGame);\n\n      if (Loadable.isLoaded(game)) {\n        const { data: gameData } = game;\n\n        const stepValidation: Result.Result<void> = yield call(\n          Instruction.validateAll,\n          step.instructions,\n          gameData\n        );\n\n        if (Result.isErr(stepValidation)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        const aiInstructions = GameData.generateAllAIInstructions(gameData);\n        const instructions = [...aiInstructions, ...step.instructions];\n\n        const afterMovement: Result.Result<GameData.GameData> = yield call(\n          Instruction.applyAll,\n          instructions,\n          gameData\n        );\n\n        if (Result.isErr(afterMovement)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        const collisionOutcomes: Outcome.Outcome[] = yield call(\n          processCollisions,\n          gameData,\n          afterMovement.data\n        );\n\n        const afterCollisions: Result.Result<GameData.GameData> = yield call(\n          Instruction.applyAll,\n          collisionOutcomes.reduce(\n            (i: Instruction.Instruction[], o) => [...i, ...o.instructions],\n            []\n          ),\n          afterMovement.data\n        );\n\n        if (Result.isErr(afterCollisions)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        activePhenomena = activePhenomena.concat(\n          Outcome.phenomena(collisionOutcomes)\n        );\n\n        const phenomenalInstructions = yield call(\n          applyPhenomena,\n          activePhenomena,\n          gameData\n        );\n\n        const afterPhenomena: Result.Result<GameData.GameData> = yield call(\n          Instruction.applyAll,\n          phenomenalInstructions,\n          afterCollisions.data\n        );\n\n        if (Result.isErr(afterPhenomena)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n        activePhenomena = yield call(prunePhenomena, activePhenomena);\n\n        yield put(processStep(step.id, afterPhenomena.data));\n        yield call(checkGameState, afterPhenomena.data);\n        yield put(completeStep(step.id));\n      }\n    } catch (e) {\n      console.warn(\"Error processing step\");\n      console.error(e);\n    }\n  }\n}\n\nexport const processCollisions = (\n  last: GameData.GameData,\n  next: GameData.GameData\n) => {\n  const player = EntityData.getPlayer(next.entityData)!;\n  const collisions = EntityData.entitiesAtPoint(\n    next.entityData,\n    player.position,\n    next.maze.dimension\n  )\n    .filter(e => e.id !== player.id)\n    .concat(\n      EntityData.neighborsCrossedByEntity(\n        last.entityData,\n        next.entityData,\n        player.id,\n        next.maze.dimension\n      )\n    );\n\n  return collisions.map(e => Entity.onCollideWithPlayer(e, next));\n};\n\nexport function* applyPhenomena(\n  activePhenomena: Phenomenon.Phenomenon[],\n  gameData: GameData.GameData\n) {\n  let instructions: Instruction.Instruction[] = [];\n  for (const p of activePhenomena) {\n    const generatedInstructions = yield call(p.fn, gameData);\n    instructions = instructions.concat(generatedInstructions);\n  }\n  return instructions;\n}\n\nexport function* checkGameState({ state, entityData }: GameData.GameData) {\n  const player = EntityData.getPlayer(entityData);\n  if (GameState.lost(state)) {\n    yield call(\n      window.confirm,\n      Entity.getKillMessage(\n        EntityData.getPlayer(entityData),\n        EntityData.byId(entityData, state.causeOfDeath.entityId)\n      )\n    );\n    window.location.reload();\n  } else if (GameState.won(state)) {\n    yield call(window.confirm, `${player.name} escaped. . . this time.`);\n    window.location.reload();\n  }\n}\n\nexport const prunePhenomena = (\n  activePhenomena: Phenomenon.Phenomenon[]\n): Phenomenon.Phenomenon[] => {\n  return activePhenomena\n    .map(p => ({\n      ...p,\n      duration: p.duration !== \"FOREVER\" ? p.duration - 1 : p.duration\n    }))\n    .filter(a => a.duration === \"FOREVER\" || a.duration > 0);\n};\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport { ActionTypes, MovePlayer, requestStep } from \"../actions\";\nimport { Player } from \"../types/entities\";\nimport { getPlayer, getIsProcessingStep } from \"../selectors\";\nimport { Step, Instruction } from \"../types\";\n\nexport function* movePlayer() {\n  yield takeEvery(ActionTypes.MOVE_PLAYER, function*(action: MovePlayer) {\n    const player = (yield select(getPlayer)) as Player.Player;\n    const isProcessing = (yield select(getIsProcessingStep)) as boolean;\n\n    if (!isProcessing && !!player) {\n      yield put(\n        requestStep(\n          Step.create(\n            action.direction\n              ? Instruction.move(player.id, action.direction)\n              : Instruction.wait(player.id)\n          )\n        )\n      );\n    }\n  });\n}\n","import {\n  RequestNewGame,\n  ActionTypes,\n  startNewGame,\n  requestNewGame,\n  addMessage\n} from \"../actions\";\nimport { Maze, Dimension, MazeData, Maybe, Message } from \"../types\";\nimport { call, take, put } from \"redux-saga/effects\";\nimport { Api, Numbers, Arrays } from \"../util\";\nimport {\n  Player,\n  BlindGuardian,\n  Entity,\n  Exit,\n  WanderingHusk,\n  SinisterDolls\n} from \"../types/entities\";\nimport { OrbOfKnowing } from \"../types/entities/items\";\n\nconst name = Maybe.withDefault(Maybe.of(localStorage.getItem(\"name\")), () => {\n  let n = window.prompt(\"What is your name?\") || \"\";\n  if (n !== \"\") {\n    localStorage.setItem(\"name\", n);\n  }\n  return n !== \"\" ? n : \"?\";\n});\n\nexport function* firstGame() {\n  yield put(\n    requestNewGame({\n      mazeOptions: {\n        dimension: Arrays.randomItem([\n          Dimension.create(10, 10),\n          Dimension.create(15, 15),\n          Dimension.create(15, 15),\n          Dimension.create(15, 15),\n          Dimension.create(15, 15),\n          Dimension.create(20, 20),\n          Dimension.create(25, 10),\n          Dimension.create(10, 25),\n          Dimension.create(20, 15),\n          Dimension.create(15, 20),\n          Dimension.create(30, 5),\n          Dimension.create(5, 30)\n        ]),\n        algorithm: Arrays.randomItem([\n          \"aldous-broder\",\n          \"aldous-broder\",\n          \"aldous-broder\",\n          \"binary-tree\",\n          \"side-winder\"\n        ]),\n        ...MazeData.randomDirectionalOptions()\n      }\n    })\n  );\n}\n\nexport function* newGame() {\n  while (true) {\n    try {\n      const { options }: RequestNewGame = yield take(\n        ActionTypes.REQUEST_NEW_GAME\n      );\n      const data: MazeData.MazeData = yield call(\n        Api.maze,\n        options.mazeOptions || {}\n      );\n      const fromData: Maze.Maze = Maze.fromMazeData(data);\n      const [maze, entities] = startingEntities(fromData);\n      yield put(startNewGame(maze, entities));\n      yield put(addMessage(Message.create(\"The game is afoot.\")));\n    } catch (e) {\n      console.warn(\"Error initializing new game\");\n      console.error(e);\n    }\n  }\n}\n\nexport const startingEntities = (\n  prePlacement: Maze.Maze\n): [Maze.Maze, Entity.Entity[]] => {\n  const { dimension } = prePlacement;\n\n  const player = Player.create(name, Dimension.pointAlongEdge(dimension));\n  const guardians = new Array(Numbers.randomInRange(1, 5))\n    .fill(undefined)\n    .map(_ => BlindGuardian.create(Dimension.randomPoint(dimension)));\n  const husks = new Array(Arrays.randomItem([1, 1, 2, 2, 3]))\n    .fill(undefined)\n    .map(_ => WanderingHusk.create(Dimension.randomPoint(dimension)));\n\n  const enemies = [...guardians, ...husks];\n\n  const { placed, maze, unplaced } = Maze.placeEntitiesInDeadEnds(\n    prePlacement,\n    [Exit.create, OrbOfKnowing.create, SinisterDolls.create]\n  );\n\n  if (unplaced.length > 0) {\n    console.log(\n      `Ran out of deadends to place these entities ${unplaced\n        .map(u => u.type)\n        .join(\", \")}`\n    );\n  }\n\n  const entities = [player, ...enemies, ...placed];\n\n  return [maze, entities];\n};\n","import { spawn, all } from \"redux-saga/effects\";\nimport { stepEngine } from \"./sagas/stepEngine\";\nimport { movePlayer } from \"./sagas/movePlayer\";\nimport { newGame, firstGame } from \"./sagas/newGame\";\n\nconst sagas = [firstGame, newGame, stepEngine, movePlayer];\n\nexport function* root() {\n  yield all(sagas.map(s => spawn(s)));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from \"./index.css\";\nimport App from \"./app/views/App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <div className={styles.app}>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as Saga from \"./saga\";\nimport { State } from \"./state\";\nimport { AppAction } from \"./actions\";\n\nexport const configureStore = (): Store<State, AppAction> => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(Saga.root);\n\n  return store;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GamePad_root__Lay6t\",\"row\":\"GamePad_row__164Sm\",\"block\":\"GamePad_block__l2_xd\",\"button\":\"GamePad_button__3kDFo\",\"wait\":\"GamePad_wait__5DVYu\"};"],"sourceRoot":""}