{"version":3,"sources":["app/views/Cell.css","app/views/Grid.css","index.css","app/views/App.css","app/views/Entity.css","app/types/entities/baseEntity.ts","app/util/api.ts","app/util/arrays.ts","app/util/numbers.ts","app/util/camera.ts","app/util/localStorage.ts","app/util/uri.ts","app/types/dimension.ts","app/types/mazeData.ts","app/types/cell.ts","app/types/maze.ts","app/types/loadable.ts","app/types/id.ts","app/types/entities/player.ts","app/types/entities/entity.ts","app/types/instructions/baseInstruction.ts","app/types/entities/blindGuardian.ts","app/types/game/entityData.ts","app/types/game/gameData.ts","app/types/entities/wanderingHusk.ts","app/types/entities/exit.ts","app/types/point.ts","app/types/step.ts","app/types/instructions/move.ts","app/types/direction.ts","app/types/instructions/update.ts","app/types/instructions/wait.ts","app/types/instructions/instruction.ts","app/actions.ts","app/types/result.ts","app/types/maybe.ts","app/selectors.ts","app/views/Entity.tsx","app/views/Cell.tsx","app/views/Grid.tsx","app/views/GamePad.tsx","app/views/KeyPad.tsx","app/views/Game.tsx","app/views/InfoButton.tsx","app/views/App.tsx","app/state.ts","app/reducer.ts","app/sagas/stepEngine.ts","app/sagas/movePlayer.ts","app/sagas/newGame.ts","app/saga.ts","index.tsx","app/store.ts","app/views/GamePad.css"],"names":["module","exports","EntityClass","API_ROOT","maze","dimension","Dimension","create","algorithm","request","fetch","method","mode","headers","body","JSON","stringify","dimensions","then","response","text","base64","MazeData","fromApi","nOf","n","t","Array","fill","sorted","unsorted","sortFn","sort","nonNull","array","filter","randomItem","Math","floor","random","length","randomInRange","start","end","centerOnPoint","grid","point","radius","xMin","x","xMax","yMin","y","yMax","windowedGrid","row","push","Maybe","map","getSiteSetting","key","supplier","withDefault","window","localStorage","getItem","supplied","setItem","parseQuery","location","search","substring","split","reduce","queryMap","pair","parts","width","height","area","d","randomPoint","Point","fromIndex","pointAlongEdge","northOrSouth","Numbers","inBounds","p","bytes","Uint8Array","from","atob","c","charCodeAt","fromByte","byte","walls","s","e","w","fromMazeData","r","Cell","canWalk","direction","Direction","NORTH","EAST","SOUTH","WEST","canTravel","directions","last","neighbor","undefined","lookInDirection","visionRadius","peekableCorners","corners","seenFromPoint","origin","all","concat","isLoading","l","state","isLoaded","isErrored","loading","loaded","data","errored","f","v4","name","position","displayName","randomDisplayName","id","ID","type","cls","BaseEntity","PLAYER","Arrays","InstructionType","getColor","getDisplayName","BlindGuardian","DISPLAY","Exit","WanderingHusk","getDescription","generateAiInstructions","gameData","next","getKillMessage","killer","heading","HOSTILE","options","Maze","adjacent","inverse","includes","Instruction","update","move","fromEntities","entities","entityMap","m","positionMap","idx","toIndex","playerEntityId","find","typeMap","entitiesAtPoint","getPlayer","moveEntity","entity","oldIdx","newIdx","newEntity","eId","updateEntity","updated","entitiesCrossed","a","b","lastA","lastB","nextA","nextB","equals","neighborsCrossedByEntity","neighbors","entityData","player","EntityData","sees","Set","seen","stepCount","displayGrid","rows","rowIdx","cells","cell","cellIdx","isSeen","has","isVisible","meta","occupants","visible","unknown","generateAllAIInstructions","Object","keys","k","i","Entity","towardPlayer","lookForPlayerInDirection","instructions","wait","wander","foundPlayer","INANIMATE","diagonalNeighbors","entityId","MOVE","payload","updatePlayerVision","prev","UPDATE","WAIT","validate","instruction","Result","ok","err","Move","validateAll","validated","isOk","apply","Update","_","Wait","console","warn","error","applyAll","applied","ActionTypes","msg","isErr","of","value","none","maybe","default_","ifPresent","getState","getGame","createSelector","game","getDisplayGrid","Loadable","GameData","getIsProcessingStep","stepId","getWindowedDisplayGrid","Camera","className","styles","root","EntityT","drawSide","wall","classNames","style","borderTop","borderRight","borderBottom","borderLeft","o","getEntityToDraw","EmptyCell","empty","Grid","maybeCell","GamePad","onMove","block","button","onClick","KeyPad","handleKeyDown","event","props","disabled","addEventListener","this","removeEventListener","React","Game","processingUpdates","requestNewGame","REQUEST_NEW_GAME","startNewGame","START_NEW_GAME","abortStep","ABORT_STEP","processStep","PROCESS_STEP","DEV","LocalStorage","queryParam","Uri","connect","onFocus","preventDefault","top","left","alert","type_","join","gameInfo","el","blur","document","activeElement","dispatch","MOVE_PLAYER","init","requestingNewGame","newGame","ifGameIsLoaded","requestStep","completeStep","g","reducer","State","action","REQUEST_STEP","step","COMPLETE_STEP","stepEngine","processCollisions","take","select","call","stepValidation","put","aiInstructions","collisions","hostile","confirm","reload","movePlayer","takeEvery","Step","firstGame","prompt","mazeOptions","Api","startingEntities","Player","exit","guardians","husks","enemies","sagas","spawn","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","Saga","configureStore","app","getElementById"],"mappings":"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","file":"static/js/main.69d421f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__2ti8K\",\"empty\":\"Cell_empty__1ByI9\",\"seen\":\"Cell_seen__2qSTX\",\"visible\":\"Cell_visible__2bnT3\",\"unknown\":\"Cell_unknown__2tYkG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__xSU_B\",\"row\":\"Grid_row__1rWaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"index_app__2lpzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ZxxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Entity_root__MaGTf\"};","import { ID, Point } from \"..\";\n\nexport enum EntityClass {\n  PLAYER = \"PLAYER\",\n  INANIMATE = \"INANIMATE\",\n  HOSTILE = \"HOSTILE\"\n}\n\nexport interface BaseEntity {\n  position: Point.Point;\n  id: ID.ID;\n  type: string;\n  cls: EntityClass;\n}\n","import { Dimension, MazeData } from \"../types\";\n\nconst API_ROOT = \"https://fv9o21r19a.execute-api.us-east-1.amazonaws.com/dev\";\n\nexport const maze = ({\n  dimension = Dimension.create(10, 10),\n  algorithm = \"aldous-broder\"\n}: MazeData.Options = {}): Promise<MazeData.MazeData> => {\n  const request = fetch(`${API_ROOT}`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({ dimensions: dimension, algorithm })\n  });\n  return request\n    .then(response => response.text())\n    .then(base64 => MazeData.fromApi(dimension, algorithm, base64));\n};\n","import { Maybe } from \"../types\";\n\nexport const nOf = <T>(n: number, t: T): Array<T> => new Array(n).fill(t);\n\nexport const sorted = <T>(\n  unsorted: Array<T>,\n  sortFn?: (a: T, b: T) => number\n): Array<T> => {\n  const sorted = [...unsorted];\n  sorted.sort(sortFn);\n  return sorted;\n};\n\nexport const nonNull = <T>(array: Array<Maybe.Maybe<T>>): Array<T> =>\n  array.filter(t => t != null) as Array<T>;\n\nexport const randomItem = <T>(array: Array<T>): T =>\n  array[Math.floor(Math.random() * array.length)];\n","export const randomInRange = (start: number, end: number) => {\n  return start + Math.floor(Math.random() * (end - start - 1));\n};\n","import { DisplayGrid, CellAndMeta } from \"../types/game/gameData\";\nimport { Point, Maybe } from \"../types\";\n\nexport type WindowedGrid = Array<Array<Maybe.Maybe<CellAndMeta>>>;\n\nexport const centerOnPoint = (\n  grid: DisplayGrid,\n  point: Point.Point,\n  radius: number\n): WindowedGrid => {\n  const xMin = point.x - radius;\n  const xMax = point.x + radius + 1;\n  const yMin = point.y - radius;\n  const yMax = point.y + radius + 1;\n\n  const windowedGrid: WindowedGrid = [];\n\n  for (let y = yMin; y < yMax; y++) {\n    const row = [];\n    for (let x = xMin; x < xMax; x++) {\n      row.push(Maybe.map(row => row[x], grid[y]));\n    }\n    windowedGrid.push(row);\n  }\n\n  return windowedGrid;\n};\n","import { Maybe } from \"../types\";\n\nconst PREFIX = \"followed.settings\";\n\nexport const getSiteSetting = (\n  key: string,\n  supplier: () => Maybe.Maybe<string>\n): Maybe.Maybe<string> => {\n  return Maybe.withDefault(\n    window.localStorage.getItem(`${PREFIX}.${key}`),\n    () => {\n      const supplied = supplier();\n\n      if (supplied) {\n        window.localStorage.setItem(`${PREFIX}.${key}`, supplied);\n        return supplied;\n      }\n    }\n  );\n};\n","import { Maybe } from \"../types\";\n\nexport const parseQuery = (): Record<string, Maybe.Maybe<string>> =>\n  window.location.search\n    .substring(1)\n    .split(\"&\")\n    .reduce((queryMap: Record<string, string>, pair: string) => {\n      const parts = pair.split(\"=\");\n      return { ...queryMap, [parts[0]]: parts[1] };\n    }, {});\n","import { Point } from \".\";\nimport { Numbers } from \"../util\";\n\nexport interface Dimension {\n  width: number;\n  height: number;\n}\n\nexport const create = (width: number = 0, height: number = 0): Dimension => ({\n  width,\n  height\n});\n\nexport const area = (d: Dimension): number => d.width * d.height;\n\nexport const randomPoint = (d: Dimension): Point.Point =>\n  Point.fromIndex(Math.floor(Math.random() * area(d)), d);\n\nexport const pointAlongEdge = (d: Dimension): Point.Point => {\n  const northOrSouth = Math.random() > 0.5;\n\n  return Point.create(\n    northOrSouth\n      ? Numbers.randomInRange(0, d.width)\n      : Math.random() > 0.5\n      ? 0\n      : d.width - 1,\n    !northOrSouth\n      ? Numbers.randomInRange(0, d.height)\n      : Math.random() > 0.5\n      ? 0\n      : d.height - 1\n  );\n};\n\nexport const inBounds = (d: Dimension, p: Point.Point): boolean =>\n  p.x >= 0 && p.y >= 0 && p.x < d.width && p.y < d.height;\n","import { Dimension } from \".\";\n\ntype Algorithm = \"aldous-broder\" | \"binary-tree\" | \"side-winder\";\n\nexport interface MazeData {\n  bytes: Uint8Array;\n  dimension: Dimension.Dimension;\n  algorithm: Algorithm;\n}\n\nexport interface Options {\n  dimension?: Dimension.Dimension;\n  algorithm?: Algorithm;\n}\n\nexport const fromApi = (\n  dimension: Dimension.Dimension,\n  algorithm: Algorithm,\n  base64: string\n): MazeData => {\n  return {\n    bytes: Uint8Array.from(atob(base64), c => c.charCodeAt(0)),\n    dimension,\n    algorithm\n  };\n};\n","import { Direction } from \".\";\n\nexport interface Cell {\n  walls: Walls;\n}\n\n/**\n * A wall is present to direction n if n === true\n */\nexport interface Walls {\n  n: boolean;\n  e: boolean;\n  s: boolean;\n  w: boolean;\n}\n\nexport const walls = ({ n, e, s, w }: Partial<Walls>): Walls => ({\n  n: n || false,\n  e: e || false,\n  s: s || false,\n  w: w || false\n});\n\nexport const fromByte = (byte: number) => ({\n  walls: walls({\n    n: !((byte & 0b00001000) > 0),\n    s: !((byte & 0b00000100) > 0),\n    e: !((byte & 0b00000010) > 0),\n    w: !((byte & 0b00000001) > 0)\n  })\n});\n\nexport const hasWall = (\n  { walls }: Cell,\n  direction: Direction.Direction\n): boolean => {\n  switch (direction) {\n    case Direction.Direction.NORTH:\n      return walls.n;\n    case Direction.Direction.EAST:\n      return walls.e;\n    case Direction.Direction.SOUTH:\n      return walls.s;\n    case Direction.Direction.WEST:\n      return walls.w;\n  }\n};\n","import * as Cell from \"./cell\";\nimport * as MazeData from \"./mazeData\";\nimport { Dimension, Point, Direction, Maybe } from \".\";\n\nexport interface Maze {\n  readonly grid: Grid;\n  readonly dimension: Dimension.Dimension;\n  readonly algorithm: string;\n}\n\nexport type Grid = Array<Array<Cell.Cell>>;\n\nexport const fromMazeData = ({\n  dimension,\n  bytes,\n  algorithm\n}: MazeData.MazeData): Maze => {\n  const grid: Grid = [];\n  for (let r = 0; r < dimension.height; r++) {\n    const row = [];\n    for (let c = 0; c < dimension.width; c++) {\n      row.push(Cell.fromByte(bytes[r * dimension.width + c]));\n    }\n    grid.push(row);\n  }\n\n  return {\n    grid,\n    dimension,\n    algorithm\n  };\n};\n\nexport const canWalk = (\n  maze: Maze,\n  { x, y }: Point.Point,\n  direction: Direction.Direction\n): boolean => {\n  const cell = maze.grid[y][x];\n  return !Cell.hasWall(cell, direction);\n};\n\nexport const canTravel = (\n  maze: Maze,\n  p: Point.Point,\n  ...directions: Direction.Direction[]\n): boolean =>\n  !!directions.reduce(\n    (last: Maybe.Maybe<Point.Point>, d) =>\n      last && canWalk(maze, last, d) ? Point.neighbor(last, d) : undefined,\n    p\n  );\n\nexport const lookInDirection = (\n  maze: Maze,\n  d: Direction.Direction,\n  p: Point.Point,\n  visionRadius: number\n): Point.Point[] => {\n  if (canWalk(maze, p, d) && visionRadius > 0) {\n    const neighbor = Point.neighbor(p, d);\n    return [neighbor, ...lookInDirection(maze, d, neighbor, visionRadius - 1)];\n  } else {\n    return [];\n  }\n};\n\nexport const peekableCorners = (maze: Maze, p: Point.Point): Point.Point[] => {\n  let corners: Point.Point[] = [];\n  if (\n    canTravel(maze, p, Direction.Direction.NORTH, Direction.Direction.EAST) ||\n    canTravel(maze, p, Direction.Direction.EAST, Direction.Direction.NORTH)\n  ) {\n    corners.push(Point.create(p.x + 1, p.y - 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.NORTH, Direction.Direction.WEST) ||\n    canTravel(maze, p, Direction.Direction.WEST, Direction.Direction.NORTH)\n  ) {\n    corners.push(Point.create(p.x - 1, p.y - 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.SOUTH, Direction.Direction.EAST) ||\n    canTravel(maze, p, Direction.Direction.EAST, Direction.Direction.SOUTH)\n  ) {\n    corners.push(Point.create(p.x + 1, p.y + 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.SOUTH, Direction.Direction.WEST) ||\n    canTravel(maze, p, Direction.Direction.WEST, Direction.Direction.SOUTH)\n  ) {\n    corners.push(Point.create(p.x - 1, p.y + 1));\n  }\n\n  return corners;\n};\n\nexport const seenFromPoint = (\n  maze: Maze,\n  origin: Point.Point,\n  visionRadius: number\n): Point.Point[] =>\n  Direction.all()\n    .reduce(\n      (p: Point.Point[], d) =>\n        p.concat(lookInDirection(maze, d, origin, visionRadius)),\n      []\n    )\n    .concat(peekableCorners(maze, origin))\n    .concat(origin);\n","interface Loaded<T> {\n  state: \"Loaded\";\n  data: T;\n}\n\ninterface Loading {\n  state: \"Loading\";\n}\n\ninterface Errored {\n  state: \"Errored\";\n  e: any;\n}\n\nexport type Loadable<T> = Loaded<T> | Loading | Errored;\n\nexport const isLoading = <T>(l: Loadable<T>): l is Loading =>\n  l.state === \"Loading\";\n\nexport const isLoaded = <T>(l: Loadable<T>): l is Loaded<T> =>\n  l.state === \"Loaded\";\n\nexport const isErrored = <T>(l: Loadable<T>): l is Errored =>\n  l.state === \"Errored\";\n\nexport const loading = <T>(): Loading => ({ state: \"Loading\" });\n\nexport const loaded = <T>(data: T): Loaded<T> => ({\n  state: \"Loaded\",\n  data\n});\n\nexport const errored = <T>(e: any): Errored => ({ state: \"Errored\", e });\n\nexport const map = <T, R>(f: (t: T) => R, l: Loadable<T>): Loadable<R> =>\n  isLoaded(l) ? loaded(f(l.data)) : l;\n","import { v4 } from \"uuid\";\n\nexport type ID = string;\n\nexport const create = (): ID => v4();\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\nimport { Arrays } from \"../../util\";\n\nexport interface Player extends BaseEntity.BaseEntity {\n  type: \"player\";\n  name: string;\n  visionRadius: number;\n  displayName: string;\n}\n\nexport const create = (\n  name: string,\n  position: Point.Point = Point.create(),\n  visionRadius: number = 5,\n  displayName: string = randomDisplayName()\n): Player => ({\n  id: ID.create(),\n  name,\n  position,\n  type: \"player\",\n  visionRadius,\n  displayName: displayName || name,\n  cls: BaseEntity.EntityClass.PLAYER\n});\n\nexport const randomDisplayName = (): string =>\n  Arrays.randomItem([\n    \"🐕\",\n    \"🐦\",\n    \"🐈\",\n    \"🐎\",\n    \"🐖\",\n    \"🐁\",\n    \"🐀\",\n    \"🐢\"\n    // \"🚶‍♂️\",\n    // \"🚶‍♀️\"\n  ]);\n","import { GameData } from \"../game\";\nimport { Instruction } from \"..\";\nimport { BlindGuardian, Player, Exit, WanderingHusk } from \".\";\n\nexport type HostileEntity =\n  | BlindGuardian.BlindGuardian\n  | WanderingHusk.WanderingHusk;\n\nexport type Entity = Player.Player | Exit.Exit | HostileEntity;\n\nexport const getColor = (e: Entity): string => {\n  switch (e.type) {\n    default:\n      return \"transparent\";\n  }\n};\n\nexport const getDisplayName = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return e.displayName;\n    case \"blind-guardian\":\n      return BlindGuardian.DISPLAY;\n    case \"exit\":\n      return Exit.DISPLAY;\n    case \"wandering-husk\":\n      return WanderingHusk.DISPLAY;\n  }\n};\n\nexport const getDescription = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return e.name;\n    case \"blind-guardian\":\n      return \"a blind guardian\";\n    case \"exit\":\n      return \"an exit\";\n    case \"wandering-husk\":\n      return \"a wandering husk\";\n  }\n};\n\nexport const generateAiInstructions = (\n  e: Entity,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  switch (e.type) {\n    case \"blind-guardian\":\n      return BlindGuardian.next(e, gameData);\n    case \"wandering-husk\":\n      return WanderingHusk.next(e, gameData);\n    default:\n      return [];\n  }\n};\n\nexport const getKillMessage = (\n  p: Player.Player,\n  killer: HostileEntity\n): string => {\n  switch (killer.type) {\n    case \"blind-guardian\":\n      return `${p.name} has been annihilated by ${getDescription(\n        killer\n      )}. Nothing is left.`;\n    case \"wandering-husk\":\n      return `Blood and sinew cling to the maw of the wandering husk. ${p.name} has been consumed.`;\n  }\n};\n","import { ID } from \"..\";\n\nexport interface BaseInstruction {\n  entityId: ID.ID;\n  type: InstructionType;\n}\n\nexport enum InstructionType {\n  MOVE = \"MOVE\",\n  UPDATE = \"UPDATE\",\n  WAIT = \"WAIT\"\n}\n","import { BaseEntity } from \".\";\nimport { Point, ID, Direction, Instruction, Maze } from \"..\";\nimport { GameData } from \"../game\";\nimport { Arrays } from \"../../util\";\n\n/**\n * The blind guardian is a sightless, senseless automaton\n */\nexport interface BlindGuardian extends BaseEntity.BaseEntity {\n  type: \"blind-guardian\";\n  heading: Direction.Direction;\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): BlindGuardian => ({\n  type: \"blind-guardian\",\n  position,\n  id: ID.create(),\n  heading: Direction.Direction.NORTH,\n  cls: BaseEntity.EntityClass.HOSTILE\n});\n\nexport const next = (\n  e: BlindGuardian,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const options = Direction.all().filter(d =>\n    Maze.canWalk(gameData.maze, e.position, d)\n  );\n\n  const adjacent = options.filter(d => d !== Direction.inverse(e.heading));\n\n  let direction: Direction.Direction;\n\n  if (options.includes(e.heading) && Math.random() < 0.75) {\n    direction = e.heading;\n  } else if (Math.random() < 0.75 && adjacent.length > 0) {\n    direction = Arrays.randomItem(adjacent);\n  } else {\n    direction = options[0];\n  }\n\n  return [\n    Instruction.update({ ...e, heading: direction }),\n    Instruction.move(e.id, direction)\n  ];\n};\n\nexport const DISPLAY = \"🗿\";\n","import { ID, Dimension, Point, Maybe } from \"..\";\nimport { Entity, Player } from \"../entities\";\n\nexport interface EntityData {\n  entityMap: Record<ID.ID, Entity.Entity>;\n  positionMap: Record<number, ID.ID[]>;\n  playerEntityId: Maybe.Maybe<ID.ID>;\n  typeMap: Record<string, ID.ID[]>;\n}\n\nexport const fromEntities = (\n  entities: Entity.Entity[],\n  dimension: Dimension.Dimension\n): EntityData => ({\n  entityMap: entities.reduce((m: Record<ID.ID, Entity.Entity>, e) => {\n    m[e.id] = e;\n    return m;\n  }, {}),\n  positionMap: entities.reduce((m: Record<number, ID.ID[]>, e) => {\n    const idx = Point.toIndex(e.position, dimension);\n    m[idx] = m[idx] ? [...m[idx], e.id] : [e.id];\n    return m;\n  }, {}),\n  playerEntityId: Maybe.map(\n    p => p.id,\n    entities.find(e => e.type === \"player\")\n  ),\n  typeMap: entities.reduce(\n    (m: Record<string, ID.ID[]>, e) => ({\n      ...m,\n      [e.type]: m[e.type] ? [...m[e.type], e.id] : [e.id]\n    }),\n    {}\n  )\n});\n\nexport const entitiesAtPoint = (\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const idx = Point.toIndex(p, d);\n  const ids = data.positionMap[idx] || [];\n  return ids.map(id => data.entityMap[id]);\n};\n\nexport const getPlayer = (data: EntityData): Maybe.Maybe<Player.Player> =>\n  Maybe.map(id => data.entityMap[id] as Player.Player, data.playerEntityId);\n\nexport const moveEntity = (\n  id: ID.ID,\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): EntityData => {\n  const entity = data.entityMap[id];\n  if (entity != null) {\n    const oldIdx = Point.toIndex(entity.position, d);\n    const newIdx = Point.toIndex(p, d);\n    const newEntity = { ...entity, position: p };\n    return {\n      ...data,\n      entityMap: { ...data.entityMap, [id]: newEntity },\n      positionMap: {\n        ...data.positionMap,\n        [oldIdx]: [\n          ...(data.positionMap[oldIdx] || []).filter(eId => eId !== id)\n        ],\n        [newIdx]: [...(data.positionMap[newIdx] || []), id]\n      }\n    };\n  } else {\n    return data;\n  }\n};\n\n// might need to augment to handle type change\nexport const updateEntity = (\n  updated: Entity.Entity,\n  data: EntityData\n): EntityData => ({\n  ...data,\n  entityMap: { ...data.entityMap, [updated.id]: updated }\n});\n\nexport const entitiesCrossed = (\n  last: EntityData,\n  next: EntityData,\n  a: ID.ID,\n  b: ID.ID\n): boolean => {\n  const lastA = last.entityMap[a];\n  const lastB = last.entityMap[b];\n  const nextA = next.entityMap[a];\n  const nextB = next.entityMap[b];\n\n  return (\n    Point.equals(nextA.position, lastB.position) &&\n    Point.equals(nextB.position, lastA.position)\n  );\n};\n\nexport const neighborsCrossedByEntity = (\n  last: EntityData,\n  next: EntityData,\n  e: ID.ID,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const neighborIndices = Point.neighbors(\n    next.entityMap[e].position,\n    d\n  ).map(p => Point.toIndex(p, d));\n\n  const neighborEntities = neighborIndices.reduce(\n    (entities: ID.ID[], idx) => entities.concat(next.positionMap[idx] || []),\n    []\n  );\n\n  return neighborEntities\n    .filter(id => entitiesCrossed(last, next, e, id))\n    .map(id => next.entityMap[id]);\n};\n","import { Maze, Cell, Point, Instruction } from \"..\";\nimport { EntityData, GameData } from \".\";\nimport { Entity } from \"../entities\";\n\nexport interface GameData {\n  maze: Maze.Maze;\n  entityData: EntityData.EntityData;\n  seen: Set<number>;\n  sees: Set<number>;\n  stepCount: number;\n}\n\nexport const create = (\n  maze: Maze.Maze,\n  entityData: EntityData.EntityData\n): GameData => {\n  const player = EntityData.getPlayer(entityData);\n  const sees = new Set<number>(\n    player\n      ? Maze.seenFromPoint(maze, player.position, player.visionRadius).map(p =>\n          Point.toIndex(p, maze.dimension)\n        )\n      : []\n  );\n\n  return {\n    maze,\n    entityData,\n    seen: new Set(),\n    sees,\n    stepCount: 0\n  };\n};\n\nexport interface CellMeta {\n  occupants: Entity.Entity[];\n  visible: boolean;\n  seen: boolean;\n  unknown: boolean;\n}\n\nexport interface CellAndMeta {\n  cell: Cell.Cell;\n  meta: CellMeta;\n}\n\nexport type DisplayGrid = CellAndMeta[][];\n\nexport const displayGrid = ({\n  maze,\n  entityData,\n  seen,\n  sees\n}: GameData): DisplayGrid =>\n  maze.grid.reduce(\n    (rows: CellAndMeta[][], row, rowIdx) => [\n      ...rows,\n      row.reduce((cells: CellAndMeta[], cell, cellIdx) => {\n        const p = Point.create(cellIdx, rowIdx);\n        const isSeen = seen.has(Point.toIndex(p, maze.dimension));\n        const isVisible = sees.has(Point.toIndex(p, maze.dimension));\n        return cells.concat({\n          cell,\n          meta: {\n            occupants: EntityData.entitiesAtPoint(\n              entityData,\n              Point.create(cellIdx, rowIdx),\n              maze.dimension\n            ),\n            visible: isVisible,\n            seen: isSeen,\n            unknown: !isVisible && !isSeen\n          }\n        });\n      }, [])\n    ],\n    []\n  );\n\nexport const generateAllAIInstructions = (\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const aiEntities = Object.keys(gameData.entityData.entityMap)\n    .map(k => gameData.entityData.entityMap[k])\n    .filter(e => e.type !== \"player\");\n\n  return aiEntities.reduce(\n    (i: Instruction.Instruction[], e) =>\n      i.concat(Entity.generateAiInstructions(e, gameData)),\n    []\n  );\n};\n","import { BaseEntity } from \".\";\nimport { Point, ID, Direction, Instruction, Maze, Maybe } from \"..\";\nimport { GameData, EntityData } from \"../game\";\nimport { Arrays } from \"../../util\";\n\n/**\n * The wandering husk shambles aimlesslessy, until it lays its eyes on prey.\n * It pursues relentlessly that which it can see.\n */\n\nexport interface WanderingHusk extends BaseEntity.BaseEntity {\n  type: \"wandering-husk\";\n  heading: Direction.Direction;\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): WanderingHusk => ({\n  type: \"wandering-husk\",\n  position,\n  id: ID.create(),\n  heading: Direction.random(),\n  cls: BaseEntity.EntityClass.HOSTILE\n});\n\nexport const next = (\n  e: WanderingHusk,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const towardPlayer = Direction.all().reduce(\n    (heading: Maybe.Maybe<Direction.Direction>, d) =>\n      !heading\n        ? lookForPlayerInDirection(d, e.position, gameData)\n          ? d\n          : undefined\n        : heading,\n    undefined\n  );\n\n  const instructions = [];\n  let heading: Direction.Direction;\n  if (towardPlayer) {\n    if (Math.random() < 0.9) {\n      heading = towardPlayer;\n\n      instructions.push(Instruction.move(e.id, heading));\n    } else {\n      heading = e.heading;\n      instructions.push(Instruction.wait(e.id));\n    }\n  } else {\n    heading = wander(e, gameData);\n\n    instructions.push(Instruction.move(e.id, heading));\n  }\n\n  return [Instruction.update({ ...e, heading }), ...instructions];\n};\n\nexport const wander = (\n  e: WanderingHusk,\n  gameData: GameData.GameData\n): Direction.Direction => {\n  const options = Direction.all().filter(d =>\n    Maze.canWalk(gameData.maze, e.position, d)\n  );\n\n  const adjacent = options.filter(d => d !== Direction.inverse(e.heading));\n\n  let direction: Direction.Direction;\n\n  if (options.includes(e.heading) && Math.random() < 0.75) {\n    direction = e.heading;\n  } else if (Math.random() < 0.75 && adjacent.length > 0) {\n    direction = Arrays.randomItem(adjacent);\n  } else {\n    direction = options[0];\n  }\n  return direction;\n};\n\nexport const lookForPlayerInDirection = (\n  d: Direction.Direction,\n  origin: Point.Point,\n  gameData: GameData.GameData\n): boolean =>\n  Maze.lookInDirection(gameData.maze, d, origin, 5).reduce(\n    (foundPlayer: boolean, p) =>\n      !foundPlayer\n        ? EntityData.entitiesAtPoint(\n            gameData.entityData,\n            p,\n            gameData.maze.dimension\n          ).find(e => e.type === \"player\") != null\n        : foundPlayer,\n    false\n  );\n\nexport const DISPLAY = \"🧟\";\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\n\nexport interface Exit extends BaseEntity.BaseEntity {\n  type: \"exit\";\n}\n\nexport const create = (position: Point.Point): Exit => ({\n  position,\n  id: ID.create(),\n  type: \"exit\",\n  cls: BaseEntity.EntityClass.INANIMATE\n});\n\nexport const DISPLAY = \"🚪\";\n","import { Dimension, Point, Direction } from \".\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport const create = (x: number = 0, y: number = 0): Point => ({ x, y });\n\nexport const toIndex = (\n  { x, y }: Point,\n  { width }: Dimension.Dimension\n): number => y * width + x;\n\nexport const fromIndex = (idx: number, { width }: Dimension.Dimension): Point =>\n  create(idx % width, Math.floor(idx / width));\n\nexport const neighbor = (p: Point, d: Direction.Direction): Point => {\n  switch (d) {\n    case \"NORTH\":\n      return Point.create(p.x, p.y - 1);\n    case \"SOUTH\":\n      return Point.create(p.x, p.y + 1);\n    case \"EAST\":\n      return Point.create(p.x + 1, p.y);\n    case \"WEST\":\n    default:\n      return Point.create(p.x - 1, p.y);\n  }\n};\n\nexport const neighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  Direction.all()\n    .map(d => neighbor(p, d))\n    .filter(p => Dimension.inBounds(d, p));\n\nexport const diagonalNeighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  [\n    create(p.x - 1, p.y - 1),\n    create(p.x + 1, p.y - 1),\n    create(p.x + 1, p.y + 1),\n    create(p.x - 1, p.y + 1)\n  ].filter(p => Dimension.inBounds(d, p));\n\nexport const equals = (a: Point.Point, b: Point.Point): boolean =>\n  a.x === b.x && a.y === b.y;\n","import { Instruction, ID } from \".\";\n\nexport interface Step {\n  instructions: Instruction.Instruction[];\n  id: ID.ID;\n}\n\nexport const create = (...instructions: Instruction.Instruction[]): Step => ({\n  instructions,\n  id: ID.create()\n});\n","import { Direction, ID, Result, Maze, Point } from \"..\";\nimport { GameData, EntityData } from \"../game\";\nimport { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Player } from \"../entities\";\n\nexport interface MoveInstruction extends BaseInstruction {\n  type: InstructionType.MOVE;\n  payload: {\n    direction: Direction.Direction;\n  };\n}\n\nexport const move = (\n  entityId: ID.ID,\n  direction: Direction.Direction\n): MoveInstruction => ({\n  type: InstructionType.MOVE,\n  entityId,\n  payload: { direction }\n});\n\nexport const validate = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  Maze.canWalk(\n    gameData.maze,\n    gameData.entityData.entityMap[move.entityId].position,\n    move.payload.direction\n  )\n    ? Result.ok(undefined)\n    : Result.err(\"way is blocked\");\n\nexport const apply = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => {\n  const entityData = EntityData.moveEntity(\n    move.entityId,\n    gameData.entityData,\n    Point.neighbor(\n      gameData.entityData.entityMap[move.entityId].position,\n      move.payload.direction\n    ),\n    gameData.maze.dimension\n  );\n\n  const player = EntityData.getPlayer(entityData);\n  const { seen, sees } =\n    player && move.entityId === player.id\n      ? updatePlayerVision(gameData.seen, player, gameData.maze)\n      : gameData;\n\n  return {\n    ...gameData,\n    seen,\n    sees,\n    entityData\n  };\n};\n\nexport const updatePlayerVision = (\n  prev: Set<number>,\n  player: Player.Player,\n  maze: Maze.Maze\n): Pick<GameData.GameData, \"seen\" | \"sees\"> => {\n  const sees = new Set<number>(\n    Maze.seenFromPoint(maze, player.position, player.visionRadius).map(p =>\n      Point.toIndex(p, maze.dimension)\n    )\n  );\n\n  const seen = new Set<number>([...prev, ...sees]);\n\n  return { sees, seen };\n};\n","import { Arrays } from \"../util\";\n\nexport enum Direction {\n  NORTH = \"NORTH\",\n  SOUTH = \"SOUTH\",\n  EAST = \"EAST\",\n  WEST = \"WEST\"\n}\n\nexport const all = (): Direction[] => [\n  Direction.NORTH,\n  Direction.SOUTH,\n  Direction.EAST,\n  Direction.WEST\n];\n\nexport const inverse = (d: Direction): Direction => {\n  switch (d) {\n    case Direction.NORTH:\n      return Direction.SOUTH;\n    case Direction.SOUTH:\n      return Direction.NORTH;\n    case Direction.EAST:\n      return Direction.WEST;\n    case Direction.WEST:\n      return Direction.EAST;\n  }\n};\n\nexport const random = (): Direction => Arrays.randomItem(all());\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Entity } from \"../entities\";\nimport { GameData, EntityData } from \"../game\";\n\nexport interface UpdateInstruction extends BaseInstruction {\n  type: InstructionType.UPDATE;\n  payload: {\n    updated: Entity.Entity;\n  };\n}\n\nexport const update = (updated: Entity.Entity): UpdateInstruction => ({\n  type: InstructionType.UPDATE,\n  entityId: updated.id,\n  payload: { updated }\n});\n\nexport const apply = (\n  update: UpdateInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.updateEntity(\n    update.payload.updated,\n    gameData.entityData\n  )\n});\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { ID } from \"..\";\nimport { GameData } from \"../game\";\n\nexport interface WaitInstruction extends BaseInstruction {\n  type: InstructionType.WAIT;\n}\n\nexport const wait = (entityId: ID.ID): WaitInstruction => ({\n  type: InstructionType.WAIT,\n  entityId\n});\n\nexport const apply = (\n  _: WaitInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({ ...gameData });\n","import { Result, Instruction } from \"..\";\nimport * as Move from \"./move\";\nimport * as Update from \"./update\";\nimport * as Wait from \"./wait\";\nimport { GameData } from \"../game\";\nimport { InstructionType } from \"./baseInstruction\";\n\nexport type Instruction =\n  | Move.MoveInstruction\n  | Update.UpdateInstruction\n  | Wait.WaitInstruction;\n\nexport const validate = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<void> => {\n  switch (instruction.type) {\n    case InstructionType.MOVE:\n      return Move.validate(instruction, gameData);\n    case InstructionType.WAIT:\n      return Result.ok(undefined);\n    default:\n      return Result.err(`Unkown instruction of type ${instruction.type}`);\n  }\n};\n\nexport const validateAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  instructions.reduce(\n    (validated: Result.Result<void>, i) =>\n      Result.isOk(validated) ? validate(i, gameData) : validated,\n    Result.ok(undefined)\n  );\n\nexport const apply = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> => {\n  try {\n    switch (instruction.type) {\n      case InstructionType.MOVE:\n        return Result.ok(Move.apply(instruction, gameData));\n      case InstructionType.UPDATE:\n        return Result.ok(Update.apply(instruction, gameData));\n      case InstructionType.WAIT:\n        return Result.ok(Wait.apply(instruction, gameData));\n    }\n  } catch (e) {\n    console.warn(\"Error applying instruction\", instruction);\n    console.error(e);\n    return Result.err(\"Error applying instructions\");\n  }\n};\n\nexport const applyAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> =>\n  instructions.reduce(\n    (applied: Result.Result<GameData.GameData>, i) =>\n      Result.isOk(applied) ? apply(i, applied.data) : applied,\n    Result.ok(gameData)\n  );\n","import { MazeData, Maze, Step, ID, Direction } from \"./types\";\nimport { Entity } from \"./types/entities\";\nimport { GameData } from \"./types/game\";\n\nexport enum ActionTypes {\n  REQUEST_NEW_GAME = \"REQUEST_NEW_GAME\",\n  START_NEW_GAME = \"START_NEW_GAME\",\n\n  REQUEST_STEP = \"REQUEST_STEP\",\n  PROCESS_STEP = \"PROCESS_STEP\",\n  COMPLETE_STEP = \"COMPLETE_STEP\",\n  ABORT_STEP = \"ABORT_STEP\",\n\n  MOVE_PLAYER = \"MOVE_PLAYER\"\n}\n\ninterface NewGameOptions {\n  mazeOptions?: MazeData.Options;\n}\nexport interface RequestNewGame {\n  type: ActionTypes.REQUEST_NEW_GAME;\n  options: NewGameOptions;\n}\n\nexport interface StartNewGame {\n  type: ActionTypes.START_NEW_GAME;\n  maze: Maze.Maze;\n  entities: Entity.Entity[];\n}\n\nexport interface RequestStep {\n  type: ActionTypes.REQUEST_STEP;\n  step: Step.Step;\n}\n\nexport interface AbortStep {\n  type: ActionTypes.ABORT_STEP;\n  stepId: ID.ID;\n}\n\nexport interface ProcessStep {\n  type: ActionTypes.PROCESS_STEP;\n  stepId: ID.ID;\n  gameData: GameData.GameData;\n}\n\nexport interface CompleteStep {\n  type: ActionTypes.COMPLETE_STEP;\n  stepId: ID.ID;\n}\n\nexport interface MovePlayer {\n  type: ActionTypes.MOVE_PLAYER;\n  direction?: Direction.Direction;\n}\n\nexport type AppAction =\n  | RequestNewGame\n  | StartNewGame\n  | RequestStep\n  | AbortStep\n  | CompleteStep\n  | ProcessStep\n  | MovePlayer;\n\nexport const requestNewGame = (\n  options: NewGameOptions = {}\n): RequestNewGame => ({ type: ActionTypes.REQUEST_NEW_GAME, options });\n\nexport const startNewGame = (\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): StartNewGame => ({\n  type: ActionTypes.START_NEW_GAME,\n  maze,\n  entities\n});\n\nexport const requestStep = (step: Step.Step): RequestStep => ({\n  type: ActionTypes.REQUEST_STEP,\n  step\n});\n\nexport const abortStep = (stepId: ID.ID): AbortStep => ({\n  type: ActionTypes.ABORT_STEP,\n  stepId\n});\n\nexport const processStep = (\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): ProcessStep => ({\n  type: ActionTypes.PROCESS_STEP,\n  stepId,\n  gameData\n});\n\nexport const completeStep = (stepId: ID.ID): CompleteStep => ({\n  type: ActionTypes.COMPLETE_STEP,\n  stepId\n});\n\nexport const movePlayer = (direction?: Direction.Direction): MovePlayer => ({\n  type: ActionTypes.MOVE_PLAYER,\n  direction\n});\n","export interface Err {\n  type: \"Error\";\n  msg: string;\n}\n\nexport interface Ok<T> {\n  type: \"Ok\";\n  data: T;\n}\n\nexport type Result<T> = Ok<T> | Err;\n\nexport const ok = <T>(data: T): Ok<T> => ({ type: \"Ok\", data });\n\nexport const err = (msg: string): Err => ({ type: \"Error\", msg });\n\nexport const isErr = <T>(r: Result<T>): r is Err => r.type === \"Error\";\n\nexport const isOk = <T>(r: Result<T>): r is Ok<T> => r.type === \"Ok\";\n\nexport const map = <T, R>(f: (t: T) => R, r: Result<T>): Result<R> =>\n  isOk(r) ? ok(f(r.data)) : r;\n","export type Maybe<T> = T | undefined | null;\n\nexport const of = <T>(value: T | undefined | null): Maybe<T> => value;\nexport const none = <T>(): Maybe<T> => undefined;\n\ntype Supplier<T> = () => T;\n\nexport const withDefault = <T>(maybe: Maybe<T>, default_: T | Supplier<T>): T =>\n  maybe != null\n    ? maybe\n    : typeof default_ === \"function\"\n    ? (default_ as Supplier<T>)()\n    : default_;\n\nexport const map = <T, R>(f: (t: T) => R, maybe: Maybe<T>): Maybe<R> =>\n  maybe != null ? f(maybe) : undefined;\n\nexport const ifPresent = <T>(f: (t: T) => void, maybe: Maybe<T>): void => {\n  if (maybe) {\n    f(maybe);\n  }\n};\n","import { State } from \"./state\";\nimport { createSelector } from \"reselect\";\nimport { Loadable, Maybe } from \"./types\";\nimport { GameData } from \"./types/game\";\nimport { Camera } from \"./util\";\n\nexport const getState = (state: State): State => state;\n\nexport const getGame = createSelector(getState, state => state.game);\n\nexport const getDisplayGrid = createSelector(getGame, game =>\n  Loadable.map(GameData.displayGrid, game)\n);\n\nexport const getIsProcessingStep = createSelector(\n  getState,\n  state => state.stepId != null\n);\n\nexport const getPlayer = createSelector(getGame, game =>\n  Loadable.isLoaded(game)\n    ? Maybe.map(\n        id => game.data.entityData.entityMap[id],\n        game.data.entityData.playerEntityId\n      )\n    : undefined\n);\n\nexport const getWindowedDisplayGrid = createSelector(\n  getDisplayGrid,\n  getPlayer,\n  (displayGrid, player) =>\n    Loadable.map(\n      grid =>\n        player != null ? Camera.centerOnPoint(grid, player.position, 3) : [],\n      displayGrid\n    )\n);\n","import React from \"react\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport styles from \"./Entity.css\";\n\nexport const Entity = (entity: EntityT.Entity): JSX.Element => (\n  <div className={styles.root}>{EntityT.getDisplayName(entity)}</div>\n);\n","import React from \"react\";\nimport { Cell as CellT, Maybe } from \"../types\";\nimport styles from \"./Cell.css\";\nimport classNames from \"classnames\";\nimport { CellMeta } from \"../types/game/gameData\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport { Entity } from \"./Entity\";\n\ninterface Props {\n  cell: CellT.Cell;\n  meta: CellMeta;\n}\n\nconst IS_WALL = \"0.5px solid black\";\nconst IS_OPEN = \"0.5px transparent\";\nconst drawSide = (wall: boolean) => (wall ? IS_WALL : IS_OPEN);\n\nconst getEntityToDraw = ({\n  visible,\n  seen,\n  occupants\n}: CellMeta): Maybe.Maybe<EntityT.Entity> => {\n  if (visible) {\n    return Maybe.withDefault(\n      occupants.find(e => e.type !== \"player\" && e.type !== \"exit\"),\n      occupants[0]\n    );\n  } else if (seen) {\n    return occupants.find(e => e.type === \"exit\");\n  }\n};\n\nexport const Cell = ({ cell, meta }: Props): JSX.Element => {\n  const { walls } = cell;\n  return (\n    <div\n      className={classNames(styles.root, {\n        [styles.seen]: meta.seen,\n        [styles.visible]: meta.visible,\n        [styles.unknown]: !meta.seen && !meta.visible\n      })}\n      style={\n        !meta.unknown\n          ? {\n              borderTop: drawSide(walls.n),\n              borderRight: drawSide(walls.e),\n              borderBottom: drawSide(walls.s),\n              borderLeft: drawSide(walls.w)\n            }\n          : undefined\n      }\n    >\n      {Maybe.map(\n        o => (\n          <Entity {...o} />\n        ),\n        getEntityToDraw(meta)\n      )}\n    </div>\n  );\n};\n\nexport const EmptyCell = () => (\n  <div className={classNames(styles.empty, styles.root)}></div>\n);\n","import React from \"react\";\nimport { Cell, EmptyCell } from \"./Cell\";\nimport styles from \"./Grid.css\";\nimport { Camera } from \"../util\";\nimport { Maybe } from \"../types\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n}\n\nexport const Grid = ({ grid }: Props): JSX.Element => {\n  return (\n    <div className={styles.root}>\n      {grid.map((row, idx) => (\n        <div key={idx} className={styles.row}>\n          {row.map((maybeCell, idx) =>\n            Maybe.withDefault(\n              Maybe.map(\n                cell => <Cell key={idx} cell={cell.cell} meta={cell.meta} />,\n                maybeCell\n              ),\n              <EmptyCell key={idx} />\n            )\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Effect, Direction } from \"../types\";\nimport styles from \"./GamePad.css\";\nimport classNames from \"classnames\";\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = DispatchProps;\n\nexport const GamePad = ({ onMove }: Props): JSX.Element => (\n  <div className={styles.root}>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.NORTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n    <div className={styles.row}>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.WEST)}\n      ></button>\n      <button\n        className={classNames(styles.block, styles.button, styles.wait)}\n        onClick={() => onMove(undefined)}\n      ></button>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.EAST)}\n      ></button>\n    </div>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.SOUTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { Effect, Direction } from \"../types\";\n\ninterface Props {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  disabled: boolean;\n}\n\nexport class KeyPad extends React.PureComponent<Props> {\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    return <></>;\n  }\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    if (!this.props.disabled) {\n      if (event.key === \"ArrowUp\" || event.key === \"w\") {\n        this.props.onMove(Direction.Direction.NORTH);\n      } else if (event.key === \"ArrowRight\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.EAST);\n      } else if (event.key === \"ArrowDown\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.SOUTH);\n      } else if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n        this.props.onMove(Direction.Direction.WEST);\n      } else if (event.key === \" \" || event.key === \"Enter\") {\n        this.props.onMove(undefined);\n      }\n    }\n  };\n}\n","import * as React from \"react\";\nimport { Grid } from \"./Grid\";\nimport { GamePad } from \"./GamePad\";\nimport { Effect, Direction } from \"../types\";\nimport { KeyPad } from \"./KeyPad\";\nimport { Camera } from \"../util\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  processingUpdates: boolean;\n}\n\nexport const Game = ({\n  grid,\n  onMove,\n  processingUpdates\n}: Props): JSX.Element => (\n  <>\n    <Grid grid={grid} />\n    <GamePad onMove={onMove} />\n    <KeyPad onMove={onMove} disabled={processingUpdates} />\n  </>\n);\n","import React from \"react\";\nimport { GameData, EntityData } from \"../types/game\";\nimport { LocalStorage, Uri } from \"../util\";\nimport { State } from \"../state\";\nimport { getGame } from \"../selectors\";\nimport { Loadable, Maybe } from \"../types\";\nimport { connect } from \"react-redux\";\n\nconst DEV =\n  LocalStorage.getSiteSetting(\"devmode\", () => {\n    const queryParam = Uri.parseQuery()[\"devmode\"];\n    return !!queryParam && queryParam !== \"false\" ? \"true\" : undefined;\n  }) === \"true\";\n\ninterface Props {\n  gameData: Loadable.Loadable<GameData.GameData>;\n}\n\nconst getEntityCountData = (entityData: EntityData.EntityData): string =>\n  Object.keys(entityData.typeMap)\n    .map(type_ => `${type_}: ${entityData.typeMap[type_].length}`)\n    .join(\", \");\n\nconst gameInfo = (gameData: GameData.GameData): string =>\n  [\n    `maze algorithm:: ${gameData.maze.algorithm}`,\n    `maze dimensions:: ${gameData.maze.dimension.width} x ${gameData.maze.dimension.height}`,\n    `entityCount:: ${getEntityCountData(gameData.entityData)}`,\n    `step:: ${gameData.stepCount}`\n  ].join(\"\\n\");\n\nexport const InfoButton = ({ gameData }: Props): JSX.Element =>\n  DEV && Loadable.isLoaded(gameData) ? (\n    <button\n      onFocus={e => e.preventDefault()}\n      style={{ position: \"absolute\", top: 5, left: 5 }}\n      onClick={() => {\n        window.alert(gameInfo(gameData.data));\n        Maybe.ifPresent(\n          (el: HTMLElement) => el.blur(),\n          document.activeElement as HTMLElement\n        );\n      }}\n    >\n      ?\n    </button>\n  ) : (\n    <></>\n  );\n\nconst mapStateToProps = (state: State): Props => ({\n  gameData: getGame(state)\n});\n\nexport default connect(mapStateToProps)(InfoButton);\n","import React, { Dispatch } from \"react\";\nimport styles from \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../state\";\nimport { Loadable, Effect, Direction } from \"../types\";\nimport { getIsProcessingStep, getWindowedDisplayGrid } from \"../selectors\";\nimport { Game } from \"./Game\";\nimport { AppAction, movePlayer } from \"../actions\";\nimport { WindowedGrid } from \"../util/camera\";\nimport InfoButton from \"./InfoButton\";\n\ninterface StateProps {\n  grid: Loadable.Loadable<WindowedGrid>;\n  processingUpdates: boolean;\n}\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst App = ({ grid, processingUpdates, onMove }: Props) => {\n  return (\n    <div className={styles.root}>\n      {Loadable.isLoading(grid) && <span>Loading . . . </span>}\n      {Loadable.isLoaded(grid) && grid.data && (\n        <>\n          <InfoButton />\n          <Game\n            processingUpdates={processingUpdates}\n            grid={grid.data}\n            onMove={onMove}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  grid: getWindowedDisplayGrid(state),\n  processingUpdates: getIsProcessingStep(state)\n});\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<AppAction>\n): DispatchProps => ({\n  onMove: d => dispatch(movePlayer(d))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Maze, ID } from \"./types\";\nimport { Loadable } from \"./types\";\nimport { GameData, EntityData } from \"./types/game\";\nimport { Entity } from \"./types/entities\";\n\nexport interface State {\n  game: Loadable.Loadable<GameData.GameData>;\n  stepId?: ID.ID;\n}\n\nexport const create = (init = {}): State => ({\n  game: Loadable.loading(),\n  ...init\n});\n\nexport const requestingNewGame = (state: State): State => ({\n  ...state,\n  game: Loadable.loading()\n});\n\nexport const newGame = (\n  state: State,\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): State => ({\n  ...state,\n  game: Loadable.loaded(\n    GameData.create(maze, EntityData.fromEntities(entities, maze.dimension))\n  )\n});\n\nexport const ifGameIsLoaded = (f: () => State, state: State): State =>\n  Loadable.isLoaded(state.game) ? f() : state;\n\nexport const requestStep = (state: State, stepId: ID.ID): State => ({\n  ...state,\n  stepId\n});\n\nexport const processStep = (\n  state: State,\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            game: Loadable.loaded(gameData)\n          }\n        : state,\n    state\n  );\n\nexport const completeStep = (state: State, stepId: ID.ID): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            stepId: undefined,\n            game: Loadable.map(\n              g => ({ ...g, stepCount: g.stepCount + 1 }),\n              state.game\n            )\n          }\n        : state,\n    state\n  );\n\nexport const abortStep = (state: State, stepId: ID.ID) =>\n  state.stepId === stepId ? { ...state, stepId: undefined } : state;\n","import * as State from \"./state\";\nimport { AppAction, ActionTypes } from \"./actions\";\n\nexport const reducer = (\n  state: State.State = State.create(),\n  action: AppAction\n): State.State => {\n  switch (action.type) {\n    case ActionTypes.REQUEST_STEP:\n      return State.requestStep(state, action.step.id);\n    case ActionTypes.COMPLETE_STEP:\n      return State.completeStep(state, action.stepId);\n    case ActionTypes.ABORT_STEP:\n      return State.abortStep(state, action.stepId);\n    case ActionTypes.PROCESS_STEP:\n      return State.processStep(state, action.stepId, action.gameData);\n    case ActionTypes.START_NEW_GAME:\n      return State.newGame(state, action.maze, action.entities);\n    case ActionTypes.REQUEST_NEW_GAME:\n      return State.requestingNewGame(state);\n    default:\n      return state;\n  }\n};\n","import {\n  RequestStep,\n  abortStep,\n  completeStep,\n  ActionTypes,\n  processStep\n} from \"../actions\";\nimport { Loadable, Instruction, Result, Maybe } from \"../types\";\nimport { GameData, EntityData } from \"../types/game\";\nimport { select, put, take, call } from \"redux-saga/effects\";\nimport { getGame } from \"../selectors\";\nimport { EntityClass } from \"../types/entities/baseEntity\";\nimport { Entity } from \"../types/entities\";\nimport { HostileEntity } from \"../types/entities/entity\";\n\nexport function* stepEngine() {\n  while (true) {\n    try {\n      const { step }: RequestStep = yield take(ActionTypes.REQUEST_STEP);\n      const game: Loadable.Loadable<GameData.GameData> = yield select(getGame);\n      if (Loadable.isLoaded(game)) {\n        const { data: gameData } = game;\n\n        const stepValidation: Result.Result<void> = yield call(\n          Instruction.validateAll,\n          step.instructions,\n          gameData\n        );\n\n        if (Result.isErr(stepValidation)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        const aiInstructions = GameData.generateAllAIInstructions(gameData);\n        const instructions = [...aiInstructions, ...step.instructions];\n\n        const applied: Result.Result<GameData.GameData> = yield call(\n          Instruction.applyAll,\n          instructions,\n          gameData\n        );\n\n        if (Result.isErr(applied)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        yield put(processStep(step.id, applied.data));\n\n        // player collisions POC:\n        yield call(processCollisions, gameData, applied.data);\n\n        yield put(completeStep(step.id));\n      }\n    } catch (e) {\n      console.warn(\"Error processing step\");\n      console.error(e);\n    }\n  }\n}\n\nexport function* processCollisions(\n  last: GameData.GameData,\n  next: GameData.GameData\n) {\n  const player = EntityData.getPlayer(next.entityData)!;\n  const collisions = EntityData.entitiesAtPoint(\n    next.entityData,\n    player.position,\n    next.maze.dimension\n  )\n    .filter(e => e.id !== player.id)\n    .concat(\n      EntityData.neighborsCrossedByEntity(\n        last.entityData,\n        next.entityData,\n        player.id,\n        next.maze.dimension\n      )\n    );\n\n  const hostile: Maybe.Maybe<HostileEntity> = collisions.find(\n    e => e.cls === EntityClass.HOSTILE\n  ) as Maybe.Maybe<HostileEntity>;\n  if (collisions.length === 0) {\n    return;\n  } else if (hostile) {\n    yield call(window.confirm, Entity.getKillMessage(player, hostile));\n    window.location.reload();\n  } else if (collisions.find(e => e.type === \"exit\")) {\n    yield call(window.confirm, `${player.name} escaped. . . this time.`);\n    window.location.reload();\n  }\n}\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport { ActionTypes, MovePlayer, requestStep } from \"../actions\";\nimport { Player } from \"../types/entities\";\nimport { getPlayer, getIsProcessingStep } from \"../selectors\";\nimport { Step, Instruction } from \"../types\";\n\nexport function* movePlayer() {\n  yield takeEvery(ActionTypes.MOVE_PLAYER, function*(action: MovePlayer) {\n    const player = (yield select(getPlayer)) as Player.Player;\n    const isProcessing = (yield select(getIsProcessingStep)) as boolean;\n\n    if (!isProcessing && !!player) {\n      yield put(\n        requestStep(\n          Step.create(\n            action.direction\n              ? Instruction.move(player.id, action.direction)\n              : Instruction.wait(player.id)\n          )\n        )\n      );\n    }\n  });\n}\n","import {\n  RequestNewGame,\n  ActionTypes,\n  startNewGame,\n  requestNewGame\n} from \"../actions\";\nimport { Maze, Dimension, MazeData, Maybe } from \"../types\";\nimport { call, take, put } from \"redux-saga/effects\";\nimport { Api, Numbers, Arrays } from \"../util\";\nimport {\n  Player,\n  BlindGuardian,\n  Entity,\n  Exit,\n  WanderingHusk\n} from \"../types/entities\";\n\nconst name = Maybe.withDefault(Maybe.of(localStorage.getItem(\"name\")), () => {\n  let n = window.prompt(\"What is your name?\") || \"\";\n  if (n !== \"\") {\n    localStorage.setItem(\"name\", n);\n  }\n  return n !== \"\" ? n : \"?\";\n});\n\nexport function* firstGame() {\n  yield put(\n    requestNewGame({\n      mazeOptions: {\n        dimension: Arrays.randomItem([\n          Dimension.create(10, 10),\n          Dimension.create(15, 15),\n          Dimension.create(15, 15),\n          Dimension.create(15, 15),\n          Dimension.create(15, 15),\n          Dimension.create(20, 20),\n          Dimension.create(25, 15),\n          Dimension.create(15, 20),\n          Dimension.create(30, 5)\n        ]),\n        algorithm: Arrays.randomItem([\n          \"aldous-broder\",\n          \"aldous-broder\",\n          \"aldous-broder\",\n          \"binary-tree\",\n          \"side-winder\"\n        ])\n      }\n    })\n  );\n}\n\nexport function* newGame() {\n  while (true) {\n    try {\n      const { options }: RequestNewGame = yield take(\n        ActionTypes.REQUEST_NEW_GAME\n      );\n      const data: MazeData.MazeData = yield call(\n        Api.maze,\n        options.mazeOptions || {}\n      );\n      const maze: Maze.Maze = Maze.fromMazeData(data);\n\n      yield put(startNewGame(maze, startingEntities(maze)));\n    } catch (e) {\n      console.warn(\"Error initializing new game\");\n      console.error(e);\n    }\n  }\n}\n\nexport const startingEntities = ({ dimension }: Maze.Maze): Entity.Entity[] => {\n  const player = Player.create(name, Dimension.pointAlongEdge(dimension));\n  const exit = Exit.create(Dimension.randomPoint(dimension));\n  const guardians = new Array(Numbers.randomInRange(1, 5))\n    .fill(undefined)\n    .map(_ => BlindGuardian.create(Dimension.randomPoint(dimension)));\n  const husks = new Array(Arrays.randomItem([1, 1, 2, 2, 3]))\n    .fill(undefined)\n    .map(_ => WanderingHusk.create(Dimension.randomPoint(dimension)));\n\n  const enemies = [...guardians, ...husks];\n  return [player, exit, ...enemies];\n};\n","import { spawn, all } from \"redux-saga/effects\";\nimport { stepEngine } from \"./sagas/stepEngine\";\nimport { movePlayer } from \"./sagas/movePlayer\";\nimport { newGame, firstGame } from \"./sagas/newGame\";\n\nconst sagas = [firstGame, newGame, stepEngine, movePlayer];\n\nexport function* root() {\n  yield all(sagas.map(s => spawn(s)));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from \"./index.css\";\nimport App from \"./app/views/App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <div className={styles.app}>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as Saga from \"./saga\";\nimport { State } from \"./state\";\nimport { AppAction } from \"./actions\";\n\nexport const configureStore = (): Store<State, AppAction> => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(Saga.root);\n\n  return store;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GamePad_root__Lay6t\",\"row\":\"GamePad_row__164Sm\",\"block\":\"GamePad_block__l2_xd\",\"button\":\"GamePad_button__3kDFo\",\"wait\":\"GamePad_wait__5DVYu\"};"],"sourceRoot":""}