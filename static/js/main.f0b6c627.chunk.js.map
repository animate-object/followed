{"version":3,"sources":["index.css","app/views/App.css","app/views/Cell.css","app/views/Grid.css","app/actions.ts","app/types/dimension.ts","app/types/mazeData.ts","app/types/cell.ts","app/types/maze.ts","app/types/loadable.ts","app/selectors.ts","app/views/Cell.tsx","app/views/Grid.tsx","app/views/Game.tsx","app/views/App.tsx","app/state.ts","app/reducer.ts","app/util/api.ts","app/saga.ts","index.tsx","app/store.ts"],"names":["module","exports","ActionTypes","create","width","height","fromApi","dimension","base64","bytes","Uint8Array","from","atob","c","charCodeAt","fromByte","byte","walls","n","s","e","w","fromMazeData","grid","r","row","push","Cell","isLoading","l","state","isLoaded","isErrored","loading","loaded","data","errored","getGame","createSelector","game","drawSide","wall","cell","className","styles","root","style","borderTop","borderRight","borderBottom","borderLeft","Grid","map","lineHeight","Game","maze","connect","Loadable","init","newGame","requestNewGame","options","type","REQUEST_NEW_GAME","reducer","State","action","START_NEW_GAME","API_ROOT","Dimension","algorithm","request","fetch","method","mode","headers","body","JSON","stringify","dimensions","then","response","text","MazeData","handleNewGame","take","call","Api","mazeOptions","put","Maze","console","warn","error","sagas","all","spawn","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","Saga","configureStore","app","document","getElementById"],"mappings":"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","file":"static/js/main.f0b6c627.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"index_app__2lpzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ZxxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__2ti8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__xSU_B\"};","import { MazeData, Maze } from \"./types\";\n\nexport enum ActionTypes {\n  REQUEST_NEW_GAME = \"REQUEST_NEW_GAME\",\n  START_NEW_GAME = \"START_NEW_GAME\"\n}\n\ninterface NewGameOptions {\n  mazeOptions?: MazeData.Options;\n}\nexport interface RequestNewGame {\n  type: ActionTypes.REQUEST_NEW_GAME;\n  options: NewGameOptions;\n}\n\nexport interface StartNewGame {\n  type: ActionTypes.START_NEW_GAME;\n  maze: Maze.Maze;\n}\n\nexport type AppAction = RequestNewGame | StartNewGame;\n\nexport const requestNewGame = (\n  options: NewGameOptions = {}\n): RequestNewGame => ({ type: ActionTypes.REQUEST_NEW_GAME, options });\n\nexport const startNewGame = (maze: Maze.Maze): StartNewGame => ({\n  type: ActionTypes.START_NEW_GAME,\n  maze\n});\n","export interface Dimension {\n  width: number;\n  height: number;\n}\n\nexport const create = (width: number = 0, height: number = 0): Dimension => ({\n  width,\n  height\n});\n","import { Dimension } from \".\";\n\nexport interface MazeData {\n  bytes: Uint8Array;\n  dimension: Dimension.Dimension;\n}\n\nexport interface Options {\n  dimension?: Dimension.Dimension;\n  algorithm?: \"aldous-broder\" | \"binary-tree\" | \"side-winder\";\n}\n\nexport const fromApi = (\n  dimension: Dimension.Dimension,\n  base64: string\n): MazeData => {\n  return {\n    bytes: Uint8Array.from(atob(base64), c => c.charCodeAt(0)),\n    dimension: dimension\n  };\n};\n","export interface Cell {\n  walls: Walls;\n}\n\n/**\n * A wall is present to direction n if n === true\n */\nexport interface Walls {\n  n: boolean;\n  e: boolean;\n  s: boolean;\n  w: boolean;\n}\n\nexport const walls = ({ n, e, s, w }: Partial<Walls>): Walls => ({\n  n: n || false,\n  e: e || false,\n  s: s || false,\n  w: w || false\n});\n\nexport const fromByte = (byte: number) => ({\n  walls: walls({\n    n: !((byte & 0b00001000) > 0),\n    s: !((byte & 0b00000100) > 0),\n    e: !((byte & 0b00000010) > 0),\n    w: !((byte & 0b00000001) > 0)\n  })\n});\n","import * as Cell from \"./cell\";\nimport * as MazeData from \"./mazeData\";\nimport { Dimension } from \".\";\n\nexport interface Maze {\n  readonly grid: Grid;\n  readonly dimension: Dimension.Dimension;\n}\n\nexport type Grid = Array<Array<Cell.Cell>>;\n\nexport const fromMazeData = ({ dimension, bytes }: MazeData.MazeData): Maze => {\n  const grid: Grid = [];\n  for (let r = 0; r < dimension.height; r++) {\n    const row = [];\n    for (let c = 0; c < dimension.width; c++) {\n      row.push(Cell.fromByte(bytes[r * dimension.width + c]));\n    }\n    grid.push(row);\n  }\n\n  return {\n    grid,\n    dimension\n  };\n};\n","interface Loaded<T> {\n  state: \"Loaded\";\n  data: T;\n}\n\ninterface Loading {\n  state: \"Loading\";\n}\n\ninterface Errored {\n  state: \"Errored\";\n  e: any;\n}\n\nexport type Loadable<T> = Loaded<T> | Loading | Errored;\n\nexport const isLoading = <T>(l: Loadable<T>): l is Loading =>\n  l.state === \"Loading\";\n\nexport const isLoaded = <T>(l: Loadable<T>): l is Loaded<T> =>\n  l.state === \"Loaded\";\n\nexport const isErrored = <T>(l: Loadable<T>): l is Errored =>\n  l.state === \"Errored\";\n\nexport const loading = <T>(): Loading => ({ state: \"Loading\" });\n\nexport const loaded = <T>(data: T): Loaded<T> => ({\n  state: \"Loaded\",\n  data\n});\n\nexport const errored = <T>(e: any): Errored => ({ state: \"Errored\", e });\n","import { State } from \"./state\";\nimport { createSelector } from \"reselect\";\n\nexport const getState = (state: State): State => state;\n\nexport const getGame = createSelector(getState, state => state.game);\n","import React from \"react\";\nimport { Cell as CellT } from \"../types\";\nimport styles from \"./Cell.css\";\n\ninterface Props {\n  cell: CellT.Cell;\n}\n\nconst IS_WALL = \"0.5px solid black\";\nconst IS_OPEN = \"0.5px transparent\";\nconst drawSide = (wall: boolean) => (wall ? IS_WALL : IS_OPEN);\n\nexport const Cell = ({ cell }: Props): JSX.Element => {\n  const { walls } = cell;\n  return (\n    <span\n      className={styles.root}\n      style={{\n        borderTop: drawSide(walls.n),\n        borderRight: drawSide(walls.e),\n        borderBottom: drawSide(walls.s),\n        borderLeft: drawSide(walls.w),\n        height: \"1rem\",\n        width: \"1rem\"\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { Maze } from \"../types\";\nimport { Cell } from \"./Cell\";\nimport styles from \"./Grid.css\";\n\ninterface Props {\n  grid: Maze.Grid;\n}\n\nexport const Grid = ({ grid }: Props): JSX.Element => {\n  return (\n    <div className={styles.root}>\n      {grid.map(row => (\n        <div style={{ lineHeight: 0 }}>\n          {row.map(cell => (\n            <Cell cell={cell} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { GameData } from \"../state\";\nimport { Grid } from \"./Grid\";\n\ntype Props = GameData;\n\nexport const Game = ({ maze }: Props): JSX.Element => (\n  <>\n    <Grid grid={maze.grid} />\n  </>\n);\n","import React from \"react\";\nimport styles from \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { State, GameData } from \"../state\";\nimport { Loadable } from \"../types\";\nimport { getGame } from \"../selectors\";\nimport { Game } from \"./Game\";\n\ninterface StateProps {\n  game: Loadable.Loadable<GameData>;\n}\n\ninterface DispatchProps {}\n\ntype Props = StateProps & DispatchProps;\n\nconst App = ({ game }: Props) => {\n  return (\n    <div className={styles.root}>\n      {Loadable.isLoading(game) && <span>Loading . . . </span>}\n      {Loadable.isLoaded(game) && <Game {...game.data} />}\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  game: getGame(state)\n});\n\nexport default connect(mapStateToProps)(App);\n","import { Maze } from \"./types\";\nimport { Loadable } from \"./types\";\n\nexport interface GameData {\n  maze: Maze.Maze;\n}\n\nexport interface State {\n  game: Loadable.Loadable<GameData>;\n}\n\nexport const create = (init = {}): State => ({\n  game: Loadable.loading(),\n  ...init\n});\n\nexport const requestingNewGame = (state: State): State => ({\n  ...state,\n  game: Loadable.loading()\n});\n\nexport const newGame = (state: State, maze: Maze.Maze): State => ({\n  ...state,\n  game: Loadable.loaded({ maze })\n});\n","import * as State from \"./state\";\nimport { AppAction, ActionTypes } from \"./actions\";\n\nexport const reducer = (\n  state: State.State = State.create(),\n  action: AppAction\n): State.State => {\n  switch (action.type) {\n    case ActionTypes.START_NEW_GAME:\n      return State.newGame(state, action.maze);\n    case ActionTypes.REQUEST_NEW_GAME:\n    default:\n      return state;\n  }\n};\n","import { Dimension, MazeData } from \"../types\";\n\nconst API_ROOT = \"https://fv9o21r19a.execute-api.us-east-1.amazonaws.com/dev\";\n\nexport const maze = ({\n  dimension = Dimension.create(10, 10),\n  algorithm = \"aldous-broder\"\n}: MazeData.Options = {}): Promise<MazeData.MazeData> => {\n  const request = fetch(`${API_ROOT}`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({ dimensions: dimension, algorithm })\n  });\n  return request\n    .then(response => response.text())\n    .then(base64 => MazeData.fromApi(dimension, base64));\n};\n","import { call, spawn, all, take, put } from \"redux-saga/effects\";\nimport { Api } from \"./util\";\nimport { Maze, Dimension } from \"./types\";\nimport {\n  ActionTypes,\n  RequestNewGame,\n  startNewGame,\n  requestNewGame\n} from \"./actions\";\n\nfunction* handleNewGame() {\n  while (true) {\n    try {\n      const { options }: RequestNewGame = yield take(\n        ActionTypes.REQUEST_NEW_GAME\n      );\n      const data = yield call(Api.maze, options.mazeOptions || {});\n      yield put(startNewGame(Maze.fromMazeData(data)));\n    } catch (e) {\n      console.warn(\"Error initializing new game\");\n      console.error(e);\n    }\n  }\n}\n\nconst sagas = [handleNewGame];\n\nexport function* root() {\n  yield all(sagas.map(s => spawn(s)));\n  yield put(\n    requestNewGame({\n      mazeOptions: {\n        dimension: Dimension.create(20, 20),\n        algorithm: \"aldous-broder\"\n      }\n    })\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from \"./index.css\";\nimport App from \"./app/views/App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <div className={styles.app}>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as Saga from \"./saga\";\nimport { State } from \"./state\";\nimport { AppAction } from \"./actions\";\n\nexport const configureStore = (): Store<State, AppAction> => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(Saga.root);\n\n  return store;\n};\n"],"sourceRoot":""}