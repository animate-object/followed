{"version":3,"sources":["app/views/Cell.css","app/views/Grid.css","index.css","app/views/App.css","app/views/Entity.css","app/types/instructions/baseInstruction.ts","app/util/api.ts","app/util/arrays.ts","app/util/numbers.ts","app/util/camera.ts","app/types/dimension.ts","app/types/mazeData.ts","app/types/cell.ts","app/types/maze.ts","app/types/loadable.ts","app/types/id.ts","app/types/entities/player.ts","app/types/entities/entity.ts","app/types/entities/blindGuardian.ts","app/types/entities/exit.ts","app/types/point.ts","app/types/step.ts","app/types/game/entityData.ts","app/types/game/gameData.ts","app/types/instructions/move.ts","app/types/direction.ts","app/types/instructions/update.ts","app/types/instructions/wait.ts","app/types/instructions/instruction.ts","app/actions.ts","app/types/result.ts","app/types/maybe.ts","app/selectors.ts","app/views/Entity.tsx","app/views/Cell.tsx","app/views/Grid.tsx","app/views/GamePad.tsx","app/views/KeyPad.tsx","app/views/Game.tsx","app/views/App.tsx","app/state.ts","app/reducer.ts","app/sagas/stepEngine.ts","app/sagas/movePlayer.ts","app/sagas/newGame.ts","app/saga.ts","index.tsx","app/store.ts","app/views/GamePad.css"],"names":["module","exports","InstructionType","API_ROOT","maze","dimension","Dimension","create","algorithm","request","fetch","method","mode","headers","body","JSON","stringify","dimensions","then","response","text","base64","MazeData","fromApi","nOf","n","t","Array","fill","sorted","unsorted","sortFn","sort","nonNull","array","filter","randomItem","Math","floor","random","length","randomInRange","start","end","centerOnPoint","grid","point","radius","xMin","x","xMax","yMin","y","yMax","windowedGrid","row","push","Maybe","map","width","height","area","d","randomPoint","Point","fromIndex","pointAlongEdge","northOrSouth","Numbers","bytes","Uint8Array","from","atob","c","charCodeAt","fromByte","byte","walls","s","e","w","fromMazeData","r","Cell","canWalk","direction","Direction","NORTH","EAST","SOUTH","WEST","isLoading","l","state","isLoaded","isErrored","loading","loaded","data","errored","f","v4","name","position","id","ID","type","getColor","getDisplayName","BlindGuardian","DISPLAY","generateAiInstructions","gameData","next","heading","options","all","Maze","adjacent","inverse","includes","Arrays","Instruction","update","move","toIndex","idx","neighbor","p","neighbors","equals","a","b","instructions","fromEntities","entities","entityMap","reduce","m","positionMap","playerEntityId","find","typeMap","entitiesAtPoint","moveEntity","entity","oldIdx","newIdx","newEntity","eId","updateEntity","updated","entitiesCrossed","last","lastA","lastB","nextA","nextB","neighborsCrossedByEntity","concat","entityData","displayGrid","rows","rowIdx","cells","cell","cellIdx","occupants","EntityData","generateAllAIInstructions","Object","keys","k","i","Entity","entityId","MOVE","payload","UPDATE","wait","WAIT","validate","instruction","Result","ok","undefined","err","Move","validateAll","validated","isOk","apply","Update","_","Wait","console","warn","error","applyAll","applied","ActionTypes","msg","isErr","of","value","none","withDefault","maybe","default_","ifPresent","getState","getGame","createSelector","game","getDisplayGrid","Loadable","GameData","getIsProcessingStep","stepId","getPlayer","getWindowedDisplayGrid","player","Camera","className","styles","root","style","backgroundColor","EntityT","drawSide","wall","borderTop","borderRight","borderBottom","borderLeft","o","EmptyCell","classNames","empty","Grid","key","maybeCell","GamePad","onMove","block","button","onClick","KeyPad","handleKeyDown","event","props","disabled","window","addEventListener","this","removeEventListener","React","Game","processingUpdates","requestNewGame","REQUEST_NEW_GAME","startNewGame","START_NEW_GAME","abortStep","ABORT_STEP","completeStep","COMPLETE_STEP","connect","dispatch","MOVE_PLAYER","init","requestingNewGame","newGame","requestStep","ifGameIsLoaded","abortSTep","reducer","State","action","REQUEST_STEP","step","stepEngine","processCollisions","take","select","call","stepValidation","put","aiInstructions","collisions","confirm","location","reload","movePlayer","takeEvery","Step","localStorage","getItem","prompt","setItem","Api","mazeOptions","startingEntities","Player","exit","Exit","guardians","sagas","spawn","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","Saga","configureStore","app","document","getElementById"],"mappings":"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","file":"static/js/main.192b763a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__2ti8K\",\"empty\":\"Cell_empty__1ByI9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__xSU_B\",\"row\":\"Grid_row__1rWaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"index_app__2lpzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ZxxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Entity_root__MaGTf\"};","import { ID } from \"..\";\n\nexport interface BaseInstruction {\n  entityId: ID.ID;\n  type: InstructionType;\n}\n\nexport enum InstructionType {\n  MOVE = \"MOVE\",\n  UPDATE = \"UPDATE\",\n  WAIT = \"WAIT\"\n}\n","import { Dimension, MazeData } from \"../types\";\n\nconst API_ROOT = \"https://fv9o21r19a.execute-api.us-east-1.amazonaws.com/dev\";\n\nexport const maze = ({\n  dimension = Dimension.create(10, 10),\n  algorithm = \"aldous-broder\"\n}: MazeData.Options = {}): Promise<MazeData.MazeData> => {\n  const request = fetch(`${API_ROOT}`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({ dimensions: dimension, algorithm })\n  });\n  return request\n    .then(response => response.text())\n    .then(base64 => MazeData.fromApi(dimension, base64));\n};\n","import { Maybe } from \"../types\";\n\nexport const nOf = <T>(n: number, t: T): Array<T> => new Array(n).fill(t);\n\nexport const sorted = <T>(\n  unsorted: Array<T>,\n  sortFn?: (a: T, b: T) => number\n): Array<T> => {\n  const sorted = [...unsorted];\n  sorted.sort(sortFn);\n  return sorted;\n};\n\nexport const nonNull = <T>(array: Array<Maybe.Maybe<T>>): Array<T> =>\n  array.filter(t => t != null) as Array<T>;\n\nexport const randomItem = <T>(array: Array<T>): T =>\n  array[Math.floor(Math.random() * array.length)];\n","export const randomInRange = (start: number, end: number) => {\n  return start + Math.floor(Math.random() * (end - start - 1));\n};\n","import { DisplayGrid, CellAndOccupants } from \"../types/game/gameData\";\nimport { Point, Maybe } from \"../types\";\n\nexport type WindowedGrid = Array<Array<Maybe.Maybe<CellAndOccupants>>>;\n\nexport const centerOnPoint = (\n  grid: DisplayGrid,\n  point: Point.Point,\n  radius: number\n): WindowedGrid => {\n  const xMin = point.x - radius;\n  const xMax = point.x + radius + 1;\n  const yMin = point.y - radius;\n  const yMax = point.y + radius + 1;\n\n  const windowedGrid: WindowedGrid = [];\n\n  for (let y = yMin; y < yMax; y++) {\n    const row = [];\n    for (let x = xMin; x < xMax; x++) {\n      row.push(Maybe.map(row => row[x], grid[y]));\n    }\n    windowedGrid.push(row);\n  }\n\n  return windowedGrid;\n};\n","import { Point } from \".\";\nimport { Numbers } from \"../util\";\n\nexport interface Dimension {\n  width: number;\n  height: number;\n}\n\nexport const create = (width: number = 0, height: number = 0): Dimension => ({\n  width,\n  height\n});\n\nexport const area = (d: Dimension): number => d.width * d.height;\n\nexport const randomPoint = (d: Dimension): Point.Point =>\n  Point.fromIndex(Math.floor(Math.random() * area(d)), d);\n\nexport const pointAlongEdge = (d: Dimension): Point.Point => {\n  const northOrSouth = Math.random() > 0.5;\n\n  return Point.create(\n    northOrSouth\n      ? Numbers.randomInRange(0, d.width)\n      : Math.random() > 0.5\n      ? 0\n      : d.width - 1,\n    !northOrSouth\n      ? Numbers.randomInRange(0, d.height)\n      : Math.random() > 0.5\n      ? 0\n      : d.height - 1\n  );\n};\n","import { Dimension } from \".\";\n\nexport interface MazeData {\n  bytes: Uint8Array;\n  dimension: Dimension.Dimension;\n}\n\nexport interface Options {\n  dimension?: Dimension.Dimension;\n  algorithm?: \"aldous-broder\" | \"binary-tree\" | \"side-winder\";\n}\n\nexport const fromApi = (\n  dimension: Dimension.Dimension,\n  base64: string\n): MazeData => {\n  return {\n    bytes: Uint8Array.from(atob(base64), c => c.charCodeAt(0)),\n    dimension: dimension\n  };\n};\n","import { Direction } from \".\";\n\nexport interface Cell {\n  walls: Walls;\n}\n\n/**\n * A wall is present to direction n if n === true\n */\nexport interface Walls {\n  n: boolean;\n  e: boolean;\n  s: boolean;\n  w: boolean;\n}\n\nexport const walls = ({ n, e, s, w }: Partial<Walls>): Walls => ({\n  n: n || false,\n  e: e || false,\n  s: s || false,\n  w: w || false\n});\n\nexport const fromByte = (byte: number) => ({\n  walls: walls({\n    n: !((byte & 0b00001000) > 0),\n    s: !((byte & 0b00000100) > 0),\n    e: !((byte & 0b00000010) > 0),\n    w: !((byte & 0b00000001) > 0)\n  })\n});\n\nexport const hasWall = (\n  { walls }: Cell,\n  direction: Direction.Direction\n): boolean => {\n  switch (direction) {\n    case Direction.Direction.NORTH:\n      return walls.n;\n    case Direction.Direction.EAST:\n      return walls.e;\n    case Direction.Direction.SOUTH:\n      return walls.s;\n    case Direction.Direction.WEST:\n      return walls.w;\n  }\n};\n","import * as Cell from \"./cell\";\nimport * as MazeData from \"./mazeData\";\nimport { Dimension, Point, Direction } from \".\";\n\nexport interface Maze {\n  readonly grid: Grid;\n  readonly dimension: Dimension.Dimension;\n}\n\nexport type Grid = Array<Array<Cell.Cell>>;\n\nexport const fromMazeData = ({ dimension, bytes }: MazeData.MazeData): Maze => {\n  const grid: Grid = [];\n  for (let r = 0; r < dimension.height; r++) {\n    const row = [];\n    for (let c = 0; c < dimension.width; c++) {\n      row.push(Cell.fromByte(bytes[r * dimension.width + c]));\n    }\n    grid.push(row);\n  }\n\n  return {\n    grid,\n    dimension\n  };\n};\n\nexport const canWalk = (\n  maze: Maze,\n  { x, y }: Point.Point,\n  direction: Direction.Direction\n): boolean => {\n  const cell = maze.grid[y][x];\n  return !Cell.hasWall(cell, direction);\n};\n","interface Loaded<T> {\n  state: \"Loaded\";\n  data: T;\n}\n\ninterface Loading {\n  state: \"Loading\";\n}\n\ninterface Errored {\n  state: \"Errored\";\n  e: any;\n}\n\nexport type Loadable<T> = Loaded<T> | Loading | Errored;\n\nexport const isLoading = <T>(l: Loadable<T>): l is Loading =>\n  l.state === \"Loading\";\n\nexport const isLoaded = <T>(l: Loadable<T>): l is Loaded<T> =>\n  l.state === \"Loaded\";\n\nexport const isErrored = <T>(l: Loadable<T>): l is Errored =>\n  l.state === \"Errored\";\n\nexport const loading = <T>(): Loading => ({ state: \"Loading\" });\n\nexport const loaded = <T>(data: T): Loaded<T> => ({\n  state: \"Loaded\",\n  data\n});\n\nexport const errored = <T>(e: any): Errored => ({ state: \"Errored\", e });\n\nexport const map = <T, R>(f: (t: T) => R, l: Loadable<T>): Loadable<R> =>\n  isLoaded(l) ? loaded(f(l.data)) : l;\n","import { v4 } from \"uuid\";\n\nexport type ID = string;\n\nexport const create = (): ID => v4();\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\n\nexport interface Player extends BaseEntity.BaseEntity {\n  type: \"player\";\n  name: string;\n}\n\nexport const create = (\n  name: string,\n  position: Point.Point = Point.create()\n): Player => ({ id: ID.create(), name, position, type: \"player\" });\n","import { GameData } from \"../game\";\nimport { Instruction } from \"..\";\nimport { BlindGuardian, Player, Exit } from \".\";\n\nexport type Entity = Player.Player | BlindGuardian.BlindGuardian | Exit.Exit;\n\nexport const getColor = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return \"var(--blue)\";\n    case \"exit\":\n      return \"var(--green)\";\n    case \"blind-guardian\":\n      return \"transparent\";\n    default:\n      return \"var(--red)\";\n  }\n};\n\nexport const getDisplayName = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return e.name[0];\n    case \"blind-guardian\":\n      return BlindGuardian.DISPLAY;\n    default:\n      return e.type[0];\n  }\n};\n\nexport const generateAiInstructions = (\n  e: Entity,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  switch (e.type) {\n    case \"blind-guardian\":\n      return BlindGuardian.next(e, gameData);\n    default:\n      return [];\n  }\n};\n","import { BaseEntity } from \".\";\nimport { Point, ID, Direction, Instruction, Maze } from \"..\";\nimport { GameData } from \"../game\";\nimport { Arrays } from \"../../util\";\n\n/**\n * The blind guardian is a sightless, senseless automaton\n */\nexport interface BlindGuardian extends BaseEntity.BaseEntity {\n  type: \"blind-guardian\";\n  heading: Direction.Direction;\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): BlindGuardian => ({\n  type: \"blind-guardian\",\n  position,\n  id: ID.create(),\n  heading: Direction.Direction.NORTH\n});\n\nexport const next = (\n  e: BlindGuardian,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const options = Direction.all().filter(d =>\n    Maze.canWalk(gameData.maze, e.position, d)\n  );\n\n  const adjacent = options.filter(d => d !== Direction.inverse(e.heading));\n\n  let direction: Direction.Direction;\n\n  if (options.includes(e.heading) && Math.random() < 0.75) {\n    direction = e.heading;\n  } else if (Math.random() < 0.75 && adjacent.length > 0) {\n    direction = Arrays.randomItem(adjacent);\n  } else {\n    direction = options[0];\n  }\n\n  return [\n    Instruction.update({ ...e, heading: direction }),\n    Instruction.move(e.id, direction)\n  ];\n};\n\nexport const DISPLAY = \"🗿\";\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\n\nexport interface Exit extends BaseEntity.BaseEntity {\n  type: \"exit\";\n}\n\nexport const create = (position: Point.Point): Exit => ({\n  position,\n  id: ID.create(),\n  type: \"exit\"\n});\n","import { Dimension, Point, Direction } from \".\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport const create = (x: number = 0, y: number = 0): Point => ({ x, y });\n\nexport const toIndex = (\n  { x, y }: Point,\n  { width }: Dimension.Dimension\n): number => y * width + x;\n\nexport const fromIndex = (idx: number, { width }: Dimension.Dimension): Point =>\n  create(Math.floor(idx / width), idx % width);\n\nexport const neighbor = (p: Point, d: Direction.Direction): Point => {\n  switch (d) {\n    case \"NORTH\":\n      return Point.create(p.x, p.y - 1);\n    case \"SOUTH\":\n      return Point.create(p.x, p.y + 1);\n    case \"EAST\":\n      return Point.create(p.x + 1, p.y);\n    case \"WEST\":\n    default:\n      return Point.create(p.x - 1, p.y);\n  }\n};\n\nexport const neighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  Direction.all()\n    .map(d => neighbor(p, d))\n    .filter(p => p.x >= 0 && p.y >= 0 && p.x < d.width && p.y < d.height);\n\nexport const equals = (a: Point.Point, b: Point.Point): boolean =>\n  a.x === b.x && a.y === b.y;\n","import { Instruction, ID } from \".\";\n\nexport interface Step {\n  instructions: Instruction.Instruction[];\n  id: ID.ID;\n}\n\nexport const create = (...instructions: Instruction.Instruction[]): Step => ({\n  instructions,\n  id: ID.create()\n});\n","import { ID, Dimension, Point, Maybe } from \"..\";\nimport { Entity } from \"../entities\";\n\nexport interface EntityData {\n  entityMap: Record<ID.ID, Entity.Entity>;\n  positionMap: Record<number, ID.ID[]>;\n  playerEntityId: Maybe.Maybe<ID.ID>;\n  typeMap: Record<string, ID.ID[]>;\n}\n\nexport const fromEntities = (\n  entities: Entity.Entity[],\n  dimension: Dimension.Dimension\n): EntityData => ({\n  entityMap: entities.reduce((m: Record<ID.ID, Entity.Entity>, e) => {\n    m[e.id] = e;\n    return m;\n  }, {}),\n  positionMap: entities.reduce((m: Record<number, ID.ID[]>, e) => {\n    const idx = Point.toIndex(e.position, dimension);\n    m[idx] = m[idx] ? [...m[idx], e.id] : [e.id];\n    return m;\n  }, {}),\n  playerEntityId: Maybe.map(\n    p => p.id,\n    entities.find(e => e.type === \"player\")\n  ),\n  typeMap: entities.reduce(\n    (m: Record<string, ID.ID[]>, e) => ({\n      ...m,\n      [e.type]: m[e.id] ? [...m[e.id], e.id] : [e.id]\n    }),\n    {}\n  )\n});\n\nexport const entitiesAtPoint = (\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const idx = Point.toIndex(p, d);\n  const ids = data.positionMap[idx] || [];\n  return ids.map(id => data.entityMap[id]);\n};\n\nexport const moveEntity = (\n  id: ID.ID,\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): EntityData => {\n  const entity = data.entityMap[id];\n  if (entity != null) {\n    const oldIdx = Point.toIndex(entity.position, d);\n    const newIdx = Point.toIndex(p, d);\n    const newEntity = { ...entity, position: p };\n    return {\n      ...data,\n      entityMap: { ...data.entityMap, [id]: newEntity },\n      positionMap: {\n        ...data.positionMap,\n        [oldIdx]: [\n          ...(data.positionMap[oldIdx] || []).filter(eId => eId !== id)\n        ],\n        [newIdx]: [...(data.positionMap[newIdx] || []), id]\n      }\n    };\n  } else {\n    return data;\n  }\n};\n\n// might need to augment to handle type change\nexport const updateEntity = (\n  updated: Entity.Entity,\n  data: EntityData\n): EntityData => ({\n  ...data,\n  entityMap: { ...data.entityMap, [updated.id]: updated }\n});\n\nexport const entitiesCrossed = (\n  last: EntityData,\n  next: EntityData,\n  a: ID.ID,\n  b: ID.ID\n): boolean => {\n  const lastA = last.entityMap[a];\n  const lastB = last.entityMap[b];\n  const nextA = next.entityMap[a];\n  const nextB = next.entityMap[b];\n\n  return (\n    Point.equals(nextA.position, lastB.position) &&\n    Point.equals(nextB.position, lastA.position)\n  );\n};\n\nexport const neighborsCrossedByEntity = (\n  last: EntityData,\n  next: EntityData,\n  e: ID.ID,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const neighborIndices = Point.neighbors(\n    next.entityMap[e].position,\n    d\n  ).map(p => Point.toIndex(p, d));\n\n  const neighborEntities = neighborIndices.reduce(\n    (entities: ID.ID[], idx) => entities.concat(next.positionMap[idx] || []),\n    []\n  );\n\n  return neighborEntities\n    .filter(id => entitiesCrossed(last, next, e, id))\n    .map(id => next.entityMap[id]);\n};\n","import { Maze, Cell, Point, Instruction } from \"..\";\nimport { EntityData, GameData } from \".\";\nimport { Entity } from \"../entities\";\n\nexport interface GameData {\n  maze: Maze.Maze;\n  entityData: EntityData.EntityData;\n}\n\nexport const create = (\n  maze: Maze.Maze,\n  entityData: EntityData.EntityData\n): GameData => ({\n  maze,\n  entityData\n});\n\nexport interface CellAndOccupants {\n  cell: Cell.Cell;\n  occupants: Entity.Entity[];\n}\n\nexport type DisplayGrid = Array<Array<CellAndOccupants>>;\n\nexport const displayGrid = ({ maze, entityData }: GameData): DisplayGrid =>\n  maze.grid.reduce(\n    (rows: CellAndOccupants[][], row, rowIdx) => [\n      ...rows,\n      row.reduce(\n        (cells: CellAndOccupants[], cell, cellIdx) =>\n          cells.concat({\n            cell,\n            occupants: EntityData.entitiesAtPoint(\n              entityData,\n              Point.create(cellIdx, rowIdx),\n              maze.dimension\n            )\n          }),\n        []\n      )\n    ],\n    []\n  );\n\nexport const generateAllAIInstructions = (\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const aiEntities = Object.keys(gameData.entityData.entityMap)\n    .map(k => gameData.entityData.entityMap[k])\n    .filter(e => e.type !== \"player\");\n\n  return aiEntities.reduce(\n    (i: Instruction.Instruction[], e) =>\n      i.concat(Entity.generateAiInstructions(e, gameData)),\n    []\n  );\n};\n","import { Direction, ID, Result, Maze, Point } from \"..\";\nimport { GameData, EntityData } from \"../game\";\nimport { BaseInstruction, InstructionType } from \"./baseInstruction\";\n\nexport interface MoveInstruction extends BaseInstruction {\n  type: InstructionType.MOVE;\n  payload: {\n    direction: Direction.Direction;\n  };\n}\n\nexport const move = (\n  entityId: ID.ID,\n  direction: Direction.Direction\n): MoveInstruction => ({\n  type: InstructionType.MOVE,\n  entityId,\n  payload: { direction }\n});\n\nexport const validate = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  Maze.canWalk(\n    gameData.maze,\n    gameData.entityData.entityMap[move.entityId].position,\n    move.payload.direction\n  )\n    ? Result.ok(undefined)\n    : Result.err(\"way is blocked\");\n\nexport const apply = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.moveEntity(\n    move.entityId,\n    gameData.entityData,\n    Point.neighbor(\n      gameData.entityData.entityMap[move.entityId].position,\n      move.payload.direction\n    ),\n    gameData.maze.dimension\n  )\n});\n","export enum Direction {\n  NORTH = \"NORTH\",\n  SOUTH = \"SOUTH\",\n  EAST = \"EAST\",\n  WEST = \"WEST\"\n}\n\nexport const all = (): Direction[] => [\n  Direction.NORTH,\n  Direction.SOUTH,\n  Direction.EAST,\n  Direction.WEST\n];\n\nexport const inverse = (d: Direction): Direction => {\n  switch (d) {\n    case Direction.NORTH:\n      return Direction.SOUTH;\n    case Direction.SOUTH:\n      return Direction.NORTH;\n    case Direction.EAST:\n      return Direction.WEST;\n    case Direction.WEST:\n      return Direction.EAST;\n  }\n};\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Entity } from \"../entities\";\nimport { GameData, EntityData } from \"../game\";\n\nexport interface UpdateInstruction extends BaseInstruction {\n  type: InstructionType.UPDATE;\n  payload: {\n    updated: Entity.Entity;\n  };\n}\n\nexport const update = (updated: Entity.Entity): UpdateInstruction => ({\n  type: InstructionType.UPDATE,\n  entityId: updated.id,\n  payload: { updated }\n});\n\nexport const apply = (\n  update: UpdateInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.updateEntity(\n    update.payload.updated,\n    gameData.entityData\n  )\n});\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { ID } from \"..\";\nimport { GameData } from \"../game\";\n\nexport interface WaitInstruction extends BaseInstruction {\n  type: InstructionType.WAIT;\n}\n\nexport const wait = (entityId: ID.ID): WaitInstruction => ({\n  type: InstructionType.WAIT,\n  entityId\n});\n\nexport const apply = (\n  _: WaitInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({ ...gameData });\n","import { Result, Instruction } from \"..\";\nimport * as Move from \"./move\";\nimport * as Update from \"./update\";\nimport * as Wait from \"./wait\";\nimport { GameData } from \"../game\";\nimport { InstructionType } from \"./baseInstruction\";\n\nexport type Instruction =\n  | Move.MoveInstruction\n  | Update.UpdateInstruction\n  | Wait.WaitInstruction;\n\nexport const validate = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<void> => {\n  switch (instruction.type) {\n    case InstructionType.MOVE:\n      return Move.validate(instruction, gameData);\n    case InstructionType.WAIT:\n      return Result.ok(undefined);\n    default:\n      return Result.err(`Unkown instruction of type ${instruction.type}`);\n  }\n};\n\nexport const validateAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  instructions.reduce(\n    (validated: Result.Result<void>, i) =>\n      Result.isOk(validated) ? validate(i, gameData) : validated,\n    Result.ok(undefined)\n  );\n\nexport const apply = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> => {\n  try {\n    switch (instruction.type) {\n      case InstructionType.MOVE:\n        return Result.ok(Move.apply(instruction, gameData));\n      case InstructionType.UPDATE:\n        return Result.ok(Update.apply(instruction, gameData));\n      case InstructionType.WAIT:\n        return Result.ok(Wait.apply(instruction, gameData));\n    }\n  } catch (e) {\n    console.warn(\"Error applying instruction\", instruction);\n    console.error(e);\n    return Result.err(\"Error applying instructions\");\n  }\n};\n\nexport const applyAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> =>\n  instructions.reduce(\n    (applied: Result.Result<GameData.GameData>, i) =>\n      Result.isOk(applied) ? apply(i, applied.data) : applied,\n    Result.ok(gameData)\n  );\n","import { MazeData, Maze, Step, ID, Direction } from \"./types\";\nimport { Entity } from \"./types/entities\";\nimport { GameData } from \"./types/game\";\n\nexport enum ActionTypes {\n  REQUEST_NEW_GAME = \"REQUEST_NEW_GAME\",\n  START_NEW_GAME = \"START_NEW_GAME\",\n\n  REQUEST_STEP = \"REQUEST_STEP\",\n  COMPLETE_STEP = \"COMPLETE_STEP\",\n  ABORT_STEP = \"ABORT_STEP\",\n\n  MOVE_PLAYER = \"MOVE_PLAYER\"\n}\n\ninterface NewGameOptions {\n  mazeOptions?: MazeData.Options;\n}\nexport interface RequestNewGame {\n  type: ActionTypes.REQUEST_NEW_GAME;\n  options: NewGameOptions;\n}\n\nexport interface StartNewGame {\n  type: ActionTypes.START_NEW_GAME;\n  maze: Maze.Maze;\n  entities: Entity.Entity[];\n}\n\nexport interface RequestStep {\n  type: ActionTypes.REQUEST_STEP;\n  step: Step.Step;\n}\n\nexport interface AbortStep {\n  type: ActionTypes.ABORT_STEP;\n  stepId: ID.ID;\n}\n\nexport interface CompleteStep {\n  type: ActionTypes.COMPLETE_STEP;\n  stepId: ID.ID;\n  gameData: GameData.GameData;\n}\n\nexport interface MovePlayer {\n  type: ActionTypes.MOVE_PLAYER;\n  direction?: Direction.Direction;\n}\n\nexport type AppAction =\n  | RequestNewGame\n  | StartNewGame\n  | RequestStep\n  | AbortStep\n  | CompleteStep\n  | MovePlayer;\n\nexport const requestNewGame = (\n  options: NewGameOptions = {}\n): RequestNewGame => ({ type: ActionTypes.REQUEST_NEW_GAME, options });\n\nexport const startNewGame = (\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): StartNewGame => ({\n  type: ActionTypes.START_NEW_GAME,\n  maze,\n  entities\n});\n\nexport const requestStep = (step: Step.Step): RequestStep => ({\n  type: ActionTypes.REQUEST_STEP,\n  step\n});\n\nexport const abortStep = (stepId: ID.ID): AbortStep => ({\n  type: ActionTypes.ABORT_STEP,\n  stepId\n});\n\nexport const completeStep = (\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): CompleteStep => ({\n  type: ActionTypes.COMPLETE_STEP,\n  stepId,\n  gameData\n});\n\nexport const movePlayer = (direction?: Direction.Direction): MovePlayer => ({\n  type: ActionTypes.MOVE_PLAYER,\n  direction\n});\n","export interface Err {\n  type: \"Error\";\n  msg: string;\n}\n\nexport interface Ok<T> {\n  type: \"Ok\";\n  data: T;\n}\n\nexport type Result<T> = Ok<T> | Err;\n\nexport const ok = <T>(data: T): Ok<T> => ({ type: \"Ok\", data });\n\nexport const err = (msg: string): Err => ({ type: \"Error\", msg });\n\nexport const isErr = <T>(r: Result<T>): r is Err => r.type === \"Error\";\n\nexport const isOk = <T>(r: Result<T>): r is Ok<T> => r.type === \"Ok\";\n\nexport const map = <T, R>(f: (t: T) => R, r: Result<T>): Result<R> =>\n  isOk(r) ? ok(f(r.data)) : r;\n","export type Maybe<T> = T | undefined | null;\n\nexport const of = <T>(value: T | undefined | null): Maybe<T> => value;\nexport const none = <T>(): Maybe<T> => undefined;\n\ntype Supplier<T> = () => T;\n\nexport const withDefault = <T>(maybe: Maybe<T>, default_: T | Supplier<T>): T =>\n  maybe != null\n    ? maybe\n    : typeof default_ === \"function\"\n    ? (default_ as Supplier<T>)()\n    : default_;\n\nexport const map = <T, R>(f: (t: T) => R, maybe: Maybe<T>): Maybe<R> =>\n  maybe != null ? f(maybe) : undefined;\n\nexport const ifPresent = <T>(f: (t: T) => void, maybe: Maybe<T>): void => {\n  if (maybe) {\n    f(maybe);\n  }\n};\n","import { State } from \"./state\";\nimport { createSelector } from \"reselect\";\nimport { Loadable, Maybe } from \"./types\";\nimport { GameData } from \"./types/game\";\nimport { Camera } from \"./util\";\n\nexport const getState = (state: State): State => state;\n\nexport const getGame = createSelector(getState, state => state.game);\n\nexport const getDisplayGrid = createSelector(getGame, game =>\n  Loadable.map(GameData.displayGrid, game)\n);\n\nexport const getIsProcessingStep = createSelector(\n  getState,\n  state => state.stepId != null\n);\n\nexport const getPlayer = createSelector(getGame, game =>\n  Loadable.isLoaded(game)\n    ? Maybe.map(\n        id => game.data.entityData.entityMap[id],\n        game.data.entityData.playerEntityId\n      )\n    : undefined\n);\n\nconst USE_WINDOW = true;\n\nexport const getWindowedDisplayGrid = createSelector(\n  getDisplayGrid,\n  getPlayer,\n  (displayGrid, player) =>\n    Loadable.map(\n      grid =>\n        player != null ? Camera.centerOnPoint(grid, player.position, 3) : [],\n      displayGrid\n    )\n);\n","import React from \"react\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport styles from \"./Entity.css\";\n\nexport const Entity = (entity: EntityT.Entity): JSX.Element => (\n  <div\n    className={styles.root}\n    style={{ backgroundColor: EntityT.getColor(entity) }}\n  >\n    {EntityT.getDisplayName(entity)}\n  </div>\n);\n","import React from \"react\";\nimport { Cell as CellT, Maybe } from \"../types\";\nimport styles from \"./Cell.css\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport { Entity } from \"./Entity\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  cell: CellT.Cell;\n  occupants: EntityT.Entity[];\n}\n\nconst IS_WALL = \"0.5px solid black\";\nconst IS_OPEN = \"0.5px transparent\";\nconst drawSide = (wall: boolean) => (wall ? IS_WALL : IS_OPEN);\n\nexport const Cell = ({ cell, occupants }: Props): JSX.Element => {\n  const { walls } = cell;\n  return (\n    <div\n      className={styles.root}\n      style={{\n        borderTop: drawSide(walls.n),\n        borderRight: drawSide(walls.e),\n        borderBottom: drawSide(walls.s),\n        borderLeft: drawSide(walls.w)\n      }}\n    >\n      {Maybe.map(\n        o => (\n          <Entity {...o} />\n        ),\n        occupants[0]\n      )}\n    </div>\n  );\n};\n\nexport const EmptyCell = () => (\n  <div className={classNames(styles.empty, styles.root)}></div>\n);\n","import React from \"react\";\nimport { Cell, EmptyCell } from \"./Cell\";\nimport styles from \"./Grid.css\";\nimport { Camera } from \"../util\";\nimport { Maybe } from \"../types\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n}\n\nexport const Grid = ({ grid }: Props): JSX.Element => {\n  return (\n    <div className={styles.root}>\n      {grid.map((row, idx) => (\n        <div key={idx} className={styles.row}>\n          {row.map((maybeCell, idx) =>\n            Maybe.withDefault(\n              Maybe.map(\n                cell => (\n                  <Cell key={idx} cell={cell.cell} occupants={cell.occupants} />\n                ),\n                maybeCell\n              ),\n              <EmptyCell />\n            )\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Effect, Direction } from \"../types\";\nimport styles from \"./GamePad.css\";\nimport classNames from \"classnames\";\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = DispatchProps;\n\nexport const GamePad = ({ onMove }: Props): JSX.Element => (\n  <div className={styles.root}>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.NORTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n    <div className={styles.row}>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.WEST)}\n      ></button>\n      <button\n        className={classNames(styles.block, styles.button, styles.wait)}\n        onClick={() => onMove(undefined)}\n      ></button>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.EAST)}\n      ></button>\n    </div>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.SOUTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { Effect, Direction } from \"../types\";\n\ninterface Props {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  disabled: boolean;\n}\n\nexport class KeyPad extends React.PureComponent<Props> {\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    return <></>;\n  }\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    if (!this.props.disabled) {\n      if (event.key === \"ArrowUp\" || event.key === \"w\") {\n        this.props.onMove(Direction.Direction.NORTH);\n      } else if (event.key === \"ArrowRight\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.EAST);\n      } else if (event.key === \"ArrowDown\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.SOUTH);\n      } else if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n        this.props.onMove(Direction.Direction.WEST);\n      } else if (event.key === \" \") {\n        this.props.onMove(undefined);\n      }\n    }\n  };\n}\n","import * as React from \"react\";\nimport { Grid } from \"./Grid\";\nimport { GamePad } from \"./GamePad\";\nimport { Effect, Direction } from \"../types\";\nimport { KeyPad } from \"./KeyPad\";\nimport { Camera } from \"../util\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  processingUpdates: boolean;\n}\n\nexport const Game = ({\n  grid,\n  onMove,\n  processingUpdates\n}: Props): JSX.Element => (\n  <>\n    <Grid grid={grid} />\n    <GamePad onMove={onMove} />\n    <KeyPad onMove={onMove} disabled={processingUpdates} />\n  </>\n);\n","import React, { Dispatch } from \"react\";\nimport styles from \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../state\";\nimport { Loadable, Effect, Direction } from \"../types\";\nimport { getIsProcessingStep, getWindowedDisplayGrid } from \"../selectors\";\nimport { Game } from \"./Game\";\nimport { AppAction, movePlayer } from \"../actions\";\nimport { WindowedGrid } from \"../util/camera\";\n\ninterface StateProps {\n  grid: Loadable.Loadable<WindowedGrid>;\n  processingUpdates: boolean;\n}\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst App = ({ grid, processingUpdates, onMove }: Props) => {\n  return (\n    <div className={styles.root}>\n      {Loadable.isLoading(grid) && <span>Loading . . . </span>}\n      {Loadable.isLoaded(grid) && grid.data && (\n        <Game\n          processingUpdates={processingUpdates}\n          grid={grid.data}\n          onMove={onMove}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  grid: getWindowedDisplayGrid(state),\n  processingUpdates: getIsProcessingStep(state)\n});\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<AppAction>\n): DispatchProps => ({\n  onMove: d => dispatch(movePlayer(d))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Maze, ID } from \"./types\";\nimport { Loadable } from \"./types\";\nimport { GameData, EntityData } from \"./types/game\";\nimport { Entity } from \"./types/entities\";\n\nexport interface State {\n  game: Loadable.Loadable<GameData.GameData>;\n  stepId?: ID.ID;\n}\n\nexport const create = (init = {}): State => ({\n  game: Loadable.loading(),\n  ...init\n});\n\nexport const requestingNewGame = (state: State): State => ({\n  ...state,\n  game: Loadable.loading()\n});\n\nexport const newGame = (\n  state: State,\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): State => ({\n  ...state,\n  game: Loadable.loaded(\n    GameData.create(maze, EntityData.fromEntities(entities, maze.dimension))\n  )\n});\n\nexport const ifGameIsLoaded = (f: () => State, state: State): State =>\n  Loadable.isLoaded(state.game) ? f() : state;\n\nexport const requestStep = (state: State, stepId: ID.ID): State => ({\n  ...state,\n  stepId\n});\n\nexport const completeStep = (\n  state: State,\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            stepId: undefined,\n            game: Loadable.loaded(gameData)\n          }\n        : state,\n    state\n  );\n\nexport const abortSTep = (state: State, stepId: ID.ID) =>\n  state.stepId === stepId ? { ...state, stepId: undefined } : state;\n","import * as State from \"./state\";\nimport { AppAction, ActionTypes } from \"./actions\";\n\nexport const reducer = (\n  state: State.State = State.create(),\n  action: AppAction\n): State.State => {\n  switch (action.type) {\n    case ActionTypes.REQUEST_STEP:\n      return State.requestStep(state, action.step.id);\n    case ActionTypes.COMPLETE_STEP:\n      return State.completeStep(state, action.stepId, action.gameData);\n    case ActionTypes.ABORT_STEP:\n      return State.abortSTep(state, action.stepId);\n    case ActionTypes.START_NEW_GAME:\n      return State.newGame(state, action.maze, action.entities);\n    case ActionTypes.REQUEST_NEW_GAME:\n      return State.requestingNewGame(state);\n    default:\n      return state;\n  }\n};\n","import { RequestStep, abortStep, completeStep, ActionTypes } from \"../actions\";\nimport { Loadable, Instruction, Result } from \"../types\";\nimport { GameData, EntityData } from \"../types/game\";\nimport { select, put, take, call } from \"redux-saga/effects\";\nimport { getGame } from \"../selectors\";\n\nexport function* stepEngine() {\n  while (true) {\n    try {\n      const { step }: RequestStep = yield take(ActionTypes.REQUEST_STEP);\n      const game: Loadable.Loadable<GameData.GameData> = yield select(getGame);\n      if (Loadable.isLoaded(game)) {\n        const { data: gameData } = game;\n\n        const stepValidation: Result.Result<void> = yield call(\n          Instruction.validateAll,\n          step.instructions,\n          gameData\n        );\n\n        if (Result.isErr(stepValidation)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        const aiInstructions = GameData.generateAllAIInstructions(gameData);\n        const instructions = [...aiInstructions, ...step.instructions];\n\n        const applied: Result.Result<GameData.GameData> = yield call(\n          Instruction.applyAll,\n          instructions,\n          gameData\n        );\n\n        if (Result.isErr(applied)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        yield put(completeStep(step.id, applied.data));\n\n        // player collisions POC:\n        yield call(processCollisions, gameData, applied.data);\n      }\n    } catch (e) {\n      console.warn(\"Error processing step\");\n      console.error(e);\n    }\n  }\n}\n\nexport function* processCollisions(\n  last: GameData.GameData,\n  next: GameData.GameData\n) {\n  const player = next.entityData.entityMap[next.entityData.playerEntityId!];\n  const collisions = EntityData.entitiesAtPoint(\n    next.entityData,\n    player.position,\n    next.maze.dimension\n  )\n    .filter(e => e.id !== player.id)\n    .concat(\n      EntityData.neighborsCrossedByEntity(\n        last.entityData,\n        next.entityData,\n        player.id,\n        next.maze.dimension\n      )\n    );\n\n  if (collisions.length === 0) {\n    return;\n  } else if (collisions.find(e => e.type === \"blind-guardian\")) {\n    yield call(window.confirm, \"You've been annihilated.\");\n    window.location.reload();\n  } else if (collisions.find(e => e.type === \"exit\")) {\n    yield call(window.confirm, \"You have escaped with your life. . . for now.\");\n    window.location.reload();\n  }\n}\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport { ActionTypes, MovePlayer, requestStep } from \"../actions\";\nimport { Player } from \"../types/entities\";\nimport { getPlayer, getIsProcessingStep } from \"../selectors\";\nimport { Step, Instruction } from \"../types\";\n\nexport function* movePlayer() {\n  yield takeEvery(ActionTypes.MOVE_PLAYER, function*(action: MovePlayer) {\n    const player: Player.Player = yield select(getPlayer);\n    const isProcessing: boolean = yield select(getIsProcessingStep);\n\n    if (!isProcessing && !!player) {\n      yield put(\n        requestStep(\n          Step.create(\n            action.direction\n              ? Instruction.move(player.id, action.direction)\n              : Instruction.wait(player.id)\n          )\n        )\n      );\n    }\n  });\n}\n","import { RequestNewGame, ActionTypes, startNewGame } from \"../actions\";\nimport { Maze, Dimension, MazeData, Maybe } from \"../types\";\nimport { call, take, put } from \"redux-saga/effects\";\nimport { Api, Numbers } from \"../util\";\nimport { Player, BlindGuardian, Entity, Exit } from \"../types/entities\";\n\nconst name = Maybe.withDefault(Maybe.of(localStorage.getItem(\"name\")), () => {\n  let n = window.prompt(\"What is your name?\") || \"\";\n  if (n !== \"\") {\n    localStorage.setItem(\"name\", n);\n  }\n  return n !== \"\" ? n : \"?\";\n});\n\nexport function* newGame() {\n  while (true) {\n    try {\n      const { options }: RequestNewGame = yield take(\n        ActionTypes.REQUEST_NEW_GAME\n      );\n      const data: MazeData.MazeData = yield call(\n        Api.maze,\n        options.mazeOptions || {}\n      );\n      const maze: Maze.Maze = Maze.fromMazeData(data);\n\n      yield put(startNewGame(maze, startingEntities(maze)));\n    } catch (e) {\n      console.warn(\"Error initializing new game\");\n      console.error(e);\n    }\n  }\n}\n\nexport const startingEntities = ({ dimension }: Maze.Maze): Entity.Entity[] => {\n  const player = Player.create(name, Dimension.pointAlongEdge(dimension));\n  const exit = Exit.create(Dimension.randomPoint(dimension));\n  const guardians = new Array(Numbers.randomInRange(2, 8))\n    .fill(undefined)\n    .map(_ => BlindGuardian.create(Dimension.randomPoint(dimension)));\n\n  return [player, exit, ...guardians];\n};\n","import { spawn, all, put } from \"redux-saga/effects\";\nimport { Dimension } from \"./types\";\nimport { requestNewGame } from \"./actions\";\nimport { stepEngine } from \"./sagas/stepEngine\";\nimport { movePlayer } from \"./sagas/movePlayer\";\nimport { newGame } from \"./sagas/newGame\";\n\nconst sagas = [newGame, stepEngine, movePlayer];\n\nexport function* root() {\n  yield all(sagas.map(s => spawn(s)));\n  yield put(\n    requestNewGame({\n      mazeOptions: {\n        dimension: Dimension.create(15, 15),\n        algorithm: \"aldous-broder\"\n      }\n    })\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from \"./index.css\";\nimport App from \"./app/views/App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <div className={styles.app}>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as Saga from \"./saga\";\nimport { State } from \"./state\";\nimport { AppAction } from \"./actions\";\n\nexport const configureStore = (): Store<State, AppAction> => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(Saga.root);\n\n  return store;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GamePad_root__Lay6t\",\"row\":\"GamePad_row__164Sm\",\"block\":\"GamePad_block__l2_xd\",\"button\":\"GamePad_button__3kDFo\",\"wait\":\"GamePad_wait__5DVYu\"};"],"sourceRoot":""}