{"version":3,"sources":["app/views/Cell.css","app/views/Grid.css","index.css","app/views/App.css","app/views/Entity.css","app/types/instructions/baseInstruction.ts","app/util/api.ts","app/util/arrays.ts","app/util/numbers.ts","app/util/camera.ts","app/types/dimension.ts","app/types/mazeData.ts","app/types/cell.ts","app/types/maze.ts","app/types/loadable.ts","app/types/id.ts","app/types/entities/player.ts","app/types/entities/entity.ts","app/types/entities/blindGuardian.ts","app/types/entities/exit.ts","app/types/point.ts","app/types/step.ts","app/types/game/entityData.ts","app/types/game/gameData.ts","app/types/instructions/move.ts","app/types/direction.ts","app/types/instructions/update.ts","app/types/instructions/wait.ts","app/types/instructions/instruction.ts","app/actions.ts","app/types/result.ts","app/types/maybe.ts","app/selectors.ts","app/views/Entity.tsx","app/views/Cell.tsx","app/views/Grid.tsx","app/views/GamePad.tsx","app/views/KeyPad.tsx","app/views/Game.tsx","app/views/App.tsx","app/state.ts","app/reducer.ts","app/sagas/stepEngine.ts","app/sagas/movePlayer.ts","app/sagas/newGame.ts","app/saga.ts","index.tsx","app/store.ts","app/views/GamePad.css"],"names":["module","exports","InstructionType","API_ROOT","maze","dimension","Dimension","create","algorithm","request","fetch","method","mode","headers","body","JSON","stringify","dimensions","then","response","text","base64","MazeData","fromApi","nOf","n","t","Array","fill","sorted","unsorted","sortFn","sort","nonNull","array","filter","randomItem","Math","floor","random","length","randomInRange","start","end","centerOnPoint","grid","point","radius","xMin","x","xMax","yMin","y","yMax","windowedGrid","row","push","Maybe","map","width","height","area","d","randomPoint","Point","fromIndex","pointAlongEdge","northOrSouth","Numbers","inBounds","p","bytes","Uint8Array","from","atob","c","charCodeAt","fromByte","byte","walls","s","e","w","fromMazeData","r","Cell","canWalk","direction","Direction","NORTH","EAST","SOUTH","WEST","canTravel","directions","reduce","last","neighbor","undefined","lookInDirection","visionRadius","peekableCorners","corners","seenFromPoint","origin","all","concat","isLoading","l","state","isLoaded","isErrored","loading","loaded","data","errored","f","v4","name","position","displayName","randomDisplayName","id","ID","type","Arrays","getColor","getDisplayName","BlindGuardian","DISPLAY","Exit","generateAiInstructions","gameData","next","heading","options","Maze","adjacent","inverse","includes","Instruction","update","move","toIndex","idx","neighbors","diagonalNeighbors","equals","a","b","instructions","fromEntities","entities","entityMap","m","positionMap","playerEntityId","find","typeMap","entitiesAtPoint","getPlayer","moveEntity","entity","oldIdx","newIdx","newEntity","eId","updateEntity","updated","entitiesCrossed","lastA","lastB","nextA","nextB","neighborsCrossedByEntity","entityData","player","EntityData","sees","Set","seen","displayGrid","rows","rowIdx","cells","cell","cellIdx","isSeen","has","isVisible","meta","occupants","visible","unknown","generateAllAIInstructions","Object","keys","k","i","Entity","entityId","MOVE","payload","updatePlayerVision","prev","UPDATE","wait","WAIT","validate","instruction","Result","ok","err","Move","validateAll","validated","isOk","apply","Update","_","Wait","console","warn","error","applyAll","applied","ActionTypes","msg","isErr","of","value","none","withDefault","maybe","default_","ifPresent","getState","getGame","createSelector","game","getDisplayGrid","Loadable","GameData","getIsProcessingStep","stepId","getWindowedDisplayGrid","Camera","className","styles","root","EntityT","drawSide","wall","classNames","style","borderTop","borderRight","borderBottom","borderLeft","o","getEntityToDraw","EmptyCell","empty","Grid","key","maybeCell","GamePad","onMove","block","button","onClick","KeyPad","handleKeyDown","event","props","disabled","window","addEventListener","this","removeEventListener","React","Game","processingUpdates","requestNewGame","REQUEST_NEW_GAME","startNewGame","START_NEW_GAME","abortStep","ABORT_STEP","completeStep","COMPLETE_STEP","connect","dispatch","MOVE_PLAYER","init","requestingNewGame","newGame","requestStep","ifGameIsLoaded","abortSTep","reducer","State","action","REQUEST_STEP","step","stepEngine","processCollisions","take","select","call","stepValidation","put","aiInstructions","collisions","confirm","location","reload","movePlayer","takeEvery","Step","localStorage","getItem","prompt","setItem","Api","mazeOptions","startingEntities","Player","exit","guardians","sagas","spawn","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","Saga","configureStore","app","document","getElementById"],"mappings":"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","file":"static/js/main.e11160ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__2ti8K\",\"empty\":\"Cell_empty__1ByI9\",\"seen\":\"Cell_seen__2qSTX\",\"visible\":\"Cell_visible__2bnT3\",\"unknown\":\"Cell_unknown__2tYkG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__xSU_B\",\"row\":\"Grid_row__1rWaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"index_app__2lpzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ZxxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Entity_root__MaGTf\"};","import { ID } from \"..\";\n\nexport interface BaseInstruction {\n  entityId: ID.ID;\n  type: InstructionType;\n}\n\nexport enum InstructionType {\n  MOVE = \"MOVE\",\n  UPDATE = \"UPDATE\",\n  WAIT = \"WAIT\"\n}\n","import { Dimension, MazeData } from \"../types\";\n\nconst API_ROOT = \"https://fv9o21r19a.execute-api.us-east-1.amazonaws.com/dev\";\n\nexport const maze = ({\n  dimension = Dimension.create(10, 10),\n  algorithm = \"aldous-broder\"\n}: MazeData.Options = {}): Promise<MazeData.MazeData> => {\n  const request = fetch(`${API_ROOT}`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({ dimensions: dimension, algorithm })\n  });\n  return request\n    .then(response => response.text())\n    .then(base64 => MazeData.fromApi(dimension, base64));\n};\n","import { Maybe } from \"../types\";\n\nexport const nOf = <T>(n: number, t: T): Array<T> => new Array(n).fill(t);\n\nexport const sorted = <T>(\n  unsorted: Array<T>,\n  sortFn?: (a: T, b: T) => number\n): Array<T> => {\n  const sorted = [...unsorted];\n  sorted.sort(sortFn);\n  return sorted;\n};\n\nexport const nonNull = <T>(array: Array<Maybe.Maybe<T>>): Array<T> =>\n  array.filter(t => t != null) as Array<T>;\n\nexport const randomItem = <T>(array: Array<T>): T =>\n  array[Math.floor(Math.random() * array.length)];\n","export const randomInRange = (start: number, end: number) => {\n  return start + Math.floor(Math.random() * (end - start - 1));\n};\n","import { DisplayGrid, CellAndMeta } from \"../types/game/gameData\";\nimport { Point, Maybe } from \"../types\";\n\nexport type WindowedGrid = Array<Array<Maybe.Maybe<CellAndMeta>>>;\n\nexport const centerOnPoint = (\n  grid: DisplayGrid,\n  point: Point.Point,\n  radius: number\n): WindowedGrid => {\n  const xMin = point.x - radius;\n  const xMax = point.x + radius + 1;\n  const yMin = point.y - radius;\n  const yMax = point.y + radius + 1;\n\n  const windowedGrid: WindowedGrid = [];\n\n  for (let y = yMin; y < yMax; y++) {\n    const row = [];\n    for (let x = xMin; x < xMax; x++) {\n      row.push(Maybe.map(row => row[x], grid[y]));\n    }\n    windowedGrid.push(row);\n  }\n\n  return windowedGrid;\n};\n","import { Point } from \".\";\nimport { Numbers } from \"../util\";\n\nexport interface Dimension {\n  width: number;\n  height: number;\n}\n\nexport const create = (width: number = 0, height: number = 0): Dimension => ({\n  width,\n  height\n});\n\nexport const area = (d: Dimension): number => d.width * d.height;\n\nexport const randomPoint = (d: Dimension): Point.Point =>\n  Point.fromIndex(Math.floor(Math.random() * area(d)), d);\n\nexport const pointAlongEdge = (d: Dimension): Point.Point => {\n  const northOrSouth = Math.random() > 0.5;\n\n  return Point.create(\n    northOrSouth\n      ? Numbers.randomInRange(0, d.width)\n      : Math.random() > 0.5\n      ? 0\n      : d.width - 1,\n    !northOrSouth\n      ? Numbers.randomInRange(0, d.height)\n      : Math.random() > 0.5\n      ? 0\n      : d.height - 1\n  );\n};\n\nexport const inBounds = (d: Dimension, p: Point.Point): boolean =>\n  p.x > 0 && p.y > 0 && p.x < d.width && p.y < d.height;\n","import { Dimension } from \".\";\n\nexport interface MazeData {\n  bytes: Uint8Array;\n  dimension: Dimension.Dimension;\n}\n\nexport interface Options {\n  dimension?: Dimension.Dimension;\n  algorithm?: \"aldous-broder\" | \"binary-tree\" | \"side-winder\";\n}\n\nexport const fromApi = (\n  dimension: Dimension.Dimension,\n  base64: string\n): MazeData => {\n  return {\n    bytes: Uint8Array.from(atob(base64), c => c.charCodeAt(0)),\n    dimension: dimension\n  };\n};\n","import { Direction } from \".\";\n\nexport interface Cell {\n  walls: Walls;\n}\n\n/**\n * A wall is present to direction n if n === true\n */\nexport interface Walls {\n  n: boolean;\n  e: boolean;\n  s: boolean;\n  w: boolean;\n}\n\nexport const walls = ({ n, e, s, w }: Partial<Walls>): Walls => ({\n  n: n || false,\n  e: e || false,\n  s: s || false,\n  w: w || false\n});\n\nexport const fromByte = (byte: number) => ({\n  walls: walls({\n    n: !((byte & 0b00001000) > 0),\n    s: !((byte & 0b00000100) > 0),\n    e: !((byte & 0b00000010) > 0),\n    w: !((byte & 0b00000001) > 0)\n  })\n});\n\nexport const hasWall = (\n  { walls }: Cell,\n  direction: Direction.Direction\n): boolean => {\n  switch (direction) {\n    case Direction.Direction.NORTH:\n      return walls.n;\n    case Direction.Direction.EAST:\n      return walls.e;\n    case Direction.Direction.SOUTH:\n      return walls.s;\n    case Direction.Direction.WEST:\n      return walls.w;\n  }\n};\n","import * as Cell from \"./cell\";\nimport * as MazeData from \"./mazeData\";\nimport { Dimension, Point, Direction, Maybe } from \".\";\n\nexport interface Maze {\n  readonly grid: Grid;\n  readonly dimension: Dimension.Dimension;\n}\n\nexport type Grid = Array<Array<Cell.Cell>>;\n\nexport const fromMazeData = ({ dimension, bytes }: MazeData.MazeData): Maze => {\n  const grid: Grid = [];\n  for (let r = 0; r < dimension.height; r++) {\n    const row = [];\n    for (let c = 0; c < dimension.width; c++) {\n      row.push(Cell.fromByte(bytes[r * dimension.width + c]));\n    }\n    grid.push(row);\n  }\n\n  return {\n    grid,\n    dimension\n  };\n};\n\nexport const canWalk = (\n  maze: Maze,\n  { x, y }: Point.Point,\n  direction: Direction.Direction\n): boolean => {\n  const cell = maze.grid[y][x];\n  return !Cell.hasWall(cell, direction);\n};\n\nexport const canTravel = (\n  maze: Maze,\n  p: Point.Point,\n  ...directions: Direction.Direction[]\n): boolean =>\n  !!directions.reduce(\n    (last: Maybe.Maybe<Point.Point>, d) =>\n      last && canWalk(maze, last, d) ? Point.neighbor(last, d) : undefined,\n    p\n  );\n\nexport const lookInDirection = (\n  maze: Maze,\n  d: Direction.Direction,\n  p: Point.Point,\n  visionRadius: number\n): Point.Point[] => {\n  if (canWalk(maze, p, d) && visionRadius > 0) {\n    const neighbor = Point.neighbor(p, d);\n    return [neighbor, ...lookInDirection(maze, d, neighbor, visionRadius - 1)];\n  } else {\n    return [];\n  }\n};\n\nexport const peekableCorners = (maze: Maze, p: Point.Point): Point.Point[] => {\n  let corners: Point.Point[] = [];\n  if (\n    canTravel(maze, p, Direction.Direction.NORTH, Direction.Direction.EAST) ||\n    canTravel(maze, p, Direction.Direction.EAST, Direction.Direction.NORTH)\n  ) {\n    corners.push(Point.create(p.x + 1, p.y - 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.NORTH, Direction.Direction.WEST) ||\n    canTravel(maze, p, Direction.Direction.WEST, Direction.Direction.NORTH)\n  ) {\n    corners.push(Point.create(p.x - 1, p.y - 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.SOUTH, Direction.Direction.EAST) ||\n    canTravel(maze, p, Direction.Direction.EAST, Direction.Direction.SOUTH)\n  ) {\n    corners.push(Point.create(p.x + 1, p.y + 1));\n  }\n  if (\n    canTravel(maze, p, Direction.Direction.SOUTH, Direction.Direction.WEST) ||\n    canTravel(maze, p, Direction.Direction.WEST, Direction.Direction.SOUTH)\n  ) {\n    corners.push(Point.create(p.x - 1, p.y + 1));\n  }\n\n  return corners;\n};\n\nexport const seenFromPoint = (\n  maze: Maze,\n  origin: Point.Point,\n  visionRadius: number\n): Point.Point[] =>\n  Direction.all()\n    .reduce(\n      (p: Point.Point[], d) =>\n        p.concat(lookInDirection(maze, d, origin, visionRadius)),\n      []\n    )\n    .concat(peekableCorners(maze, origin))\n    .concat(origin);\n","interface Loaded<T> {\n  state: \"Loaded\";\n  data: T;\n}\n\ninterface Loading {\n  state: \"Loading\";\n}\n\ninterface Errored {\n  state: \"Errored\";\n  e: any;\n}\n\nexport type Loadable<T> = Loaded<T> | Loading | Errored;\n\nexport const isLoading = <T>(l: Loadable<T>): l is Loading =>\n  l.state === \"Loading\";\n\nexport const isLoaded = <T>(l: Loadable<T>): l is Loaded<T> =>\n  l.state === \"Loaded\";\n\nexport const isErrored = <T>(l: Loadable<T>): l is Errored =>\n  l.state === \"Errored\";\n\nexport const loading = <T>(): Loading => ({ state: \"Loading\" });\n\nexport const loaded = <T>(data: T): Loaded<T> => ({\n  state: \"Loaded\",\n  data\n});\n\nexport const errored = <T>(e: any): Errored => ({ state: \"Errored\", e });\n\nexport const map = <T, R>(f: (t: T) => R, l: Loadable<T>): Loadable<R> =>\n  isLoaded(l) ? loaded(f(l.data)) : l;\n","import { v4 } from \"uuid\";\n\nexport type ID = string;\n\nexport const create = (): ID => v4();\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\nimport { Arrays } from \"../../util\";\n\nexport interface Player extends BaseEntity.BaseEntity {\n  type: \"player\";\n  name: string;\n  visionRadius: number;\n  displayName: string;\n}\n\nexport const create = (\n  name: string,\n  position: Point.Point = Point.create(),\n  visionRadius: number = 5,\n  displayName: string = randomDisplayName()\n): Player => ({\n  id: ID.create(),\n  name,\n  position,\n  type: \"player\",\n  visionRadius,\n  displayName: displayName || name\n});\n\nexport const randomDisplayName = (): string =>\n  Arrays.randomItem([\n    \"🐕\",\n    \"🐦\",\n    \"🐈\",\n    \"🐎\",\n    \"🐖\",\n    \"🐁\",\n    \"🐀\",\n    \"🐢\"\n    // \"🚶‍♂️\",\n    // \"🚶‍♀️\"\n  ]);\n","import { GameData } from \"../game\";\nimport { Instruction } from \"..\";\nimport { BlindGuardian, Player, Exit } from \".\";\n\nexport type Entity = Player.Player | BlindGuardian.BlindGuardian | Exit.Exit;\n\nexport const getColor = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return \"var(--blue)\";\n    case \"exit\":\n      return \"transparent\";\n    case \"blind-guardian\":\n      return \"transparent\";\n    default:\n      return \"var(--red)\";\n  }\n};\n\nexport const getDisplayName = (e: Entity): string => {\n  switch (e.type) {\n    case \"player\":\n      return e.displayName;\n    case \"blind-guardian\":\n      return BlindGuardian.DISPLAY;\n    case \"exit\":\n      return Exit.DISPLAY;\n  }\n};\n\nexport const generateAiInstructions = (\n  e: Entity,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  switch (e.type) {\n    case \"blind-guardian\":\n      return BlindGuardian.next(e, gameData);\n    default:\n      return [];\n  }\n};\n","import { BaseEntity } from \".\";\nimport { Point, ID, Direction, Instruction, Maze } from \"..\";\nimport { GameData } from \"../game\";\nimport { Arrays } from \"../../util\";\n\n/**\n * The blind guardian is a sightless, senseless automaton\n */\nexport interface BlindGuardian extends BaseEntity.BaseEntity {\n  type: \"blind-guardian\";\n  heading: Direction.Direction;\n}\n\nexport const create = (\n  position: Point.Point = Point.create()\n): BlindGuardian => ({\n  type: \"blind-guardian\",\n  position,\n  id: ID.create(),\n  heading: Direction.Direction.NORTH\n});\n\nexport const next = (\n  e: BlindGuardian,\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const options = Direction.all().filter(d =>\n    Maze.canWalk(gameData.maze, e.position, d)\n  );\n\n  const adjacent = options.filter(d => d !== Direction.inverse(e.heading));\n\n  let direction: Direction.Direction;\n\n  if (options.includes(e.heading) && Math.random() < 0.75) {\n    direction = e.heading;\n  } else if (Math.random() < 0.75 && adjacent.length > 0) {\n    direction = Arrays.randomItem(adjacent);\n  } else {\n    direction = options[0];\n  }\n\n  return [\n    Instruction.update({ ...e, heading: direction }),\n    Instruction.move(e.id, direction)\n  ];\n};\n\nexport const DISPLAY = \"🗿\";\n","import { BaseEntity } from \".\";\nimport { Point, ID } from \"..\";\n\nexport interface Exit extends BaseEntity.BaseEntity {\n  type: \"exit\";\n}\n\nexport const create = (position: Point.Point): Exit => ({\n  position,\n  id: ID.create(),\n  type: \"exit\"\n});\n\nexport const DISPLAY = \"🚪\";\n","import { Dimension, Point, Direction } from \".\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport const create = (x: number = 0, y: number = 0): Point => ({ x, y });\n\nexport const toIndex = (\n  { x, y }: Point,\n  { width }: Dimension.Dimension\n): number => y * width + x;\n\nexport const fromIndex = (idx: number, { width }: Dimension.Dimension): Point =>\n  create(Math.floor(idx / width), idx % width);\n\nexport const neighbor = (p: Point, d: Direction.Direction): Point => {\n  switch (d) {\n    case \"NORTH\":\n      return Point.create(p.x, p.y - 1);\n    case \"SOUTH\":\n      return Point.create(p.x, p.y + 1);\n    case \"EAST\":\n      return Point.create(p.x + 1, p.y);\n    case \"WEST\":\n    default:\n      return Point.create(p.x - 1, p.y);\n  }\n};\n\nexport const neighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  Direction.all()\n    .map(d => neighbor(p, d))\n    .filter(p => Dimension.inBounds(d, p));\n\nexport const diagonalNeighbors = (p: Point, d: Dimension.Dimension): Point[] =>\n  [\n    create(p.x - 1, p.y - 1),\n    create(p.x + 1, p.y - 1),\n    create(p.x + 1, p.y + 1),\n    create(p.x - 1, p.y + 1)\n  ].filter(p => Dimension.inBounds(d, p));\n\nexport const equals = (a: Point.Point, b: Point.Point): boolean =>\n  a.x === b.x && a.y === b.y;\n","import { Instruction, ID } from \".\";\n\nexport interface Step {\n  instructions: Instruction.Instruction[];\n  id: ID.ID;\n}\n\nexport const create = (...instructions: Instruction.Instruction[]): Step => ({\n  instructions,\n  id: ID.create()\n});\n","import { ID, Dimension, Point, Maybe } from \"..\";\nimport { Entity, Player } from \"../entities\";\n\nexport interface EntityData {\n  entityMap: Record<ID.ID, Entity.Entity>;\n  positionMap: Record<number, ID.ID[]>;\n  playerEntityId: Maybe.Maybe<ID.ID>;\n  typeMap: Record<string, ID.ID[]>;\n}\n\nexport const fromEntities = (\n  entities: Entity.Entity[],\n  dimension: Dimension.Dimension\n): EntityData => ({\n  entityMap: entities.reduce((m: Record<ID.ID, Entity.Entity>, e) => {\n    m[e.id] = e;\n    return m;\n  }, {}),\n  positionMap: entities.reduce((m: Record<number, ID.ID[]>, e) => {\n    const idx = Point.toIndex(e.position, dimension);\n    m[idx] = m[idx] ? [...m[idx], e.id] : [e.id];\n    return m;\n  }, {}),\n  playerEntityId: Maybe.map(\n    p => p.id,\n    entities.find(e => e.type === \"player\")\n  ),\n  typeMap: entities.reduce(\n    (m: Record<string, ID.ID[]>, e) => ({\n      ...m,\n      [e.type]: m[e.id] ? [...m[e.id], e.id] : [e.id]\n    }),\n    {}\n  )\n});\n\nexport const entitiesAtPoint = (\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const idx = Point.toIndex(p, d);\n  const ids = data.positionMap[idx] || [];\n  return ids.map(id => data.entityMap[id]);\n};\n\nexport const getPlayer = (data: EntityData): Maybe.Maybe<Player.Player> =>\n  Maybe.map(id => data.entityMap[id] as Player.Player, data.playerEntityId);\n\nexport const moveEntity = (\n  id: ID.ID,\n  data: EntityData,\n  p: Point.Point,\n  d: Dimension.Dimension\n): EntityData => {\n  const entity = data.entityMap[id];\n  if (entity != null) {\n    const oldIdx = Point.toIndex(entity.position, d);\n    const newIdx = Point.toIndex(p, d);\n    const newEntity = { ...entity, position: p };\n    return {\n      ...data,\n      entityMap: { ...data.entityMap, [id]: newEntity },\n      positionMap: {\n        ...data.positionMap,\n        [oldIdx]: [\n          ...(data.positionMap[oldIdx] || []).filter(eId => eId !== id)\n        ],\n        [newIdx]: [...(data.positionMap[newIdx] || []), id]\n      }\n    };\n  } else {\n    return data;\n  }\n};\n\n// might need to augment to handle type change\nexport const updateEntity = (\n  updated: Entity.Entity,\n  data: EntityData\n): EntityData => ({\n  ...data,\n  entityMap: { ...data.entityMap, [updated.id]: updated }\n});\n\nexport const entitiesCrossed = (\n  last: EntityData,\n  next: EntityData,\n  a: ID.ID,\n  b: ID.ID\n): boolean => {\n  const lastA = last.entityMap[a];\n  const lastB = last.entityMap[b];\n  const nextA = next.entityMap[a];\n  const nextB = next.entityMap[b];\n\n  return (\n    Point.equals(nextA.position, lastB.position) &&\n    Point.equals(nextB.position, lastA.position)\n  );\n};\n\nexport const neighborsCrossedByEntity = (\n  last: EntityData,\n  next: EntityData,\n  e: ID.ID,\n  d: Dimension.Dimension\n): Entity.Entity[] => {\n  const neighborIndices = Point.neighbors(\n    next.entityMap[e].position,\n    d\n  ).map(p => Point.toIndex(p, d));\n\n  const neighborEntities = neighborIndices.reduce(\n    (entities: ID.ID[], idx) => entities.concat(next.positionMap[idx] || []),\n    []\n  );\n\n  return neighborEntities\n    .filter(id => entitiesCrossed(last, next, e, id))\n    .map(id => next.entityMap[id]);\n};\n","import { Maze, Cell, Point, Instruction } from \"..\";\nimport { EntityData, GameData } from \".\";\nimport { Entity } from \"../entities\";\n\nexport interface GameData {\n  maze: Maze.Maze;\n  entityData: EntityData.EntityData;\n  seen: Set<number>;\n  sees: Set<number>;\n}\n\nexport const create = (\n  maze: Maze.Maze,\n  entityData: EntityData.EntityData\n): GameData => {\n  const player = EntityData.getPlayer(entityData);\n  const sees = new Set<number>(\n    player\n      ? Maze.seenFromPoint(maze, player.position, player.visionRadius).map(p =>\n          Point.toIndex(p, maze.dimension)\n        )\n      : []\n  );\n\n  return {\n    maze,\n    entityData,\n    seen: new Set(),\n    sees\n  };\n};\n\nexport interface CellMeta {\n  occupants: Entity.Entity[];\n  visible: boolean;\n  seen: boolean;\n  unknown: boolean;\n}\n\nexport interface CellAndMeta {\n  cell: Cell.Cell;\n  meta: CellMeta;\n}\n\nexport type DisplayGrid = CellAndMeta[][];\n\nexport const displayGrid = ({\n  maze,\n  entityData,\n  seen,\n  sees\n}: GameData): DisplayGrid =>\n  maze.grid.reduce(\n    (rows: CellAndMeta[][], row, rowIdx) => [\n      ...rows,\n      row.reduce((cells: CellAndMeta[], cell, cellIdx) => {\n        const p = Point.create(cellIdx, rowIdx);\n        const isSeen = seen.has(Point.toIndex(p, maze.dimension));\n        const isVisible = sees.has(Point.toIndex(p, maze.dimension));\n        return cells.concat({\n          cell,\n          meta: {\n            occupants: EntityData.entitiesAtPoint(\n              entityData,\n              Point.create(cellIdx, rowIdx),\n              maze.dimension\n            ),\n            visible: isVisible,\n            seen: isSeen,\n            unknown: !isVisible && !isSeen\n          }\n        });\n      }, [])\n    ],\n    []\n  );\n\nexport const generateAllAIInstructions = (\n  gameData: GameData.GameData\n): Instruction.Instruction[] => {\n  const aiEntities = Object.keys(gameData.entityData.entityMap)\n    .map(k => gameData.entityData.entityMap[k])\n    .filter(e => e.type !== \"player\");\n\n  return aiEntities.reduce(\n    (i: Instruction.Instruction[], e) =>\n      i.concat(Entity.generateAiInstructions(e, gameData)),\n    []\n  );\n};\n","import { Direction, ID, Result, Maze, Point } from \"..\";\nimport { GameData, EntityData } from \"../game\";\nimport { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Player } from \"../entities\";\n\nexport interface MoveInstruction extends BaseInstruction {\n  type: InstructionType.MOVE;\n  payload: {\n    direction: Direction.Direction;\n  };\n}\n\nexport const move = (\n  entityId: ID.ID,\n  direction: Direction.Direction\n): MoveInstruction => ({\n  type: InstructionType.MOVE,\n  entityId,\n  payload: { direction }\n});\n\nexport const validate = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  Maze.canWalk(\n    gameData.maze,\n    gameData.entityData.entityMap[move.entityId].position,\n    move.payload.direction\n  )\n    ? Result.ok(undefined)\n    : Result.err(\"way is blocked\");\n\nexport const apply = (\n  move: MoveInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => {\n  const entityData = EntityData.moveEntity(\n    move.entityId,\n    gameData.entityData,\n    Point.neighbor(\n      gameData.entityData.entityMap[move.entityId].position,\n      move.payload.direction\n    ),\n    gameData.maze.dimension\n  );\n\n  const player = EntityData.getPlayer(entityData);\n  const { seen, sees } =\n    player && move.entityId === player.id\n      ? updatePlayerVision(gameData.seen, player, gameData.maze)\n      : gameData;\n\n  return {\n    ...gameData,\n    seen,\n    sees,\n    entityData\n  };\n};\n\nexport const updatePlayerVision = (\n  prev: Set<number>,\n  player: Player.Player,\n  maze: Maze.Maze\n): Pick<GameData.GameData, \"seen\" | \"sees\"> => {\n  const sees = new Set<number>(\n    Maze.seenFromPoint(maze, player.position, player.visionRadius).map(p =>\n      Point.toIndex(p, maze.dimension)\n    )\n  );\n\n  const seen = new Set<number>([...prev, ...sees]);\n\n  return { sees, seen };\n};\n","export enum Direction {\n  NORTH = \"NORTH\",\n  SOUTH = \"SOUTH\",\n  EAST = \"EAST\",\n  WEST = \"WEST\"\n}\n\nexport const all = (): Direction[] => [\n  Direction.NORTH,\n  Direction.SOUTH,\n  Direction.EAST,\n  Direction.WEST\n];\n\nexport const inverse = (d: Direction): Direction => {\n  switch (d) {\n    case Direction.NORTH:\n      return Direction.SOUTH;\n    case Direction.SOUTH:\n      return Direction.NORTH;\n    case Direction.EAST:\n      return Direction.WEST;\n    case Direction.WEST:\n      return Direction.EAST;\n  }\n};\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { Entity } from \"../entities\";\nimport { GameData, EntityData } from \"../game\";\n\nexport interface UpdateInstruction extends BaseInstruction {\n  type: InstructionType.UPDATE;\n  payload: {\n    updated: Entity.Entity;\n  };\n}\n\nexport const update = (updated: Entity.Entity): UpdateInstruction => ({\n  type: InstructionType.UPDATE,\n  entityId: updated.id,\n  payload: { updated }\n});\n\nexport const apply = (\n  update: UpdateInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({\n  ...gameData,\n  entityData: EntityData.updateEntity(\n    update.payload.updated,\n    gameData.entityData\n  )\n});\n","import { BaseInstruction, InstructionType } from \"./baseInstruction\";\nimport { ID } from \"..\";\nimport { GameData } from \"../game\";\n\nexport interface WaitInstruction extends BaseInstruction {\n  type: InstructionType.WAIT;\n}\n\nexport const wait = (entityId: ID.ID): WaitInstruction => ({\n  type: InstructionType.WAIT,\n  entityId\n});\n\nexport const apply = (\n  _: WaitInstruction,\n  gameData: GameData.GameData\n): GameData.GameData => ({ ...gameData });\n","import { Result, Instruction } from \"..\";\nimport * as Move from \"./move\";\nimport * as Update from \"./update\";\nimport * as Wait from \"./wait\";\nimport { GameData } from \"../game\";\nimport { InstructionType } from \"./baseInstruction\";\n\nexport type Instruction =\n  | Move.MoveInstruction\n  | Update.UpdateInstruction\n  | Wait.WaitInstruction;\n\nexport const validate = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<void> => {\n  switch (instruction.type) {\n    case InstructionType.MOVE:\n      return Move.validate(instruction, gameData);\n    case InstructionType.WAIT:\n      return Result.ok(undefined);\n    default:\n      return Result.err(`Unkown instruction of type ${instruction.type}`);\n  }\n};\n\nexport const validateAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<void> =>\n  instructions.reduce(\n    (validated: Result.Result<void>, i) =>\n      Result.isOk(validated) ? validate(i, gameData) : validated,\n    Result.ok(undefined)\n  );\n\nexport const apply = (\n  instruction: Instruction,\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> => {\n  try {\n    switch (instruction.type) {\n      case InstructionType.MOVE:\n        return Result.ok(Move.apply(instruction, gameData));\n      case InstructionType.UPDATE:\n        return Result.ok(Update.apply(instruction, gameData));\n      case InstructionType.WAIT:\n        return Result.ok(Wait.apply(instruction, gameData));\n    }\n  } catch (e) {\n    console.warn(\"Error applying instruction\", instruction);\n    console.error(e);\n    return Result.err(\"Error applying instructions\");\n  }\n};\n\nexport const applyAll = (\n  instructions: Instruction[],\n  gameData: GameData.GameData\n): Result.Result<GameData.GameData> =>\n  instructions.reduce(\n    (applied: Result.Result<GameData.GameData>, i) =>\n      Result.isOk(applied) ? apply(i, applied.data) : applied,\n    Result.ok(gameData)\n  );\n","import { MazeData, Maze, Step, ID, Direction } from \"./types\";\nimport { Entity } from \"./types/entities\";\nimport { GameData } from \"./types/game\";\n\nexport enum ActionTypes {\n  REQUEST_NEW_GAME = \"REQUEST_NEW_GAME\",\n  START_NEW_GAME = \"START_NEW_GAME\",\n\n  REQUEST_STEP = \"REQUEST_STEP\",\n  COMPLETE_STEP = \"COMPLETE_STEP\",\n  ABORT_STEP = \"ABORT_STEP\",\n\n  MOVE_PLAYER = \"MOVE_PLAYER\"\n}\n\ninterface NewGameOptions {\n  mazeOptions?: MazeData.Options;\n}\nexport interface RequestNewGame {\n  type: ActionTypes.REQUEST_NEW_GAME;\n  options: NewGameOptions;\n}\n\nexport interface StartNewGame {\n  type: ActionTypes.START_NEW_GAME;\n  maze: Maze.Maze;\n  entities: Entity.Entity[];\n}\n\nexport interface RequestStep {\n  type: ActionTypes.REQUEST_STEP;\n  step: Step.Step;\n}\n\nexport interface AbortStep {\n  type: ActionTypes.ABORT_STEP;\n  stepId: ID.ID;\n}\n\nexport interface CompleteStep {\n  type: ActionTypes.COMPLETE_STEP;\n  stepId: ID.ID;\n  gameData: GameData.GameData;\n}\n\nexport interface MovePlayer {\n  type: ActionTypes.MOVE_PLAYER;\n  direction?: Direction.Direction;\n}\n\nexport type AppAction =\n  | RequestNewGame\n  | StartNewGame\n  | RequestStep\n  | AbortStep\n  | CompleteStep\n  | MovePlayer;\n\nexport const requestNewGame = (\n  options: NewGameOptions = {}\n): RequestNewGame => ({ type: ActionTypes.REQUEST_NEW_GAME, options });\n\nexport const startNewGame = (\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): StartNewGame => ({\n  type: ActionTypes.START_NEW_GAME,\n  maze,\n  entities\n});\n\nexport const requestStep = (step: Step.Step): RequestStep => ({\n  type: ActionTypes.REQUEST_STEP,\n  step\n});\n\nexport const abortStep = (stepId: ID.ID): AbortStep => ({\n  type: ActionTypes.ABORT_STEP,\n  stepId\n});\n\nexport const completeStep = (\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): CompleteStep => ({\n  type: ActionTypes.COMPLETE_STEP,\n  stepId,\n  gameData\n});\n\nexport const movePlayer = (direction?: Direction.Direction): MovePlayer => ({\n  type: ActionTypes.MOVE_PLAYER,\n  direction\n});\n","export interface Err {\n  type: \"Error\";\n  msg: string;\n}\n\nexport interface Ok<T> {\n  type: \"Ok\";\n  data: T;\n}\n\nexport type Result<T> = Ok<T> | Err;\n\nexport const ok = <T>(data: T): Ok<T> => ({ type: \"Ok\", data });\n\nexport const err = (msg: string): Err => ({ type: \"Error\", msg });\n\nexport const isErr = <T>(r: Result<T>): r is Err => r.type === \"Error\";\n\nexport const isOk = <T>(r: Result<T>): r is Ok<T> => r.type === \"Ok\";\n\nexport const map = <T, R>(f: (t: T) => R, r: Result<T>): Result<R> =>\n  isOk(r) ? ok(f(r.data)) : r;\n","export type Maybe<T> = T | undefined | null;\n\nexport const of = <T>(value: T | undefined | null): Maybe<T> => value;\nexport const none = <T>(): Maybe<T> => undefined;\n\ntype Supplier<T> = () => T;\n\nexport const withDefault = <T>(maybe: Maybe<T>, default_: T | Supplier<T>): T =>\n  maybe != null\n    ? maybe\n    : typeof default_ === \"function\"\n    ? (default_ as Supplier<T>)()\n    : default_;\n\nexport const map = <T, R>(f: (t: T) => R, maybe: Maybe<T>): Maybe<R> =>\n  maybe != null ? f(maybe) : undefined;\n\nexport const ifPresent = <T>(f: (t: T) => void, maybe: Maybe<T>): void => {\n  if (maybe) {\n    f(maybe);\n  }\n};\n","import { State } from \"./state\";\nimport { createSelector } from \"reselect\";\nimport { Loadable, Maybe } from \"./types\";\nimport { GameData } from \"./types/game\";\nimport { Camera } from \"./util\";\n\nexport const getState = (state: State): State => state;\n\nexport const getGame = createSelector(getState, state => state.game);\n\nexport const getDisplayGrid = createSelector(getGame, game =>\n  Loadable.map(GameData.displayGrid, game)\n);\n\nexport const getIsProcessingStep = createSelector(\n  getState,\n  state => state.stepId != null\n);\n\nexport const getPlayer = createSelector(getGame, game =>\n  Loadable.isLoaded(game)\n    ? Maybe.map(\n        id => game.data.entityData.entityMap[id],\n        game.data.entityData.playerEntityId\n      )\n    : undefined\n);\n\nexport const getWindowedDisplayGrid = createSelector(\n  getDisplayGrid,\n  getPlayer,\n  (displayGrid, player) =>\n    Loadable.map(\n      grid =>\n        player != null ? Camera.centerOnPoint(grid, player.position, 3) : [],\n      displayGrid\n    )\n);\n","import React from \"react\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport styles from \"./Entity.css\";\n\nexport const Entity = (entity: EntityT.Entity): JSX.Element => (\n  <div className={styles.root}>{EntityT.getDisplayName(entity)}</div>\n);\n","import React from \"react\";\nimport { Cell as CellT, Maybe } from \"../types\";\nimport styles from \"./Cell.css\";\nimport classNames from \"classnames\";\nimport { CellMeta } from \"../types/game/gameData\";\nimport { Entity as EntityT } from \"../types/entities\";\nimport { Entity } from \"./Entity\";\n\ninterface Props {\n  cell: CellT.Cell;\n  meta: CellMeta;\n}\n\nconst IS_WALL = \"0.5px solid black\";\nconst IS_OPEN = \"0.5px transparent\";\nconst drawSide = (wall: boolean) => (wall ? IS_WALL : IS_OPEN);\n\nconst getEntityToDraw = ({\n  visible,\n  seen,\n  occupants\n}: CellMeta): Maybe.Maybe<EntityT.Entity> => {\n  if (visible) {\n    return Maybe.withDefault(\n      occupants.find(e => e.type !== \"player\" && e.type !== \"exit\"),\n      occupants[0]\n    );\n  } else if (seen) {\n    return occupants.find(e => e.type === \"exit\");\n  }\n};\n\nexport const Cell = ({ cell, meta }: Props): JSX.Element => {\n  const { walls } = cell;\n  return (\n    <div\n      className={classNames(styles.root, {\n        [styles.seen]: meta.seen,\n        [styles.visible]: meta.visible,\n        [styles.unknown]: !meta.seen && !meta.visible\n      })}\n      style={\n        !meta.unknown\n          ? {\n              borderTop: drawSide(walls.n),\n              borderRight: drawSide(walls.e),\n              borderBottom: drawSide(walls.s),\n              borderLeft: drawSide(walls.w)\n            }\n          : undefined\n      }\n    >\n      {Maybe.map(\n        o => (\n          <Entity {...o} />\n        ),\n        getEntityToDraw(meta)\n      )}\n    </div>\n  );\n};\n\nexport const EmptyCell = () => (\n  <div className={classNames(styles.empty, styles.root)}></div>\n);\n","import React from \"react\";\nimport { Cell, EmptyCell } from \"./Cell\";\nimport styles from \"./Grid.css\";\nimport { Camera } from \"../util\";\nimport { Maybe } from \"../types\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n}\n\nexport const Grid = ({ grid }: Props): JSX.Element => {\n  return (\n    <div className={styles.root}>\n      {grid.map((row, idx) => (\n        <div key={idx} className={styles.row}>\n          {row.map((maybeCell, idx) =>\n            Maybe.withDefault(\n              Maybe.map(\n                cell => <Cell key={idx} cell={cell.cell} meta={cell.meta} />,\n                maybeCell\n              ),\n              <EmptyCell key={idx} />\n            )\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Effect, Direction } from \"../types\";\nimport styles from \"./GamePad.css\";\nimport classNames from \"classnames\";\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = DispatchProps;\n\nexport const GamePad = ({ onMove }: Props): JSX.Element => (\n  <div className={styles.root}>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.NORTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n    <div className={styles.row}>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.WEST)}\n      ></button>\n      <button\n        className={classNames(styles.block, styles.button, styles.wait)}\n        onClick={() => onMove(undefined)}\n      ></button>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.EAST)}\n      ></button>\n    </div>\n    <div className={styles.row}>\n      <div className={styles.block}></div>\n      <button\n        className={classNames(styles.block, styles.button)}\n        onClick={() => onMove(Direction.Direction.SOUTH)}\n      ></button>\n      <div className={styles.block}></div>\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { Effect, Direction } from \"../types\";\n\ninterface Props {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  disabled: boolean;\n}\n\nexport class KeyPad extends React.PureComponent<Props> {\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    return <></>;\n  }\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    if (!this.props.disabled) {\n      if (event.key === \"ArrowUp\" || event.key === \"w\") {\n        this.props.onMove(Direction.Direction.NORTH);\n      } else if (event.key === \"ArrowRight\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.EAST);\n      } else if (event.key === \"ArrowDown\" || event.key === \"d\") {\n        this.props.onMove(Direction.Direction.SOUTH);\n      } else if (event.key === \"ArrowLeft\" || event.key === \"a\") {\n        this.props.onMove(Direction.Direction.WEST);\n      } else if (event.key === \" \") {\n        this.props.onMove(undefined);\n      }\n    }\n  };\n}\n","import * as React from \"react\";\nimport { Grid } from \"./Grid\";\nimport { GamePad } from \"./GamePad\";\nimport { Effect, Direction } from \"../types\";\nimport { KeyPad } from \"./KeyPad\";\nimport { Camera } from \"../util\";\n\ninterface Props {\n  grid: Camera.WindowedGrid;\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n  processingUpdates: boolean;\n}\n\nexport const Game = ({\n  grid,\n  onMove,\n  processingUpdates\n}: Props): JSX.Element => (\n  <>\n    <Grid grid={grid} />\n    <GamePad onMove={onMove} />\n    <KeyPad onMove={onMove} disabled={processingUpdates} />\n  </>\n);\n","import React, { Dispatch } from \"react\";\nimport styles from \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../state\";\nimport { Loadable, Effect, Direction } from \"../types\";\nimport { getIsProcessingStep, getWindowedDisplayGrid } from \"../selectors\";\nimport { Game } from \"./Game\";\nimport { AppAction, movePlayer } from \"../actions\";\nimport { WindowedGrid } from \"../util/camera\";\n\ninterface StateProps {\n  grid: Loadable.Loadable<WindowedGrid>;\n  processingUpdates: boolean;\n}\n\ninterface DispatchProps {\n  onMove: Effect.Effect1<Direction.Direction | undefined>;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst App = ({ grid, processingUpdates, onMove }: Props) => {\n  return (\n    <div className={styles.root}>\n      {Loadable.isLoading(grid) && <span>Loading . . . </span>}\n      {Loadable.isLoaded(grid) && grid.data && (\n        <Game\n          processingUpdates={processingUpdates}\n          grid={grid.data}\n          onMove={onMove}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const mapStateToProps = (state: State): StateProps => ({\n  grid: getWindowedDisplayGrid(state),\n  processingUpdates: getIsProcessingStep(state)\n});\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<AppAction>\n): DispatchProps => ({\n  onMove: d => dispatch(movePlayer(d))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Maze, ID } from \"./types\";\nimport { Loadable } from \"./types\";\nimport { GameData, EntityData } from \"./types/game\";\nimport { Entity } from \"./types/entities\";\n\nexport interface State {\n  game: Loadable.Loadable<GameData.GameData>;\n  stepId?: ID.ID;\n}\n\nexport const create = (init = {}): State => ({\n  game: Loadable.loading(),\n  ...init\n});\n\nexport const requestingNewGame = (state: State): State => ({\n  ...state,\n  game: Loadable.loading()\n});\n\nexport const newGame = (\n  state: State,\n  maze: Maze.Maze,\n  entities: Entity.Entity[]\n): State => ({\n  ...state,\n  game: Loadable.loaded(\n    GameData.create(maze, EntityData.fromEntities(entities, maze.dimension))\n  )\n});\n\nexport const ifGameIsLoaded = (f: () => State, state: State): State =>\n  Loadable.isLoaded(state.game) ? f() : state;\n\nexport const requestStep = (state: State, stepId: ID.ID): State => ({\n  ...state,\n  stepId\n});\n\nexport const completeStep = (\n  state: State,\n  stepId: ID.ID,\n  gameData: GameData.GameData\n): State =>\n  ifGameIsLoaded(\n    () =>\n      state.stepId === stepId\n        ? {\n            ...state,\n            stepId: undefined,\n            game: Loadable.loaded(gameData)\n          }\n        : state,\n    state\n  );\n\nexport const abortSTep = (state: State, stepId: ID.ID) =>\n  state.stepId === stepId ? { ...state, stepId: undefined } : state;\n","import * as State from \"./state\";\nimport { AppAction, ActionTypes } from \"./actions\";\n\nexport const reducer = (\n  state: State.State = State.create(),\n  action: AppAction\n): State.State => {\n  switch (action.type) {\n    case ActionTypes.REQUEST_STEP:\n      return State.requestStep(state, action.step.id);\n    case ActionTypes.COMPLETE_STEP:\n      return State.completeStep(state, action.stepId, action.gameData);\n    case ActionTypes.ABORT_STEP:\n      return State.abortSTep(state, action.stepId);\n    case ActionTypes.START_NEW_GAME:\n      return State.newGame(state, action.maze, action.entities);\n    case ActionTypes.REQUEST_NEW_GAME:\n      return State.requestingNewGame(state);\n    default:\n      return state;\n  }\n};\n","import { RequestStep, abortStep, completeStep, ActionTypes } from \"../actions\";\nimport { Loadable, Instruction, Result } from \"../types\";\nimport { GameData, EntityData } from \"../types/game\";\nimport { select, put, take, call } from \"redux-saga/effects\";\nimport { getGame } from \"../selectors\";\n\nexport function* stepEngine() {\n  while (true) {\n    try {\n      const { step }: RequestStep = yield take(ActionTypes.REQUEST_STEP);\n      const game: Loadable.Loadable<GameData.GameData> = yield select(getGame);\n      if (Loadable.isLoaded(game)) {\n        const { data: gameData } = game;\n\n        const stepValidation: Result.Result<void> = yield call(\n          Instruction.validateAll,\n          step.instructions,\n          gameData\n        );\n\n        if (Result.isErr(stepValidation)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        const aiInstructions = GameData.generateAllAIInstructions(gameData);\n        const instructions = [...aiInstructions, ...step.instructions];\n\n        const applied: Result.Result<GameData.GameData> = yield call(\n          Instruction.applyAll,\n          instructions,\n          gameData\n        );\n\n        if (Result.isErr(applied)) {\n          yield put(abortStep(step.id));\n          continue;\n        }\n\n        yield put(completeStep(step.id, applied.data));\n\n        // player collisions POC:\n        yield call(processCollisions, gameData, applied.data);\n      }\n    } catch (e) {\n      console.warn(\"Error processing step\");\n      console.error(e);\n    }\n  }\n}\n\nexport function* processCollisions(\n  last: GameData.GameData,\n  next: GameData.GameData\n) {\n  const player = next.entityData.entityMap[next.entityData.playerEntityId!];\n  const collisions = EntityData.entitiesAtPoint(\n    next.entityData,\n    player.position,\n    next.maze.dimension\n  )\n    .filter(e => e.id !== player.id)\n    .concat(\n      EntityData.neighborsCrossedByEntity(\n        last.entityData,\n        next.entityData,\n        player.id,\n        next.maze.dimension\n      )\n    );\n\n  if (collisions.length === 0) {\n    return;\n  } else if (collisions.find(e => e.type === \"blind-guardian\")) {\n    yield call(window.confirm, \"You've been annihilated.\");\n    window.location.reload();\n  } else if (collisions.find(e => e.type === \"exit\")) {\n    yield call(window.confirm, \"You have escaped with your life. . . for now.\");\n    window.location.reload();\n  }\n}\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport { ActionTypes, MovePlayer, requestStep } from \"../actions\";\nimport { Player } from \"../types/entities\";\nimport { getPlayer, getIsProcessingStep } from \"../selectors\";\nimport { Step, Instruction } from \"../types\";\n\nexport function* movePlayer() {\n  yield takeEvery(ActionTypes.MOVE_PLAYER, function*(action: MovePlayer) {\n    const player: Player.Player = yield select(getPlayer);\n    const isProcessing: boolean = yield select(getIsProcessingStep);\n\n    if (!isProcessing && !!player) {\n      yield put(\n        requestStep(\n          Step.create(\n            action.direction\n              ? Instruction.move(player.id, action.direction)\n              : Instruction.wait(player.id)\n          )\n        )\n      );\n    }\n  });\n}\n","import { RequestNewGame, ActionTypes, startNewGame } from \"../actions\";\nimport { Maze, Dimension, MazeData, Maybe } from \"../types\";\nimport { call, take, put } from \"redux-saga/effects\";\nimport { Api, Numbers } from \"../util\";\nimport { Player, BlindGuardian, Entity, Exit } from \"../types/entities\";\n\nconst name = Maybe.withDefault(Maybe.of(localStorage.getItem(\"name\")), () => {\n  let n = window.prompt(\"What is your name?\") || \"\";\n  if (n !== \"\") {\n    localStorage.setItem(\"name\", n);\n  }\n  return n !== \"\" ? n : \"?\";\n});\n\nexport function* newGame() {\n  while (true) {\n    try {\n      const { options }: RequestNewGame = yield take(\n        ActionTypes.REQUEST_NEW_GAME\n      );\n      const data: MazeData.MazeData = yield call(\n        Api.maze,\n        options.mazeOptions || {}\n      );\n      const maze: Maze.Maze = Maze.fromMazeData(data);\n\n      yield put(startNewGame(maze, startingEntities(maze)));\n    } catch (e) {\n      console.warn(\"Error initializing new game\");\n      console.error(e);\n    }\n  }\n}\n\nexport const startingEntities = ({ dimension }: Maze.Maze): Entity.Entity[] => {\n  const player = Player.create(name, Dimension.pointAlongEdge(dimension));\n  const exit = Exit.create(Dimension.randomPoint(dimension));\n  const guardians = new Array(Numbers.randomInRange(2, 8))\n    .fill(undefined)\n    .map(_ => BlindGuardian.create(Dimension.randomPoint(dimension)));\n\n  return [player, exit, ...guardians];\n};\n","import { spawn, all, put } from \"redux-saga/effects\";\nimport { Dimension } from \"./types\";\nimport { requestNewGame } from \"./actions\";\nimport { stepEngine } from \"./sagas/stepEngine\";\nimport { movePlayer } from \"./sagas/movePlayer\";\nimport { newGame } from \"./sagas/newGame\";\n\nconst sagas = [newGame, stepEngine, movePlayer];\n\nexport function* root() {\n  yield all(sagas.map(s => spawn(s)));\n  yield put(\n    requestNewGame({\n      mazeOptions: {\n        dimension: Dimension.create(15, 15),\n        algorithm: \"aldous-broder\"\n      }\n    })\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from \"./index.css\";\nimport App from \"./app/views/App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./app/store\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <div className={styles.app}>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport * as Saga from \"./saga\";\nimport { State } from \"./state\";\nimport { AppAction } from \"./actions\";\n\nexport const configureStore = (): Store<State, AppAction> => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n  sagaMiddleware.run(Saga.root);\n\n  return store;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GamePad_root__Lay6t\",\"row\":\"GamePad_row__164Sm\",\"block\":\"GamePad_block__l2_xd\",\"button\":\"GamePad_button__3kDFo\",\"wait\":\"GamePad_wait__5DVYu\"};"],"sourceRoot":""}